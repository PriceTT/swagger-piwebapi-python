# coding: utf-8

"""
    PI Web API 2017 Swagger Spec

    Swagger Spec file that describes PI Web API

    OpenAPI spec version: 1.9.0.266
    Contact: techsupport@osisoft.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ElementApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def element_add_referenced_element(self, web_id, referenced_element_web_id, **kwargs):
        """
        Add a reference to an existing element to the child elements collection.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.element_add_referenced_element(web_id, referenced_element_web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the element which the referenced element will be added to. (required)
        :param list[str] referenced_element_web_id: The ID of the referenced element. Multiple referenced elements may be specified with multiple instances of the parameter. (required)
        :param str reference_type: The name of the reference type between the parent and the referenced element. The default is \"parent-child\".
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.element_add_referenced_element_with_http_info(web_id, referenced_element_web_id, **kwargs)
        else:
            (data) = self.element_add_referenced_element_with_http_info(web_id, referenced_element_web_id, **kwargs)
            return data

    def element_add_referenced_element_with_http_info(self, web_id, referenced_element_web_id, **kwargs):
        """
        Add a reference to an existing element to the child elements collection.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.element_add_referenced_element_with_http_info(web_id, referenced_element_web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the element which the referenced element will be added to. (required)
        :param list[str] referenced_element_web_id: The ID of the referenced element. Multiple referenced elements may be specified with multiple instances of the parameter. (required)
        :param str reference_type: The name of the reference type between the parent and the referenced element. The default is \"parent-child\".
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'referenced_element_web_id', 'reference_type']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method element_add_referenced_element" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `element_add_referenced_element`")
        # verify the required parameter 'referenced_element_web_id' is set
        if ('referenced_element_web_id' not in params) or (params['referenced_element_web_id'] is None):
            raise ValueError("Missing the required parameter `referenced_element_web_id` when calling `element_add_referenced_element`")


        collection_formats = {}

        resource_path = '/elements/{webId}/referencedelements'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'referenced_element_web_id' in params:
            query_params['referencedElementWebId'] = params['referenced_element_web_id']
            collection_formats['referencedElementWebId'] = 'multi'
        if 'reference_type' in params:
            query_params['referenceType'] = params['reference_type']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def element_create_analysis(self, web_id, analysis, **kwargs):
        """
        Create an Analysis.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.element_create_analysis(web_id, analysis, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the element on which to create the Analysis. (required)
        :param Analysis1 analysis: The new Analysis definition. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.element_create_analysis_with_http_info(web_id, analysis, **kwargs)
        else:
            (data) = self.element_create_analysis_with_http_info(web_id, analysis, **kwargs)
            return data

    def element_create_analysis_with_http_info(self, web_id, analysis, **kwargs):
        """
        Create an Analysis.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.element_create_analysis_with_http_info(web_id, analysis, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the element on which to create the Analysis. (required)
        :param Analysis1 analysis: The new Analysis definition. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'analysis']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method element_create_analysis" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `element_create_analysis`")
        # verify the required parameter 'analysis' is set
        if ('analysis' not in params) or (params['analysis'] is None):
            raise ValueError("Missing the required parameter `analysis` when calling `element_create_analysis`")


        collection_formats = {}

        resource_path = '/elements/{webId}/analyses'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'analysis' in params:
            body_params = params['analysis']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def element_create_attribute(self, web_id, attribute, **kwargs):
        """
        Create a new attribute of the specified element.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.element_create_attribute(web_id, attribute, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the element on which to create the attribute. (required)
        :param Attribute2 attribute: The definition of the new attribute. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.element_create_attribute_with_http_info(web_id, attribute, **kwargs)
        else:
            (data) = self.element_create_attribute_with_http_info(web_id, attribute, **kwargs)
            return data

    def element_create_attribute_with_http_info(self, web_id, attribute, **kwargs):
        """
        Create a new attribute of the specified element.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.element_create_attribute_with_http_info(web_id, attribute, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the element on which to create the attribute. (required)
        :param Attribute2 attribute: The definition of the new attribute. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'attribute']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method element_create_attribute" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `element_create_attribute`")
        # verify the required parameter 'attribute' is set
        if ('attribute' not in params) or (params['attribute'] is None):
            raise ValueError("Missing the required parameter `attribute` when calling `element_create_attribute`")


        collection_formats = {}

        resource_path = '/elements/{webId}/attributes'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'attribute' in params:
            body_params = params['attribute']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def element_create_config(self, web_id, **kwargs):
        """
        Executes the create configuration function of the data references found within the attributes of the element, and optionally, its children.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.element_create_config(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the element. (required)
        :param bool include_child_elements: If true, includes the child elements of the specified element.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.element_create_config_with_http_info(web_id, **kwargs)
        else:
            (data) = self.element_create_config_with_http_info(web_id, **kwargs)
            return data

    def element_create_config_with_http_info(self, web_id, **kwargs):
        """
        Executes the create configuration function of the data references found within the attributes of the element, and optionally, its children.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.element_create_config_with_http_info(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the element. (required)
        :param bool include_child_elements: If true, includes the child elements of the specified element.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'include_child_elements']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method element_create_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `element_create_config`")


        collection_formats = {}

        resource_path = '/elements/{webId}/config'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'include_child_elements' in params:
            query_params['includeChildElements'] = params['include_child_elements']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def element_create_element(self, web_id, element, **kwargs):
        """
        Create a child element.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.element_create_element(web_id, element, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the parent element on which to create the element. (required)
        :param Element2 element: The new element definition. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.element_create_element_with_http_info(web_id, element, **kwargs)
        else:
            (data) = self.element_create_element_with_http_info(web_id, element, **kwargs)
            return data

    def element_create_element_with_http_info(self, web_id, element, **kwargs):
        """
        Create a child element.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.element_create_element_with_http_info(web_id, element, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the parent element on which to create the element. (required)
        :param Element2 element: The new element definition. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'element']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method element_create_element" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `element_create_element`")
        # verify the required parameter 'element' is set
        if ('element' not in params) or (params['element'] is None):
            raise ValueError("Missing the required parameter `element` when calling `element_create_element`")


        collection_formats = {}

        resource_path = '/elements/{webId}/elements'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'element' in params:
            body_params = params['element']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def element_create_search_by_attribute(self, **kwargs):
        """
        Create a link for a \"Search Elements By Attribute Value\" operation, whose queries are specified in the request content. The SearchRoot is specified by the Web Id of the root Element. If the SearchRoot is not specified, then the search starts at the Asset Database. ElementTemplate must be provided as the Web ID of the ElementTemplate, which are used to create the Elements. All the attributes in the queries must be defined as AttributeTemplates on the ElementTemplate. An array of attribute value queries are ANDed together to find the desired Element objects. At least one value query must be specified. There are limitations on SearchOperators.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.element_create_search_by_attribute(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.element_create_search_by_attribute_with_http_info(**kwargs)
        else:
            (data) = self.element_create_search_by_attribute_with_http_info(**kwargs)
            return data

    def element_create_search_by_attribute_with_http_info(self, **kwargs):
        """
        Create a link for a \"Search Elements By Attribute Value\" operation, whose queries are specified in the request content. The SearchRoot is specified by the Web Id of the root Element. If the SearchRoot is not specified, then the search starts at the Asset Database. ElementTemplate must be provided as the Web ID of the ElementTemplate, which are used to create the Elements. All the attributes in the queries must be defined as AttributeTemplates on the ElementTemplate. An array of attribute value queries are ANDed together to find the desired Element objects. At least one value query must be specified. There are limitations on SearchOperators.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.element_create_search_by_attribute_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method element_create_search_by_attribute" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        resource_path = '/elements/searchbyattribute'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def element_create_security_entry(self, web_id, security_entry, **kwargs):
        """
        Create a security entry owned by the element.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.element_create_security_entry(web_id, security_entry, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the element where the security entry will be created. (required)
        :param SecurityEntry14 security_entry: The new security entry definition. The full list of allow and deny rights must be supplied. (required)
        :param bool apply_to_children: If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.element_create_security_entry_with_http_info(web_id, security_entry, **kwargs)
        else:
            (data) = self.element_create_security_entry_with_http_info(web_id, security_entry, **kwargs)
            return data

    def element_create_security_entry_with_http_info(self, web_id, security_entry, **kwargs):
        """
        Create a security entry owned by the element.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.element_create_security_entry_with_http_info(web_id, security_entry, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the element where the security entry will be created. (required)
        :param SecurityEntry14 security_entry: The new security entry definition. The full list of allow and deny rights must be supplied. (required)
        :param bool apply_to_children: If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'security_entry', 'apply_to_children']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method element_create_security_entry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `element_create_security_entry`")
        # verify the required parameter 'security_entry' is set
        if ('security_entry' not in params) or (params['security_entry'] is None):
            raise ValueError("Missing the required parameter `security_entry` when calling `element_create_security_entry`")


        collection_formats = {}

        resource_path = '/elements/{webId}/securityentries'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'apply_to_children' in params:
            query_params['applyToChildren'] = params['apply_to_children']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'security_entry' in params:
            body_params = params['security_entry']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def element_delete(self, web_id, **kwargs):
        """
        Delete an element.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.element_delete(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the element. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.element_delete_with_http_info(web_id, **kwargs)
        else:
            (data) = self.element_delete_with_http_info(web_id, **kwargs)
            return data

    def element_delete_with_http_info(self, web_id, **kwargs):
        """
        Delete an element.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.element_delete_with_http_info(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the element. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method element_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `element_delete`")


        collection_formats = {}

        resource_path = '/elements/{webId}'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def element_delete_security_entry(self, name, web_id, **kwargs):
        """
        Delete a security entry owned by the element.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.element_delete_security_entry(name, web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
        :param str web_id: The ID of the element where the security entry will be deleted. (required)
        :param bool apply_to_children: If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.element_delete_security_entry_with_http_info(name, web_id, **kwargs)
        else:
            (data) = self.element_delete_security_entry_with_http_info(name, web_id, **kwargs)
            return data

    def element_delete_security_entry_with_http_info(self, name, web_id, **kwargs):
        """
        Delete a security entry owned by the element.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.element_delete_security_entry_with_http_info(name, web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
        :param str web_id: The ID of the element where the security entry will be deleted. (required)
        :param bool apply_to_children: If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'web_id', 'apply_to_children']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method element_delete_security_entry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `element_delete_security_entry`")
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `element_delete_security_entry`")


        collection_formats = {}

        resource_path = '/elements/{webId}/securityentries/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'apply_to_children' in params:
            query_params['applyToChildren'] = params['apply_to_children']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def element_execute_search_by_attribute(self, search_id, **kwargs):
        """
        Execute a \"Search Elements By Attribute Value\" operation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.element_execute_search_by_attribute(search_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str search_id: The encoded search Id of the \"Search Elements By Attribute Value\" operation. (required)
        :param str category_name: Specify that the owner of the returned attributes must have this category. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter.
        :param str description_filter: The element description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter.
        :param int max_count: The maximum number of objects to be returned. The default is 1000.
        :param str name_filter: The name query string used for finding objects. The default is no filter.
        :param bool search_full_hierarchy: Specifies if the search should include objects nested further than the immediate children of the searchRoot. The default is 'false'.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param str sort_field: The field or property of the object used to sort the returned collection. The default is 'Name'.
        :param str sort_order: The order that the returned collection is sorted. The default is 'Ascending'.
        :param int start_index: The starting index (zero based) of the items to be returned. The default is 0.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.element_execute_search_by_attribute_with_http_info(search_id, **kwargs)
        else:
            (data) = self.element_execute_search_by_attribute_with_http_info(search_id, **kwargs)
            return data

    def element_execute_search_by_attribute_with_http_info(self, search_id, **kwargs):
        """
        Execute a \"Search Elements By Attribute Value\" operation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.element_execute_search_by_attribute_with_http_info(search_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str search_id: The encoded search Id of the \"Search Elements By Attribute Value\" operation. (required)
        :param str category_name: Specify that the owner of the returned attributes must have this category. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter.
        :param str description_filter: The element description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter.
        :param int max_count: The maximum number of objects to be returned. The default is 1000.
        :param str name_filter: The name query string used for finding objects. The default is no filter.
        :param bool search_full_hierarchy: Specifies if the search should include objects nested further than the immediate children of the searchRoot. The default is 'false'.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param str sort_field: The field or property of the object used to sort the returned collection. The default is 'Name'.
        :param str sort_order: The order that the returned collection is sorted. The default is 'Ascending'.
        :param int start_index: The starting index (zero based) of the items to be returned. The default is 0.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search_id', 'category_name', 'description_filter', 'max_count', 'name_filter', 'search_full_hierarchy', 'selected_fields', 'sort_field', 'sort_order', 'start_index']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method element_execute_search_by_attribute" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'search_id' is set
        if ('search_id' not in params) or (params['search_id'] is None):
            raise ValueError("Missing the required parameter `search_id` when calling `element_execute_search_by_attribute`")


        collection_formats = {}

        resource_path = '/elements/searchbyattribute/{searchId}'.replace('{format}', 'json')
        path_params = {}
        if 'search_id' in params:
            path_params['searchId'] = params['search_id']

        query_params = {}
        if 'category_name' in params:
            query_params['categoryName'] = params['category_name']
        if 'description_filter' in params:
            query_params['descriptionFilter'] = params['description_filter']
        if 'max_count' in params:
            query_params['maxCount'] = params['max_count']
        if 'name_filter' in params:
            query_params['nameFilter'] = params['name_filter']
        if 'search_full_hierarchy' in params:
            query_params['searchFullHierarchy'] = params['search_full_hierarchy']
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']
        if 'sort_field' in params:
            query_params['sortField'] = params['sort_field']
        if 'sort_order' in params:
            query_params['sortOrder'] = params['sort_order']
        if 'start_index' in params:
            query_params['startIndex'] = params['start_index']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def element_find_element_attributes(self, web_id, **kwargs):
        """
        Retrieves a list of element attributes matching the specified filters from the specified element.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.element_find_element_attributes(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the element to use as the root of the search. (required)
        :param str attribute_category: Specify that returned attributes must have this category. The default is no filter.
        :param str attribute_description_filter: The attribute description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter.
        :param str attribute_name_filter: The attribute name filter string used for finding objects. The default is no filter.
        :param str attribute_type: Specify that returned attributes' value type must be this value type. The default is no filter.
        :param str element_category: Specify that the owner of the returned attributes must have this category. The default is no filter.
        :param str element_description_filter: The element description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter.
        :param str element_name_filter: The element name filter string used for finding objects. The default is no filter.
        :param str element_template: Specify that the owner of the returned attributes must have this template or a template derived from this template. The default is no filter.
        :param str element_type: Specify that the element of the returned attributes must have this AFElementType. The default is no filter.
        :param int max_count: The maximum number of objects to be returned (the page size). The default is 1000.
        :param bool search_full_hierarchy: Specifies if the search should include objects nested further than immediate children of the given resource. The default is 'false'.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param str sort_field: The field or property of the object used to sort the returned collection. The default is 'Name'.
        :param str sort_order: The order that the returned collection is sorted. The default is 'Ascending'.
        :param int start_index: The starting index (zero based) of the items to be returned. The default is 0.
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.element_find_element_attributes_with_http_info(web_id, **kwargs)
        else:
            (data) = self.element_find_element_attributes_with_http_info(web_id, **kwargs)
            return data

    def element_find_element_attributes_with_http_info(self, web_id, **kwargs):
        """
        Retrieves a list of element attributes matching the specified filters from the specified element.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.element_find_element_attributes_with_http_info(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the element to use as the root of the search. (required)
        :param str attribute_category: Specify that returned attributes must have this category. The default is no filter.
        :param str attribute_description_filter: The attribute description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter.
        :param str attribute_name_filter: The attribute name filter string used for finding objects. The default is no filter.
        :param str attribute_type: Specify that returned attributes' value type must be this value type. The default is no filter.
        :param str element_category: Specify that the owner of the returned attributes must have this category. The default is no filter.
        :param str element_description_filter: The element description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter.
        :param str element_name_filter: The element name filter string used for finding objects. The default is no filter.
        :param str element_template: Specify that the owner of the returned attributes must have this template or a template derived from this template. The default is no filter.
        :param str element_type: Specify that the element of the returned attributes must have this AFElementType. The default is no filter.
        :param int max_count: The maximum number of objects to be returned (the page size). The default is 1000.
        :param bool search_full_hierarchy: Specifies if the search should include objects nested further than immediate children of the given resource. The default is 'false'.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param str sort_field: The field or property of the object used to sort the returned collection. The default is 'Name'.
        :param str sort_order: The order that the returned collection is sorted. The default is 'Ascending'.
        :param int start_index: The starting index (zero based) of the items to be returned. The default is 0.
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'attribute_category', 'attribute_description_filter', 'attribute_name_filter', 'attribute_type', 'element_category', 'element_description_filter', 'element_name_filter', 'element_template', 'element_type', 'max_count', 'search_full_hierarchy', 'selected_fields', 'sort_field', 'sort_order', 'start_index']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method element_find_element_attributes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `element_find_element_attributes`")


        collection_formats = {}

        resource_path = '/elements/{webId}/elementattributes'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'attribute_category' in params:
            query_params['attributeCategory'] = params['attribute_category']
        if 'attribute_description_filter' in params:
            query_params['attributeDescriptionFilter'] = params['attribute_description_filter']
        if 'attribute_name_filter' in params:
            query_params['attributeNameFilter'] = params['attribute_name_filter']
        if 'attribute_type' in params:
            query_params['attributeType'] = params['attribute_type']
        if 'element_category' in params:
            query_params['elementCategory'] = params['element_category']
        if 'element_description_filter' in params:
            query_params['elementDescriptionFilter'] = params['element_description_filter']
        if 'element_name_filter' in params:
            query_params['elementNameFilter'] = params['element_name_filter']
        if 'element_template' in params:
            query_params['elementTemplate'] = params['element_template']
        if 'element_type' in params:
            query_params['elementType'] = params['element_type']
        if 'max_count' in params:
            query_params['maxCount'] = params['max_count']
        if 'search_full_hierarchy' in params:
            query_params['searchFullHierarchy'] = params['search_full_hierarchy']
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']
        if 'sort_field' in params:
            query_params['sortField'] = params['sort_field']
        if 'sort_order' in params:
            query_params['sortOrder'] = params['sort_order']
        if 'start_index' in params:
            query_params['startIndex'] = params['start_index']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20013',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def element_get(self, web_id, **kwargs):
        """
        Retrieve an element.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.element_get(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the element. (required)
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse20015Items
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.element_get_with_http_info(web_id, **kwargs)
        else:
            (data) = self.element_get_with_http_info(web_id, **kwargs)
            return data

    def element_get_with_http_info(self, web_id, **kwargs):
        """
        Retrieve an element.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.element_get_with_http_info(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the element. (required)
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse20015Items
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'selected_fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method element_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `element_get`")


        collection_formats = {}

        resource_path = '/elements/{webId}'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20015Items',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def element_get_analyses(self, web_id, **kwargs):
        """
        Retrieve analyses based on the specified conditions.
        Users can search for the analyses based on specific search parameters. If no parameters are specified in the search, the default values for each parameter will be used and will return the analyses that match the default search.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.element_get_analyses(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the element, which is the Target of the analyses. (required)
        :param int max_count: The maximum number of objects to be returned per call (page size). The default is 1000.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param str sort_field: The field or property of the object used to sort the returned collection. The default is 'Name'.
        :param str sort_order: The order that the returned collection is sorted. The default is 'Ascending'.
        :param int start_index: The starting index (zero based) of the items to be returned. The default is 0.
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.element_get_analyses_with_http_info(web_id, **kwargs)
        else:
            (data) = self.element_get_analyses_with_http_info(web_id, **kwargs)
            return data

    def element_get_analyses_with_http_info(self, web_id, **kwargs):
        """
        Retrieve analyses based on the specified conditions.
        Users can search for the analyses based on specific search parameters. If no parameters are specified in the search, the default values for each parameter will be used and will return the analyses that match the default search.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.element_get_analyses_with_http_info(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the element, which is the Target of the analyses. (required)
        :param int max_count: The maximum number of objects to be returned per call (page size). The default is 1000.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param str sort_field: The field or property of the object used to sort the returned collection. The default is 'Name'.
        :param str sort_order: The order that the returned collection is sorted. The default is 'Ascending'.
        :param int start_index: The starting index (zero based) of the items to be returned. The default is 0.
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'max_count', 'selected_fields', 'sort_field', 'sort_order', 'start_index']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method element_get_analyses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `element_get_analyses`")


        collection_formats = {}

        resource_path = '/elements/{webId}/analyses'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'max_count' in params:
            query_params['maxCount'] = params['max_count']
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']
        if 'sort_field' in params:
            query_params['sortField'] = params['sort_field']
        if 'sort_order' in params:
            query_params['sortOrder'] = params['sort_order']
        if 'start_index' in params:
            query_params['startIndex'] = params['start_index']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20010',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def element_get_attributes(self, web_id, **kwargs):
        """
        Get the attributes of the specified element.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.element_get_attributes(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the element. (required)
        :param str category_name: Specify that returned attributes must have this category. The default is no category filter.
        :param int max_count: The maximum number of objects to be returned per call (page size). The default is 1000.
        :param str name_filter: The name query string used for finding attributes. The default is no filter.
        :param bool search_full_hierarchy: Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is 'false'.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param bool show_excluded: Specified if the search should include attributes with the Excluded property set. The default is 'false'.
        :param bool show_hidden: Specified if the search should include attributes with the Hidden property set. The default is 'false'.
        :param str sort_field: The field or property of the object used to sort the returned collection. The default is 'Name'.
        :param str sort_order: The order that the returned collection is sorted. The default is 'Ascending'.
        :param int start_index: The starting index (zero based) of the items to be returned. The default is 0.
        :param str template_name: Specify that returned attributes must be members of this template. The default is no template filter.
        :param str value_type: Specify that returned attributes' value type must be the given value type. The default is no value type filter.
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.element_get_attributes_with_http_info(web_id, **kwargs)
        else:
            (data) = self.element_get_attributes_with_http_info(web_id, **kwargs)
            return data

    def element_get_attributes_with_http_info(self, web_id, **kwargs):
        """
        Get the attributes of the specified element.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.element_get_attributes_with_http_info(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the element. (required)
        :param str category_name: Specify that returned attributes must have this category. The default is no category filter.
        :param int max_count: The maximum number of objects to be returned per call (page size). The default is 1000.
        :param str name_filter: The name query string used for finding attributes. The default is no filter.
        :param bool search_full_hierarchy: Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is 'false'.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param bool show_excluded: Specified if the search should include attributes with the Excluded property set. The default is 'false'.
        :param bool show_hidden: Specified if the search should include attributes with the Hidden property set. The default is 'false'.
        :param str sort_field: The field or property of the object used to sort the returned collection. The default is 'Name'.
        :param str sort_order: The order that the returned collection is sorted. The default is 'Ascending'.
        :param int start_index: The starting index (zero based) of the items to be returned. The default is 0.
        :param str template_name: Specify that returned attributes must be members of this template. The default is no template filter.
        :param str value_type: Specify that returned attributes' value type must be the given value type. The default is no value type filter.
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'category_name', 'max_count', 'name_filter', 'search_full_hierarchy', 'selected_fields', 'show_excluded', 'show_hidden', 'sort_field', 'sort_order', 'start_index', 'template_name', 'value_type']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method element_get_attributes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `element_get_attributes`")


        collection_formats = {}

        resource_path = '/elements/{webId}/attributes'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'category_name' in params:
            query_params['categoryName'] = params['category_name']
        if 'max_count' in params:
            query_params['maxCount'] = params['max_count']
        if 'name_filter' in params:
            query_params['nameFilter'] = params['name_filter']
        if 'search_full_hierarchy' in params:
            query_params['searchFullHierarchy'] = params['search_full_hierarchy']
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']
        if 'show_excluded' in params:
            query_params['showExcluded'] = params['show_excluded']
        if 'show_hidden' in params:
            query_params['showHidden'] = params['show_hidden']
        if 'sort_field' in params:
            query_params['sortField'] = params['sort_field']
        if 'sort_order' in params:
            query_params['sortOrder'] = params['sort_order']
        if 'start_index' in params:
            query_params['startIndex'] = params['start_index']
        if 'template_name' in params:
            query_params['templateName'] = params['template_name']
        if 'value_type' in params:
            query_params['valueType'] = params['value_type']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20013',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def element_get_by_path(self, path, **kwargs):
        """
        Retrieve an element by path.
        This method returns an element based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.element_get_by_path(path, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str path: The path to the element. (required)
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse20015Items
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.element_get_by_path_with_http_info(path, **kwargs)
        else:
            (data) = self.element_get_by_path_with_http_info(path, **kwargs)
            return data

    def element_get_by_path_with_http_info(self, path, **kwargs):
        """
        Retrieve an element by path.
        This method returns an element based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.element_get_by_path_with_http_info(path, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str path: The path to the element. (required)
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse20015Items
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['path', 'selected_fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method element_get_by_path" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'path' is set
        if ('path' not in params) or (params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `element_get_by_path`")


        collection_formats = {}

        resource_path = '/elements'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'path' in params:
            query_params['path'] = params['path']
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20015Items',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def element_get_categories(self, web_id, **kwargs):
        """
        Get an element's categories.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.element_get_categories(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the element. (required)
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.element_get_categories_with_http_info(web_id, **kwargs)
        else:
            (data) = self.element_get_categories_with_http_info(web_id, **kwargs)
            return data

    def element_get_categories_with_http_info(self, web_id, **kwargs):
        """
        Get an element's categories.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.element_get_categories_with_http_info(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the element. (required)
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'selected_fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method element_get_categories" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `element_get_categories`")


        collection_formats = {}

        resource_path = '/elements/{webId}/categories'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20014',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def element_get_elements(self, web_id, **kwargs):
        """
        Retrieve elements based on the specified conditions. By default, this method selects immediate children of the specified element.
        Users can search for the elements based on specific search parameters. If no parameters are specified in the search, the default values for each parameter will be used and will return the elements that match the default search.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.element_get_elements(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the element to use as the root of the search. (required)
        :param str category_name: Specify that returned elements must have this category. The default is no category filter.
        :param str description_filter: Specify that returned elements must have this description. The default is no description filter.
        :param str element_type: Specify that returned elements must have this type. The default type is 'Any'.
        :param int max_count: The maximum number of objects to be returned per call (page size). The default is 1000.
        :param str name_filter: The name query string used for finding objects. The default is no filter.
        :param bool search_full_hierarchy: Specifies if the search should include objects nested further than the immediate children of the searchRoot. The default is 'false'.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param str sort_field: The field or property of the object used to sort the returned collection. The default is 'Name'.
        :param str sort_order: The order that the returned collection is sorted. The default is 'Ascending'.
        :param int start_index: The starting index (zero based) of the items to be returned. The default is 0.
        :param str template_name: Specify that returned elements must have this template or a template derived from this template. The default is no template filter.
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.element_get_elements_with_http_info(web_id, **kwargs)
        else:
            (data) = self.element_get_elements_with_http_info(web_id, **kwargs)
            return data

    def element_get_elements_with_http_info(self, web_id, **kwargs):
        """
        Retrieve elements based on the specified conditions. By default, this method selects immediate children of the specified element.
        Users can search for the elements based on specific search parameters. If no parameters are specified in the search, the default values for each parameter will be used and will return the elements that match the default search.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.element_get_elements_with_http_info(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the element to use as the root of the search. (required)
        :param str category_name: Specify that returned elements must have this category. The default is no category filter.
        :param str description_filter: Specify that returned elements must have this description. The default is no description filter.
        :param str element_type: Specify that returned elements must have this type. The default type is 'Any'.
        :param int max_count: The maximum number of objects to be returned per call (page size). The default is 1000.
        :param str name_filter: The name query string used for finding objects. The default is no filter.
        :param bool search_full_hierarchy: Specifies if the search should include objects nested further than the immediate children of the searchRoot. The default is 'false'.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param str sort_field: The field or property of the object used to sort the returned collection. The default is 'Name'.
        :param str sort_order: The order that the returned collection is sorted. The default is 'Ascending'.
        :param int start_index: The starting index (zero based) of the items to be returned. The default is 0.
        :param str template_name: Specify that returned elements must have this template or a template derived from this template. The default is no template filter.
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'category_name', 'description_filter', 'element_type', 'max_count', 'name_filter', 'search_full_hierarchy', 'selected_fields', 'sort_field', 'sort_order', 'start_index', 'template_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method element_get_elements" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `element_get_elements`")


        collection_formats = {}

        resource_path = '/elements/{webId}/elements'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'category_name' in params:
            query_params['categoryName'] = params['category_name']
        if 'description_filter' in params:
            query_params['descriptionFilter'] = params['description_filter']
        if 'element_type' in params:
            query_params['elementType'] = params['element_type']
        if 'max_count' in params:
            query_params['maxCount'] = params['max_count']
        if 'name_filter' in params:
            query_params['nameFilter'] = params['name_filter']
        if 'search_full_hierarchy' in params:
            query_params['searchFullHierarchy'] = params['search_full_hierarchy']
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']
        if 'sort_field' in params:
            query_params['sortField'] = params['sort_field']
        if 'sort_order' in params:
            query_params['sortOrder'] = params['sort_order']
        if 'start_index' in params:
            query_params['startIndex'] = params['start_index']
        if 'template_name' in params:
            query_params['templateName'] = params['template_name']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20015',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def element_get_event_frames(self, web_id, **kwargs):
        """
        Retrieve event frames that reference this element based on the specified conditions. By default, returns all event frames that reference this element with a start time in the past 8 hours.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.element_get_event_frames(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the element whose related event frames are sought. (required)
        :param bool can_be_acknowledged: Specify the returned event frames' canBeAcknowledged property. The default is no canBeAcknowledged filter.
        :param str category_name: Specify that returned event frames must have this category. The default is no category filter.
        :param str end_time: The ending time for the search. The endTime must be greater than or equal to the startTime. The searchMode parameter will control whether the comparison will be performed against the event frame's startTime or endTime. The default is '*' if searchMode is not one of the 'Backward*' or 'Forward*' values.
        :param bool is_acknowledged: Specify the returned event frames' isAcknowledged property. The default no isAcknowledged filter.
        :param int max_count: The maximum number of objects to be returned per call (page size). The default is 1000.
        :param str name_filter: The name query string used for finding event frames. The default is no filter.
        :param str search_mode: Determines how the startTime and endTime parameters are treated when searching for event frame objects to be included in the returned collection. If this parameter is one of the 'Backward*' or 'Forward*' values, none of endTime, sortField, or sortOrder may be specified. The default is 'Overlapped'.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param list[str] severity: Specify that returned event frames must have this severity. Multiple severity values may be specified with multiple instances of the parameter. The default is no severity filter.
        :param str sort_field: The field or property of the object used to sort the returned collection. The default is 'Name' if searchMode is not one of the 'Backward*' or 'Forward*' values.
        :param str sort_order: The order that the returned collection is sorted. The default is 'Ascending' if searchMode is not one of the 'Backward*' or 'Forward*' values.
        :param int start_index: The starting index (zero based) of the items to be returned. The default is 0.
        :param str start_time: The starting time for the search. startTime must be less than or equal to the endTime. The searchMode parameter will control whether the comparison will be performed against the event frame's startTime or endTime. The default is '*-8h'.
        :param str template_name: Specify that returned event frames must have this template or a template derived from this template. The default is no template filter. Specify this parameter by name.
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.element_get_event_frames_with_http_info(web_id, **kwargs)
        else:
            (data) = self.element_get_event_frames_with_http_info(web_id, **kwargs)
            return data

    def element_get_event_frames_with_http_info(self, web_id, **kwargs):
        """
        Retrieve event frames that reference this element based on the specified conditions. By default, returns all event frames that reference this element with a start time in the past 8 hours.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.element_get_event_frames_with_http_info(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the element whose related event frames are sought. (required)
        :param bool can_be_acknowledged: Specify the returned event frames' canBeAcknowledged property. The default is no canBeAcknowledged filter.
        :param str category_name: Specify that returned event frames must have this category. The default is no category filter.
        :param str end_time: The ending time for the search. The endTime must be greater than or equal to the startTime. The searchMode parameter will control whether the comparison will be performed against the event frame's startTime or endTime. The default is '*' if searchMode is not one of the 'Backward*' or 'Forward*' values.
        :param bool is_acknowledged: Specify the returned event frames' isAcknowledged property. The default no isAcknowledged filter.
        :param int max_count: The maximum number of objects to be returned per call (page size). The default is 1000.
        :param str name_filter: The name query string used for finding event frames. The default is no filter.
        :param str search_mode: Determines how the startTime and endTime parameters are treated when searching for event frame objects to be included in the returned collection. If this parameter is one of the 'Backward*' or 'Forward*' values, none of endTime, sortField, or sortOrder may be specified. The default is 'Overlapped'.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param list[str] severity: Specify that returned event frames must have this severity. Multiple severity values may be specified with multiple instances of the parameter. The default is no severity filter.
        :param str sort_field: The field or property of the object used to sort the returned collection. The default is 'Name' if searchMode is not one of the 'Backward*' or 'Forward*' values.
        :param str sort_order: The order that the returned collection is sorted. The default is 'Ascending' if searchMode is not one of the 'Backward*' or 'Forward*' values.
        :param int start_index: The starting index (zero based) of the items to be returned. The default is 0.
        :param str start_time: The starting time for the search. startTime must be less than or equal to the endTime. The searchMode parameter will control whether the comparison will be performed against the event frame's startTime or endTime. The default is '*-8h'.
        :param str template_name: Specify that returned event frames must have this template or a template derived from this template. The default is no template filter. Specify this parameter by name.
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'can_be_acknowledged', 'category_name', 'end_time', 'is_acknowledged', 'max_count', 'name_filter', 'search_mode', 'selected_fields', 'severity', 'sort_field', 'sort_order', 'start_index', 'start_time', 'template_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method element_get_event_frames" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `element_get_event_frames`")


        collection_formats = {}

        resource_path = '/elements/{webId}/eventframes'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'can_be_acknowledged' in params:
            query_params['canBeAcknowledged'] = params['can_be_acknowledged']
        if 'category_name' in params:
            query_params['categoryName'] = params['category_name']
        if 'end_time' in params:
            query_params['endTime'] = params['end_time']
        if 'is_acknowledged' in params:
            query_params['isAcknowledged'] = params['is_acknowledged']
        if 'max_count' in params:
            query_params['maxCount'] = params['max_count']
        if 'name_filter' in params:
            query_params['nameFilter'] = params['name_filter']
        if 'search_mode' in params:
            query_params['searchMode'] = params['search_mode']
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']
        if 'severity' in params:
            query_params['severity'] = params['severity']
            collection_formats['severity'] = 'multi'
        if 'sort_field' in params:
            query_params['sortField'] = params['sort_field']
        if 'sort_order' in params:
            query_params['sortOrder'] = params['sort_order']
        if 'start_index' in params:
            query_params['startIndex'] = params['start_index']
        if 'start_time' in params:
            query_params['startTime'] = params['start_time']
        if 'template_name' in params:
            query_params['templateName'] = params['template_name']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20018',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def element_get_multiple(self, **kwargs):
        """
        Retrieve multiple elements by web id or path.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.element_get_multiple(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param bool as_parallel: Specifies if the retrieval processes should be run in parallel on the server. This may improve the response time for large amounts of requested attributes. The default is 'false'.
        :param str include_mode: The include mode for the return list. The default is 'All'.
        :param list[str] path: The path of an element. Multiple elements may be specified with multiple instances of the parameter.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param list[str] web_id: The ID of an element. Multiple elements may be specified with multiple instances of the parameter.
        :return: InlineResponse20037
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.element_get_multiple_with_http_info(**kwargs)
        else:
            (data) = self.element_get_multiple_with_http_info(**kwargs)
            return data

    def element_get_multiple_with_http_info(self, **kwargs):
        """
        Retrieve multiple elements by web id or path.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.element_get_multiple_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param bool as_parallel: Specifies if the retrieval processes should be run in parallel on the server. This may improve the response time for large amounts of requested attributes. The default is 'false'.
        :param str include_mode: The include mode for the return list. The default is 'All'.
        :param list[str] path: The path of an element. Multiple elements may be specified with multiple instances of the parameter.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param list[str] web_id: The ID of an element. Multiple elements may be specified with multiple instances of the parameter.
        :return: InlineResponse20037
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['as_parallel', 'include_mode', 'path', 'selected_fields', 'web_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method element_get_multiple" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/elements/multiple'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'as_parallel' in params:
            query_params['asParallel'] = params['as_parallel']
        if 'include_mode' in params:
            query_params['includeMode'] = params['include_mode']
        if 'path' in params:
            query_params['path'] = params['path']
            collection_formats['path'] = 'multi'
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']
        if 'web_id' in params:
            query_params['webId'] = params['web_id']
            collection_formats['webId'] = 'multi'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20037',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def element_get_referenced_elements(self, web_id, **kwargs):
        """
        Retrieve referenced elements based on the specified conditions. By default, this method selects all referenced elements of the current resource.
        Users can search for the referenced elements based on specific search parameters. If no parameters are specified in the search, the default values for each parameter will be used and will return the elements that match the default search.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.element_get_referenced_elements(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the resource to use as the root of the search. (required)
        :param str category_name: Specify that returned elements must have this category. The default is no category filter.
        :param str description_filter: Specify that returned elements must have this description. The default is no description filter.
        :param str element_type: Specify that returned elements must have this type. The default type is 'Any'.
        :param int max_count: The maximum number of objects to be returned per call (page size). The default is 1000.
        :param str name_filter: The name query string used for finding objects. The default is no filter.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param str sort_field: The field or property of the object used to sort the returned collection. The default is 'Name'.
        :param str sort_order: The order that the returned collection is sorted. The default is 'Ascending'.
        :param int start_index: The starting index (zero based) of the items to be returned. The default is 0.
        :param str template_name: Specify that returned elements must have this template or a template derived from this template. The default is no template filter.
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.element_get_referenced_elements_with_http_info(web_id, **kwargs)
        else:
            (data) = self.element_get_referenced_elements_with_http_info(web_id, **kwargs)
            return data

    def element_get_referenced_elements_with_http_info(self, web_id, **kwargs):
        """
        Retrieve referenced elements based on the specified conditions. By default, this method selects all referenced elements of the current resource.
        Users can search for the referenced elements based on specific search parameters. If no parameters are specified in the search, the default values for each parameter will be used and will return the elements that match the default search.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.element_get_referenced_elements_with_http_info(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the resource to use as the root of the search. (required)
        :param str category_name: Specify that returned elements must have this category. The default is no category filter.
        :param str description_filter: Specify that returned elements must have this description. The default is no description filter.
        :param str element_type: Specify that returned elements must have this type. The default type is 'Any'.
        :param int max_count: The maximum number of objects to be returned per call (page size). The default is 1000.
        :param str name_filter: The name query string used for finding objects. The default is no filter.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param str sort_field: The field or property of the object used to sort the returned collection. The default is 'Name'.
        :param str sort_order: The order that the returned collection is sorted. The default is 'Ascending'.
        :param int start_index: The starting index (zero based) of the items to be returned. The default is 0.
        :param str template_name: Specify that returned elements must have this template or a template derived from this template. The default is no template filter.
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'category_name', 'description_filter', 'element_type', 'max_count', 'name_filter', 'selected_fields', 'sort_field', 'sort_order', 'start_index', 'template_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method element_get_referenced_elements" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `element_get_referenced_elements`")


        collection_formats = {}

        resource_path = '/elements/{webId}/referencedelements'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'category_name' in params:
            query_params['categoryName'] = params['category_name']
        if 'description_filter' in params:
            query_params['descriptionFilter'] = params['description_filter']
        if 'element_type' in params:
            query_params['elementType'] = params['element_type']
        if 'max_count' in params:
            query_params['maxCount'] = params['max_count']
        if 'name_filter' in params:
            query_params['nameFilter'] = params['name_filter']
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']
        if 'sort_field' in params:
            query_params['sortField'] = params['sort_field']
        if 'sort_order' in params:
            query_params['sortOrder'] = params['sort_order']
        if 'start_index' in params:
            query_params['startIndex'] = params['start_index']
        if 'template_name' in params:
            query_params['templateName'] = params['template_name']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20015',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def element_get_security(self, web_id, user_identity, **kwargs):
        """
        Get the security information of the specified security item associated with the element for a specified user.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.element_get_security(web_id, user_identity, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the element for the security to be checked. (required)
        :param list[str] user_identity: The user identity for the security information to be checked. Multiple security identities may be specified with multiple instances of the parameter. If the parameter is not specified, only the current user's security rights will be returned. (required)
        :param bool force_refresh: Indicates if the security cache should be refreshed before getting security information. The default is 'false'.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.element_get_security_with_http_info(web_id, user_identity, **kwargs)
        else:
            (data) = self.element_get_security_with_http_info(web_id, user_identity, **kwargs)
            return data

    def element_get_security_with_http_info(self, web_id, user_identity, **kwargs):
        """
        Get the security information of the specified security item associated with the element for a specified user.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.element_get_security_with_http_info(web_id, user_identity, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the element for the security to be checked. (required)
        :param list[str] user_identity: The user identity for the security information to be checked. Multiple security identities may be specified with multiple instances of the parameter. If the parameter is not specified, only the current user's security rights will be returned. (required)
        :param bool force_refresh: Indicates if the security cache should be refreshed before getting security information. The default is 'false'.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'user_identity', 'force_refresh', 'selected_fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method element_get_security" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `element_get_security`")
        # verify the required parameter 'user_identity' is set
        if ('user_identity' not in params) or (params['user_identity'] is None):
            raise ValueError("Missing the required parameter `user_identity` when calling `element_get_security`")


        collection_formats = {}

        resource_path = '/elements/{webId}/security'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'user_identity' in params:
            query_params['userIdentity'] = params['user_identity']
            collection_formats['userIdentity'] = 'multi'
        if 'force_refresh' in params:
            query_params['forceRefresh'] = params['force_refresh']
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2003',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def element_get_security_entries(self, web_id, **kwargs):
        """
        Retrieve the security entries associated with the element based on the specified criteria. By default, all security entries for this element are returned.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.element_get_security_entries(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the element. (required)
        :param str name_filter: The name query string used for filtering security entries. The default is no filter.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.element_get_security_entries_with_http_info(web_id, **kwargs)
        else:
            (data) = self.element_get_security_entries_with_http_info(web_id, **kwargs)
            return data

    def element_get_security_entries_with_http_info(self, web_id, **kwargs):
        """
        Retrieve the security entries associated with the element based on the specified criteria. By default, all security entries for this element are returned.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.element_get_security_entries_with_http_info(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the element. (required)
        :param str name_filter: The name query string used for filtering security entries. The default is no filter.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'name_filter', 'selected_fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method element_get_security_entries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `element_get_security_entries`")


        collection_formats = {}

        resource_path = '/elements/{webId}/securityentries'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'name_filter' in params:
            query_params['nameFilter'] = params['name_filter']
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2004',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def element_get_security_entry_by_name(self, name, web_id, **kwargs):
        """
        Retrieve the security entry associated with the element with the specified name.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.element_get_security_entry_by_name(name, web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
        :param str web_id: The ID of the element. (required)
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse2004Items
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.element_get_security_entry_by_name_with_http_info(name, web_id, **kwargs)
        else:
            (data) = self.element_get_security_entry_by_name_with_http_info(name, web_id, **kwargs)
            return data

    def element_get_security_entry_by_name_with_http_info(self, name, web_id, **kwargs):
        """
        Retrieve the security entry associated with the element with the specified name.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.element_get_security_entry_by_name_with_http_info(name, web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
        :param str web_id: The ID of the element. (required)
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse2004Items
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'web_id', 'selected_fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method element_get_security_entry_by_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `element_get_security_entry_by_name`")
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `element_get_security_entry_by_name`")


        collection_formats = {}

        resource_path = '/elements/{webId}/securityentries/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2004Items',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def element_remove_referenced_element(self, web_id, referenced_element_web_id, **kwargs):
        """
        Remove a reference to an existing element from the child elements collection.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.element_remove_referenced_element(web_id, referenced_element_web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the element which the referenced element will be removed from. (required)
        :param list[str] referenced_element_web_id: The ID of the referenced element. Multiple referenced elements may be specified with multiple instances of the parameter. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.element_remove_referenced_element_with_http_info(web_id, referenced_element_web_id, **kwargs)
        else:
            (data) = self.element_remove_referenced_element_with_http_info(web_id, referenced_element_web_id, **kwargs)
            return data

    def element_remove_referenced_element_with_http_info(self, web_id, referenced_element_web_id, **kwargs):
        """
        Remove a reference to an existing element from the child elements collection.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.element_remove_referenced_element_with_http_info(web_id, referenced_element_web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the element which the referenced element will be removed from. (required)
        :param list[str] referenced_element_web_id: The ID of the referenced element. Multiple referenced elements may be specified with multiple instances of the parameter. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'referenced_element_web_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method element_remove_referenced_element" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `element_remove_referenced_element`")
        # verify the required parameter 'referenced_element_web_id' is set
        if ('referenced_element_web_id' not in params) or (params['referenced_element_web_id'] is None):
            raise ValueError("Missing the required parameter `referenced_element_web_id` when calling `element_remove_referenced_element`")


        collection_formats = {}

        resource_path = '/elements/{webId}/referencedelements'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'referenced_element_web_id' in params:
            query_params['referencedElementWebId'] = params['referenced_element_web_id']
            collection_formats['referencedElementWebId'] = 'multi'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def element_update(self, web_id, element, **kwargs):
        """
        Update an element by replacing items in its definition.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.element_update(web_id, element, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the element. (required)
        :param Element1 element: A partial element containing the desired changes. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.element_update_with_http_info(web_id, element, **kwargs)
        else:
            (data) = self.element_update_with_http_info(web_id, element, **kwargs)
            return data

    def element_update_with_http_info(self, web_id, element, **kwargs):
        """
        Update an element by replacing items in its definition.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.element_update_with_http_info(web_id, element, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the element. (required)
        :param Element1 element: A partial element containing the desired changes. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'element']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method element_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `element_update`")
        # verify the required parameter 'element' is set
        if ('element' not in params) or (params['element'] is None):
            raise ValueError("Missing the required parameter `element` when calling `element_update`")


        collection_formats = {}

        resource_path = '/elements/{webId}'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'element' in params:
            body_params = params['element']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PATCH',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def element_update_security_entry(self, name, web_id, security_entry, **kwargs):
        """
        Update a security entry owned by the element.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.element_update_security_entry(name, web_id, security_entry, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The name of the security entry. (required)
        :param str web_id: The ID of the element where the security entry will be updated. (required)
        :param SecurityEntry15 security_entry: The new security entry definition. The full list of allow and deny rights must be supplied or they will be removed. (required)
        :param bool apply_to_children: If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.element_update_security_entry_with_http_info(name, web_id, security_entry, **kwargs)
        else:
            (data) = self.element_update_security_entry_with_http_info(name, web_id, security_entry, **kwargs)
            return data

    def element_update_security_entry_with_http_info(self, name, web_id, security_entry, **kwargs):
        """
        Update a security entry owned by the element.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.element_update_security_entry_with_http_info(name, web_id, security_entry, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The name of the security entry. (required)
        :param str web_id: The ID of the element where the security entry will be updated. (required)
        :param SecurityEntry15 security_entry: The new security entry definition. The full list of allow and deny rights must be supplied or they will be removed. (required)
        :param bool apply_to_children: If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'web_id', 'security_entry', 'apply_to_children']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method element_update_security_entry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `element_update_security_entry`")
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `element_update_security_entry`")
        # verify the required parameter 'security_entry' is set
        if ('security_entry' not in params) or (params['security_entry'] is None):
            raise ValueError("Missing the required parameter `security_entry` when calling `element_update_security_entry`")


        collection_formats = {}

        resource_path = '/elements/{webId}/securityentries/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'apply_to_children' in params:
            query_params['applyToChildren'] = params['apply_to_children']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'security_entry' in params:
            body_params = params['security_entry']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
