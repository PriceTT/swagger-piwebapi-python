# coding: utf-8

"""
    PI Web API 2017 Swagger Spec

    Swagger Spec file that describes PI Web API

    OpenAPI spec version: 1.9.0.266
    Contact: techsupport@osisoft.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class StreamSetApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def stream_set_get_channel(self, web_id, **kwargs):
        """
        Opens a channel that will send messages about any value changes for the attributes of an Element, Event Frame, or Attribute.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_set_get_channel(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of an Element, Event Frame or Attribute, which is the base element or parent of all the stream attributes. (required)
        :param str category_name: Specify that included attributes must have this category. The default is no category filter.
        :param bool include_initial_values: Specified if the channel should send a message with the current values of all the streams after the connection is opened. The default is 'false'.
        :param str name_filter: The name query string used for filtering attributes. The default is no filter.
        :param bool search_full_hierarchy: Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is 'false'.
        :param bool show_excluded: Specified if the search should include attributes with the Excluded property set. The default is 'false'.
        :param bool show_hidden: Specified if the search should include attributes with the Hidden property set. The default is 'false'.
        :param str template_name: Specify that included attributes must be members of this template. The default is no template filter.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.stream_set_get_channel_with_http_info(web_id, **kwargs)
        else:
            (data) = self.stream_set_get_channel_with_http_info(web_id, **kwargs)
            return data

    def stream_set_get_channel_with_http_info(self, web_id, **kwargs):
        """
        Opens a channel that will send messages about any value changes for the attributes of an Element, Event Frame, or Attribute.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_set_get_channel_with_http_info(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of an Element, Event Frame or Attribute, which is the base element or parent of all the stream attributes. (required)
        :param str category_name: Specify that included attributes must have this category. The default is no category filter.
        :param bool include_initial_values: Specified if the channel should send a message with the current values of all the streams after the connection is opened. The default is 'false'.
        :param str name_filter: The name query string used for filtering attributes. The default is no filter.
        :param bool search_full_hierarchy: Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is 'false'.
        :param bool show_excluded: Specified if the search should include attributes with the Excluded property set. The default is 'false'.
        :param bool show_hidden: Specified if the search should include attributes with the Hidden property set. The default is 'false'.
        :param str template_name: Specify that included attributes must be members of this template. The default is no template filter.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'category_name', 'include_initial_values', 'name_filter', 'search_full_hierarchy', 'show_excluded', 'show_hidden', 'template_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stream_set_get_channel" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `stream_set_get_channel`")


        collection_formats = {}

        resource_path = '/streamsets/{webId}/channel'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'category_name' in params:
            query_params['categoryName'] = params['category_name']
        if 'include_initial_values' in params:
            query_params['includeInitialValues'] = params['include_initial_values']
        if 'name_filter' in params:
            query_params['nameFilter'] = params['name_filter']
        if 'search_full_hierarchy' in params:
            query_params['searchFullHierarchy'] = params['search_full_hierarchy']
        if 'show_excluded' in params:
            query_params['showExcluded'] = params['show_excluded']
        if 'show_hidden' in params:
            query_params['showHidden'] = params['show_hidden']
        if 'template_name' in params:
            query_params['templateName'] = params['template_name']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def stream_set_get_channel_ad_hoc(self, web_id, **kwargs):
        """
        Opens a channel that will send messages about any value changes for the specified streams.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_set_get_channel_ad_hoc(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] web_id: The ID of a stream.  Multiple streams may be specified with multiple instances of the parameter. (required)
        :param bool include_initial_values: Specified if the channel should send a message with the current values of all the streams after the connection is opened. The default is 'false'.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.stream_set_get_channel_ad_hoc_with_http_info(web_id, **kwargs)
        else:
            (data) = self.stream_set_get_channel_ad_hoc_with_http_info(web_id, **kwargs)
            return data

    def stream_set_get_channel_ad_hoc_with_http_info(self, web_id, **kwargs):
        """
        Opens a channel that will send messages about any value changes for the specified streams.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_set_get_channel_ad_hoc_with_http_info(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] web_id: The ID of a stream.  Multiple streams may be specified with multiple instances of the parameter. (required)
        :param bool include_initial_values: Specified if the channel should send a message with the current values of all the streams after the connection is opened. The default is 'false'.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'include_initial_values']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stream_set_get_channel_ad_hoc" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `stream_set_get_channel_ad_hoc`")


        collection_formats = {}

        resource_path = '/streamsets/channel'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'web_id' in params:
            query_params['webId'] = params['web_id']
            collection_formats['webId'] = 'multi'
        if 'include_initial_values' in params:
            query_params['includeInitialValues'] = params['include_initial_values']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def stream_set_get_end(self, web_id, **kwargs):
        """
        Returns End of stream values of the attributes for an Element, Event Frame or Attribute
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_set_get_end(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of an Element, Event Frame or Attribute, which is the base element or parent of all the stream attributes. (required)
        :param str category_name: Specify that included attributes must have this category. The default is no category filter.
        :param str name_filter: The name query string used for filtering attributes. The default is no filter.
        :param bool search_full_hierarchy: Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is 'false'.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param bool show_excluded: Specified if the search should include attributes with the Excluded property set. The default is 'false'.
        :param bool show_hidden: Specified if the search should include attributes with the Hidden property set. The default is 'false'.
        :param str template_name: Specify that included attributes must be members of this template. The default is no template filter.
        :return: InlineResponse1011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.stream_set_get_end_with_http_info(web_id, **kwargs)
        else:
            (data) = self.stream_set_get_end_with_http_info(web_id, **kwargs)
            return data

    def stream_set_get_end_with_http_info(self, web_id, **kwargs):
        """
        Returns End of stream values of the attributes for an Element, Event Frame or Attribute
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_set_get_end_with_http_info(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of an Element, Event Frame or Attribute, which is the base element or parent of all the stream attributes. (required)
        :param str category_name: Specify that included attributes must have this category. The default is no category filter.
        :param str name_filter: The name query string used for filtering attributes. The default is no filter.
        :param bool search_full_hierarchy: Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is 'false'.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param bool show_excluded: Specified if the search should include attributes with the Excluded property set. The default is 'false'.
        :param bool show_hidden: Specified if the search should include attributes with the Hidden property set. The default is 'false'.
        :param str template_name: Specify that included attributes must be members of this template. The default is no template filter.
        :return: InlineResponse1011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'category_name', 'name_filter', 'search_full_hierarchy', 'selected_fields', 'show_excluded', 'show_hidden', 'template_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stream_set_get_end" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `stream_set_get_end`")


        collection_formats = {}

        resource_path = '/streamsets/{webId}/end'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'category_name' in params:
            query_params['categoryName'] = params['category_name']
        if 'name_filter' in params:
            query_params['nameFilter'] = params['name_filter']
        if 'search_full_hierarchy' in params:
            query_params['searchFullHierarchy'] = params['search_full_hierarchy']
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']
        if 'show_excluded' in params:
            query_params['showExcluded'] = params['show_excluded']
        if 'show_hidden' in params:
            query_params['showHidden'] = params['show_hidden']
        if 'template_name' in params:
            query_params['templateName'] = params['template_name']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse1011',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def stream_set_get_end_ad_hoc(self, web_id, **kwargs):
        """
        Returns End Of Stream values for attributes of the specified streams
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_set_get_end_ad_hoc(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] web_id: The ID of a stream.  Multiple streams may be specified with multiple instances of the parameter. (required)
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse101
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.stream_set_get_end_ad_hoc_with_http_info(web_id, **kwargs)
        else:
            (data) = self.stream_set_get_end_ad_hoc_with_http_info(web_id, **kwargs)
            return data

    def stream_set_get_end_ad_hoc_with_http_info(self, web_id, **kwargs):
        """
        Returns End Of Stream values for attributes of the specified streams
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_set_get_end_ad_hoc_with_http_info(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] web_id: The ID of a stream.  Multiple streams may be specified with multiple instances of the parameter. (required)
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse101
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'selected_fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stream_set_get_end_ad_hoc" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `stream_set_get_end_ad_hoc`")


        collection_formats = {}

        resource_path = '/streamsets/end'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'web_id' in params:
            query_params['webId'] = params['web_id']
            collection_formats['webId'] = 'multi'
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse101',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def stream_set_get_interpolated(self, web_id, **kwargs):
        """
        Returns interpolated values of attributes for an element, event frame or attribute over the specified time range at the specified sampling interval.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_set_get_interpolated(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of an element, event frame or attribute, which is the base element or parent of all the stream attributes. (required)
        :param str category_name: Specify that included attributes must have this category. The default is no category filter.
        :param str end_time: An optional end time. The default is '*' for element attributes and points. For event frame attributes, the default is the event frame's end time, or '*' if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order.
        :param str filter_expression: An optional string containing a filter expression. Expression variables are relative to the data point. Use '.' to reference the containing attribute. If the attribute does not support filtering, the filter will be ignored. The default is no filtering.
        :param bool include_filtered_values: Specify 'true' to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a 'Filtered' enumeration value with bad status. Repeated consecutive failures are omitted.
        :param str interval: The sampling interval, in AFTimeSpan format.
        :param str name_filter: The name query string used for filtering attributes. The default is no filter.
        :param bool search_full_hierarchy: Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is 'false'.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param bool show_excluded: Specified if the search should include attributes with the Excluded property set. The default is 'false'.
        :param bool show_hidden: Specified if the search should include attributes with the Hidden property set. The default is 'false'.
        :param str start_time: An optional start time. The default is '*-1d' for element attributes and points. For event frame attributes, the default is the event frame's start time, or '*-1d' if that is not set.
        :param str template_name: Specify that included attributes must be members of this template. The default is no template filter.
        :param str time_zone: The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
        :return: InlineResponse101
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.stream_set_get_interpolated_with_http_info(web_id, **kwargs)
        else:
            (data) = self.stream_set_get_interpolated_with_http_info(web_id, **kwargs)
            return data

    def stream_set_get_interpolated_with_http_info(self, web_id, **kwargs):
        """
        Returns interpolated values of attributes for an element, event frame or attribute over the specified time range at the specified sampling interval.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_set_get_interpolated_with_http_info(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of an element, event frame or attribute, which is the base element or parent of all the stream attributes. (required)
        :param str category_name: Specify that included attributes must have this category. The default is no category filter.
        :param str end_time: An optional end time. The default is '*' for element attributes and points. For event frame attributes, the default is the event frame's end time, or '*' if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order.
        :param str filter_expression: An optional string containing a filter expression. Expression variables are relative to the data point. Use '.' to reference the containing attribute. If the attribute does not support filtering, the filter will be ignored. The default is no filtering.
        :param bool include_filtered_values: Specify 'true' to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a 'Filtered' enumeration value with bad status. Repeated consecutive failures are omitted.
        :param str interval: The sampling interval, in AFTimeSpan format.
        :param str name_filter: The name query string used for filtering attributes. The default is no filter.
        :param bool search_full_hierarchy: Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is 'false'.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param bool show_excluded: Specified if the search should include attributes with the Excluded property set. The default is 'false'.
        :param bool show_hidden: Specified if the search should include attributes with the Hidden property set. The default is 'false'.
        :param str start_time: An optional start time. The default is '*-1d' for element attributes and points. For event frame attributes, the default is the event frame's start time, or '*-1d' if that is not set.
        :param str template_name: Specify that included attributes must be members of this template. The default is no template filter.
        :param str time_zone: The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
        :return: InlineResponse101
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'category_name', 'end_time', 'filter_expression', 'include_filtered_values', 'interval', 'name_filter', 'search_full_hierarchy', 'selected_fields', 'show_excluded', 'show_hidden', 'start_time', 'template_name', 'time_zone']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stream_set_get_interpolated" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `stream_set_get_interpolated`")


        collection_formats = {}

        resource_path = '/streamsets/{webId}/interpolated'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'category_name' in params:
            query_params['categoryName'] = params['category_name']
        if 'end_time' in params:
            query_params['endTime'] = params['end_time']
        if 'filter_expression' in params:
            query_params['filterExpression'] = params['filter_expression']
        if 'include_filtered_values' in params:
            query_params['includeFilteredValues'] = params['include_filtered_values']
        if 'interval' in params:
            query_params['interval'] = params['interval']
        if 'name_filter' in params:
            query_params['nameFilter'] = params['name_filter']
        if 'search_full_hierarchy' in params:
            query_params['searchFullHierarchy'] = params['search_full_hierarchy']
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']
        if 'show_excluded' in params:
            query_params['showExcluded'] = params['show_excluded']
        if 'show_hidden' in params:
            query_params['showHidden'] = params['show_hidden']
        if 'start_time' in params:
            query_params['startTime'] = params['start_time']
        if 'template_name' in params:
            query_params['templateName'] = params['template_name']
        if 'time_zone' in params:
            query_params['timeZone'] = params['time_zone']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse101',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def stream_set_get_interpolated_ad_hoc(self, web_id, **kwargs):
        """
        Returns interpolated values of the specified streams over the specified time range at the specified sampling interval.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_set_get_interpolated_ad_hoc(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] web_id: The ID of a stream. Multiple streams may be specified with multiple instances of the parameter. (required)
        :param str end_time: An optional end time. The default is '*'. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order.
        :param str filter_expression: An optional string containing a filter expression. Expression variables are relative to the data point. Use '.' to reference the containing attribute. If the attribute does not support filtering, the filter will be ignored. The default is no filtering.
        :param bool include_filtered_values: Specify 'true' to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a 'Filtered' enumeration value with bad status. Repeated consecutive failures are omitted.
        :param str interval: The sampling interval, in AFTimeSpan format.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param str start_time: An optional start time. The default is '*-1d'.
        :param str time_zone: The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
        :return: InlineResponse101
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.stream_set_get_interpolated_ad_hoc_with_http_info(web_id, **kwargs)
        else:
            (data) = self.stream_set_get_interpolated_ad_hoc_with_http_info(web_id, **kwargs)
            return data

    def stream_set_get_interpolated_ad_hoc_with_http_info(self, web_id, **kwargs):
        """
        Returns interpolated values of the specified streams over the specified time range at the specified sampling interval.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_set_get_interpolated_ad_hoc_with_http_info(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] web_id: The ID of a stream. Multiple streams may be specified with multiple instances of the parameter. (required)
        :param str end_time: An optional end time. The default is '*'. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order.
        :param str filter_expression: An optional string containing a filter expression. Expression variables are relative to the data point. Use '.' to reference the containing attribute. If the attribute does not support filtering, the filter will be ignored. The default is no filtering.
        :param bool include_filtered_values: Specify 'true' to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a 'Filtered' enumeration value with bad status. Repeated consecutive failures are omitted.
        :param str interval: The sampling interval, in AFTimeSpan format.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param str start_time: An optional start time. The default is '*-1d'.
        :param str time_zone: The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
        :return: InlineResponse101
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'end_time', 'filter_expression', 'include_filtered_values', 'interval', 'selected_fields', 'start_time', 'time_zone']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stream_set_get_interpolated_ad_hoc" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `stream_set_get_interpolated_ad_hoc`")


        collection_formats = {}

        resource_path = '/streamsets/interpolated'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'web_id' in params:
            query_params['webId'] = params['web_id']
            collection_formats['webId'] = 'multi'
        if 'end_time' in params:
            query_params['endTime'] = params['end_time']
        if 'filter_expression' in params:
            query_params['filterExpression'] = params['filter_expression']
        if 'include_filtered_values' in params:
            query_params['includeFilteredValues'] = params['include_filtered_values']
        if 'interval' in params:
            query_params['interval'] = params['interval']
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']
        if 'start_time' in params:
            query_params['startTime'] = params['start_time']
        if 'time_zone' in params:
            query_params['timeZone'] = params['time_zone']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse101',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def stream_set_get_interpolated_at_times(self, web_id, time, **kwargs):
        """
        Returns interpolated values of attributes for an element, event frame or attribute at the specified times.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_set_get_interpolated_at_times(web_id, time, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of an element, event frame or attribute, which is the base element or parent of all the stream attributes. (required)
        :param list[str] time: The timestamp at which to retrieve a interpolated value. Multiple timestamps may be specified with multiple instances of the parameter. (required)
        :param str category_name: Specify that included attributes must have this category. The default is no category filter.
        :param str filter_expression: An optional string containing a filter expression. Expression variables are relative to the data point. Use '.' to reference the containing attribute. If the attribute does not support filtering, the filter will be ignored. The default is no filtering.
        :param bool include_filtered_values: Specify 'true' to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a 'Filtered' enumeration value with bad status. Repeated consecutive failures are omitted.
        :param str name_filter: The name query string used for filtering attributes. The default is no filter.
        :param bool search_full_hierarchy: Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is 'false'.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param bool show_excluded: Specified if the search should include attributes with the Excluded property set. The default is 'false'.
        :param bool show_hidden: Specified if the search should include attributes with the Hidden property set. The default is 'false'.
        :param str sort_order: The order that the returned collection is sorted. The default is 'Ascending'.
        :param str template_name: Specify that included attributes must be members of this template. The default is no template filter.
        :param str time_zone: The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
        :return: InlineResponse101
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.stream_set_get_interpolated_at_times_with_http_info(web_id, time, **kwargs)
        else:
            (data) = self.stream_set_get_interpolated_at_times_with_http_info(web_id, time, **kwargs)
            return data

    def stream_set_get_interpolated_at_times_with_http_info(self, web_id, time, **kwargs):
        """
        Returns interpolated values of attributes for an element, event frame or attribute at the specified times.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_set_get_interpolated_at_times_with_http_info(web_id, time, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of an element, event frame or attribute, which is the base element or parent of all the stream attributes. (required)
        :param list[str] time: The timestamp at which to retrieve a interpolated value. Multiple timestamps may be specified with multiple instances of the parameter. (required)
        :param str category_name: Specify that included attributes must have this category. The default is no category filter.
        :param str filter_expression: An optional string containing a filter expression. Expression variables are relative to the data point. Use '.' to reference the containing attribute. If the attribute does not support filtering, the filter will be ignored. The default is no filtering.
        :param bool include_filtered_values: Specify 'true' to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a 'Filtered' enumeration value with bad status. Repeated consecutive failures are omitted.
        :param str name_filter: The name query string used for filtering attributes. The default is no filter.
        :param bool search_full_hierarchy: Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is 'false'.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param bool show_excluded: Specified if the search should include attributes with the Excluded property set. The default is 'false'.
        :param bool show_hidden: Specified if the search should include attributes with the Hidden property set. The default is 'false'.
        :param str sort_order: The order that the returned collection is sorted. The default is 'Ascending'.
        :param str template_name: Specify that included attributes must be members of this template. The default is no template filter.
        :param str time_zone: The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
        :return: InlineResponse101
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'time', 'category_name', 'filter_expression', 'include_filtered_values', 'name_filter', 'search_full_hierarchy', 'selected_fields', 'show_excluded', 'show_hidden', 'sort_order', 'template_name', 'time_zone']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stream_set_get_interpolated_at_times" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `stream_set_get_interpolated_at_times`")
        # verify the required parameter 'time' is set
        if ('time' not in params) or (params['time'] is None):
            raise ValueError("Missing the required parameter `time` when calling `stream_set_get_interpolated_at_times`")


        collection_formats = {}

        resource_path = '/streamsets/{webId}/interpolatedattimes'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'time' in params:
            query_params['time'] = params['time']
            collection_formats['time'] = 'multi'
        if 'category_name' in params:
            query_params['categoryName'] = params['category_name']
        if 'filter_expression' in params:
            query_params['filterExpression'] = params['filter_expression']
        if 'include_filtered_values' in params:
            query_params['includeFilteredValues'] = params['include_filtered_values']
        if 'name_filter' in params:
            query_params['nameFilter'] = params['name_filter']
        if 'search_full_hierarchy' in params:
            query_params['searchFullHierarchy'] = params['search_full_hierarchy']
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']
        if 'show_excluded' in params:
            query_params['showExcluded'] = params['show_excluded']
        if 'show_hidden' in params:
            query_params['showHidden'] = params['show_hidden']
        if 'sort_order' in params:
            query_params['sortOrder'] = params['sort_order']
        if 'template_name' in params:
            query_params['templateName'] = params['template_name']
        if 'time_zone' in params:
            query_params['timeZone'] = params['time_zone']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse101',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def stream_set_get_interpolated_at_times_ad_hoc(self, time, web_id, **kwargs):
        """
        Returns interpolated values of the specified streams at the specified times.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_set_get_interpolated_at_times_ad_hoc(time, web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] time: The timestamp at which to retrieve a interpolated value. Multiple timestamps may be specified with multiple instances of the parameter. (required)
        :param list[str] web_id: The ID of a stream. Multiple streams may be specified with multiple instances of the parameter. (required)
        :param str filter_expression: An optional string containing a filter expression. Expression variables are relative to the data point. Use '.' to reference the containing attribute. If the attribute does not support filtering, the filter will be ignored. The default is no filtering.
        :param bool include_filtered_values: Specify 'true' to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a 'Filtered' enumeration value with bad status. Repeated consecutive failures are omitted.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param str sort_order: The order that the returned collection is sorted. The default is 'Ascending'.
        :param str time_zone: The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
        :return: InlineResponse101
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.stream_set_get_interpolated_at_times_ad_hoc_with_http_info(time, web_id, **kwargs)
        else:
            (data) = self.stream_set_get_interpolated_at_times_ad_hoc_with_http_info(time, web_id, **kwargs)
            return data

    def stream_set_get_interpolated_at_times_ad_hoc_with_http_info(self, time, web_id, **kwargs):
        """
        Returns interpolated values of the specified streams at the specified times.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_set_get_interpolated_at_times_ad_hoc_with_http_info(time, web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] time: The timestamp at which to retrieve a interpolated value. Multiple timestamps may be specified with multiple instances of the parameter. (required)
        :param list[str] web_id: The ID of a stream. Multiple streams may be specified with multiple instances of the parameter. (required)
        :param str filter_expression: An optional string containing a filter expression. Expression variables are relative to the data point. Use '.' to reference the containing attribute. If the attribute does not support filtering, the filter will be ignored. The default is no filtering.
        :param bool include_filtered_values: Specify 'true' to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a 'Filtered' enumeration value with bad status. Repeated consecutive failures are omitted.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param str sort_order: The order that the returned collection is sorted. The default is 'Ascending'.
        :param str time_zone: The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
        :return: InlineResponse101
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['time', 'web_id', 'filter_expression', 'include_filtered_values', 'selected_fields', 'sort_order', 'time_zone']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stream_set_get_interpolated_at_times_ad_hoc" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'time' is set
        if ('time' not in params) or (params['time'] is None):
            raise ValueError("Missing the required parameter `time` when calling `stream_set_get_interpolated_at_times_ad_hoc`")
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `stream_set_get_interpolated_at_times_ad_hoc`")


        collection_formats = {}

        resource_path = '/streamsets/interpolatedattimes'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'time' in params:
            query_params['time'] = params['time']
            collection_formats['time'] = 'multi'
        if 'web_id' in params:
            query_params['webId'] = params['web_id']
            collection_formats['webId'] = 'multi'
        if 'filter_expression' in params:
            query_params['filterExpression'] = params['filter_expression']
        if 'include_filtered_values' in params:
            query_params['includeFilteredValues'] = params['include_filtered_values']
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']
        if 'sort_order' in params:
            query_params['sortOrder'] = params['sort_order']
        if 'time_zone' in params:
            query_params['timeZone'] = params['time_zone']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse101',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def stream_set_get_plot(self, web_id, **kwargs):
        """
        Returns values of attributes for an element, event frame or attribute over the specified time range suitable for plotting over the number of intervals (typically represents pixels).
        For each interval, the data available is examined and significant values are returned. Each interval can produce up to 5 values if they are unique, the first value in the interval, the last value, the highest value, the lowest value and at most one exceptional point (bad status or digital state).
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_set_get_plot(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of an element, event frame or attribute, which is the base element or parent of all the stream attributes. (required)
        :param str category_name: Specify that included attributes must have this category. The default is no category filter.
        :param str end_time: An optional end time. The default is '*' for element attributes and points. For event frame attributes, the default is the event frame's end time, or '*' if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order.
        :param int intervals: The number of intervals to plot over. Typically, this would be the number of horizontal pixels in the trend. The default is '24'. For each interval, the data available is examined and significant values are returned. Each interval can produce up to 5 values if they are unique, the first value in the interval, the last value, the highest value, the lowest value and at most one exceptional point (bad status or digital state).
        :param str name_filter: The name query string used for filtering attributes. The default is no filter.
        :param bool search_full_hierarchy: Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is 'false'.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param bool show_excluded: Specified if the search should include attributes with the Excluded property set. The default is 'false'.
        :param bool show_hidden: Specified if the search should include attributes with the Hidden property set. The default is 'false'.
        :param str start_time: An optional start time. The default is '*-1d' for element attributes and points. For event frame attributes, the default is the event frame's start time, or '*-1d' if that is not set.
        :param str template_name: Specify that included attributes must be members of this template. The default is no template filter.
        :param str time_zone: The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
        :return: InlineResponse101
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.stream_set_get_plot_with_http_info(web_id, **kwargs)
        else:
            (data) = self.stream_set_get_plot_with_http_info(web_id, **kwargs)
            return data

    def stream_set_get_plot_with_http_info(self, web_id, **kwargs):
        """
        Returns values of attributes for an element, event frame or attribute over the specified time range suitable for plotting over the number of intervals (typically represents pixels).
        For each interval, the data available is examined and significant values are returned. Each interval can produce up to 5 values if they are unique, the first value in the interval, the last value, the highest value, the lowest value and at most one exceptional point (bad status or digital state).
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_set_get_plot_with_http_info(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of an element, event frame or attribute, which is the base element or parent of all the stream attributes. (required)
        :param str category_name: Specify that included attributes must have this category. The default is no category filter.
        :param str end_time: An optional end time. The default is '*' for element attributes and points. For event frame attributes, the default is the event frame's end time, or '*' if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order.
        :param int intervals: The number of intervals to plot over. Typically, this would be the number of horizontal pixels in the trend. The default is '24'. For each interval, the data available is examined and significant values are returned. Each interval can produce up to 5 values if they are unique, the first value in the interval, the last value, the highest value, the lowest value and at most one exceptional point (bad status or digital state).
        :param str name_filter: The name query string used for filtering attributes. The default is no filter.
        :param bool search_full_hierarchy: Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is 'false'.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param bool show_excluded: Specified if the search should include attributes with the Excluded property set. The default is 'false'.
        :param bool show_hidden: Specified if the search should include attributes with the Hidden property set. The default is 'false'.
        :param str start_time: An optional start time. The default is '*-1d' for element attributes and points. For event frame attributes, the default is the event frame's start time, or '*-1d' if that is not set.
        :param str template_name: Specify that included attributes must be members of this template. The default is no template filter.
        :param str time_zone: The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
        :return: InlineResponse101
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'category_name', 'end_time', 'intervals', 'name_filter', 'search_full_hierarchy', 'selected_fields', 'show_excluded', 'show_hidden', 'start_time', 'template_name', 'time_zone']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stream_set_get_plot" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `stream_set_get_plot`")


        collection_formats = {}

        resource_path = '/streamsets/{webId}/plot'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'category_name' in params:
            query_params['categoryName'] = params['category_name']
        if 'end_time' in params:
            query_params['endTime'] = params['end_time']
        if 'intervals' in params:
            query_params['intervals'] = params['intervals']
        if 'name_filter' in params:
            query_params['nameFilter'] = params['name_filter']
        if 'search_full_hierarchy' in params:
            query_params['searchFullHierarchy'] = params['search_full_hierarchy']
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']
        if 'show_excluded' in params:
            query_params['showExcluded'] = params['show_excluded']
        if 'show_hidden' in params:
            query_params['showHidden'] = params['show_hidden']
        if 'start_time' in params:
            query_params['startTime'] = params['start_time']
        if 'template_name' in params:
            query_params['templateName'] = params['template_name']
        if 'time_zone' in params:
            query_params['timeZone'] = params['time_zone']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse101',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def stream_set_get_plot_ad_hoc(self, web_id, **kwargs):
        """
        Returns values of attributes for the specified streams over the specified time range suitable for plotting over the number of intervals (typically represents pixels).
        For each interval, the data available is examined and significant values are returned. Each interval can produce up to 5 values if they are unique, the first value in the interval, the last value, the highest value, the lowest value and at most one exceptional point (bad status or digital state).
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_set_get_plot_ad_hoc(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] web_id: The ID of a stream.  Multiple streams may be specified with multiple instances of the parameter. (required)
        :param str end_time: An optional end time. The default is '*'. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order.
        :param int intervals: The number of intervals to plot over. Typically, this would be the number of horizontal pixels in the trend. The default is '24'. For each interval, the data available is examined and significant values are returned. Each interval can produce up to 5 values if they are unique, the first value in the interval, the last value, the highest value, the lowest value and at most one exceptional point (bad status or digital state).
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param str start_time: An optional start time. The default is '*-1d'.
        :param str time_zone: The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
        :return: InlineResponse101
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.stream_set_get_plot_ad_hoc_with_http_info(web_id, **kwargs)
        else:
            (data) = self.stream_set_get_plot_ad_hoc_with_http_info(web_id, **kwargs)
            return data

    def stream_set_get_plot_ad_hoc_with_http_info(self, web_id, **kwargs):
        """
        Returns values of attributes for the specified streams over the specified time range suitable for plotting over the number of intervals (typically represents pixels).
        For each interval, the data available is examined and significant values are returned. Each interval can produce up to 5 values if they are unique, the first value in the interval, the last value, the highest value, the lowest value and at most one exceptional point (bad status or digital state).
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_set_get_plot_ad_hoc_with_http_info(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] web_id: The ID of a stream.  Multiple streams may be specified with multiple instances of the parameter. (required)
        :param str end_time: An optional end time. The default is '*'. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order.
        :param int intervals: The number of intervals to plot over. Typically, this would be the number of horizontal pixels in the trend. The default is '24'. For each interval, the data available is examined and significant values are returned. Each interval can produce up to 5 values if they are unique, the first value in the interval, the last value, the highest value, the lowest value and at most one exceptional point (bad status or digital state).
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param str start_time: An optional start time. The default is '*-1d'.
        :param str time_zone: The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
        :return: InlineResponse101
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'end_time', 'intervals', 'selected_fields', 'start_time', 'time_zone']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stream_set_get_plot_ad_hoc" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `stream_set_get_plot_ad_hoc`")


        collection_formats = {}

        resource_path = '/streamsets/plot'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'web_id' in params:
            query_params['webId'] = params['web_id']
            collection_formats['webId'] = 'multi'
        if 'end_time' in params:
            query_params['endTime'] = params['end_time']
        if 'intervals' in params:
            query_params['intervals'] = params['intervals']
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']
        if 'start_time' in params:
            query_params['startTime'] = params['start_time']
        if 'time_zone' in params:
            query_params['timeZone'] = params['time_zone']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse101',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def stream_set_get_recorded(self, web_id, **kwargs):
        """
        Returns recorded values of the attributes for an element, event frame, or attribute.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_set_get_recorded(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of an element, event frame or attribute, which is the base element or parent of all the stream attributes. (required)
        :param str boundary_type: An optional value that determines how the times and values of the returned end points are determined. The default is 'Inside'.
        :param str category_name: Specify that included attributes must have this category. The default is no category filter.
        :param str end_time: An optional end time. The default is '*' for element attributes and points. For event frame attributes, the default is the event frame's end time, or '*' if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order.
        :param str filter_expression: An optional string containing a filter expression. Expression variables are relative to the data point. Use '.' to reference the containing attribute. The default is no filtering.
        :param bool include_filtered_values: Specify 'true' to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a 'Filtered' enumeration value with bad status. Repeated consecutive failures are omitted.
        :param int max_count: The maximum number of values to be returned. The default is 1000.
        :param str name_filter: The name query string used for filtering attributes. The default is no filter.
        :param bool search_full_hierarchy: Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is 'false'.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param bool show_excluded: Specified if the search should include attributes with the Excluded property set. The default is 'false'.
        :param bool show_hidden: Specified if the search should include attributes with the Hidden property set. The default is 'false'.
        :param str start_time: An optional start time. The default is '*-1d' for element attributes and points. For event frame attributes, the default is the event frame's start time, or '*-1d' if that is not set.
        :param str template_name: Specify that included attributes must be members of this template. The default is no template filter.
        :param str time_zone: The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
        :return: InlineResponse101
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.stream_set_get_recorded_with_http_info(web_id, **kwargs)
        else:
            (data) = self.stream_set_get_recorded_with_http_info(web_id, **kwargs)
            return data

    def stream_set_get_recorded_with_http_info(self, web_id, **kwargs):
        """
        Returns recorded values of the attributes for an element, event frame, or attribute.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_set_get_recorded_with_http_info(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of an element, event frame or attribute, which is the base element or parent of all the stream attributes. (required)
        :param str boundary_type: An optional value that determines how the times and values of the returned end points are determined. The default is 'Inside'.
        :param str category_name: Specify that included attributes must have this category. The default is no category filter.
        :param str end_time: An optional end time. The default is '*' for element attributes and points. For event frame attributes, the default is the event frame's end time, or '*' if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order.
        :param str filter_expression: An optional string containing a filter expression. Expression variables are relative to the data point. Use '.' to reference the containing attribute. The default is no filtering.
        :param bool include_filtered_values: Specify 'true' to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a 'Filtered' enumeration value with bad status. Repeated consecutive failures are omitted.
        :param int max_count: The maximum number of values to be returned. The default is 1000.
        :param str name_filter: The name query string used for filtering attributes. The default is no filter.
        :param bool search_full_hierarchy: Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is 'false'.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param bool show_excluded: Specified if the search should include attributes with the Excluded property set. The default is 'false'.
        :param bool show_hidden: Specified if the search should include attributes with the Hidden property set. The default is 'false'.
        :param str start_time: An optional start time. The default is '*-1d' for element attributes and points. For event frame attributes, the default is the event frame's start time, or '*-1d' if that is not set.
        :param str template_name: Specify that included attributes must be members of this template. The default is no template filter.
        :param str time_zone: The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
        :return: InlineResponse101
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'boundary_type', 'category_name', 'end_time', 'filter_expression', 'include_filtered_values', 'max_count', 'name_filter', 'search_full_hierarchy', 'selected_fields', 'show_excluded', 'show_hidden', 'start_time', 'template_name', 'time_zone']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stream_set_get_recorded" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `stream_set_get_recorded`")


        collection_formats = {}

        resource_path = '/streamsets/{webId}/recorded'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'boundary_type' in params:
            query_params['boundaryType'] = params['boundary_type']
        if 'category_name' in params:
            query_params['categoryName'] = params['category_name']
        if 'end_time' in params:
            query_params['endTime'] = params['end_time']
        if 'filter_expression' in params:
            query_params['filterExpression'] = params['filter_expression']
        if 'include_filtered_values' in params:
            query_params['includeFilteredValues'] = params['include_filtered_values']
        if 'max_count' in params:
            query_params['maxCount'] = params['max_count']
        if 'name_filter' in params:
            query_params['nameFilter'] = params['name_filter']
        if 'search_full_hierarchy' in params:
            query_params['searchFullHierarchy'] = params['search_full_hierarchy']
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']
        if 'show_excluded' in params:
            query_params['showExcluded'] = params['show_excluded']
        if 'show_hidden' in params:
            query_params['showHidden'] = params['show_hidden']
        if 'start_time' in params:
            query_params['startTime'] = params['start_time']
        if 'template_name' in params:
            query_params['templateName'] = params['template_name']
        if 'time_zone' in params:
            query_params['timeZone'] = params['time_zone']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse101',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def stream_set_get_recorded_ad_hoc(self, web_id, **kwargs):
        """
        Returns recorded values of the specified streams.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_set_get_recorded_ad_hoc(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] web_id: The ID of a stream.  Multiple streams may be specified with multiple instances of the parameter. (required)
        :param str boundary_type: An optional value that determines how the times and values of the returned end points are determined. The default is 'Inside'.
        :param str end_time: An optional end time. The default is '*'. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order.
        :param str filter_expression: An optional string containing a filter expression. Expression variables are relative to the data point. Use '.' to reference the containing attribute. The default is no filtering.
        :param bool include_filtered_values: Specify 'true' to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a 'Filtered' enumeration value with bad status. Repeated consecutive failures are omitted.
        :param int max_count: The maximum number of values to be returned. The default is 1000.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param str start_time: An optional start time. The default is '*-1d'.
        :param str time_zone: The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
        :return: InlineResponse101
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.stream_set_get_recorded_ad_hoc_with_http_info(web_id, **kwargs)
        else:
            (data) = self.stream_set_get_recorded_ad_hoc_with_http_info(web_id, **kwargs)
            return data

    def stream_set_get_recorded_ad_hoc_with_http_info(self, web_id, **kwargs):
        """
        Returns recorded values of the specified streams.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_set_get_recorded_ad_hoc_with_http_info(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] web_id: The ID of a stream.  Multiple streams may be specified with multiple instances of the parameter. (required)
        :param str boundary_type: An optional value that determines how the times and values of the returned end points are determined. The default is 'Inside'.
        :param str end_time: An optional end time. The default is '*'. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order.
        :param str filter_expression: An optional string containing a filter expression. Expression variables are relative to the data point. Use '.' to reference the containing attribute. The default is no filtering.
        :param bool include_filtered_values: Specify 'true' to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a 'Filtered' enumeration value with bad status. Repeated consecutive failures are omitted.
        :param int max_count: The maximum number of values to be returned. The default is 1000.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param str start_time: An optional start time. The default is '*-1d'.
        :param str time_zone: The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
        :return: InlineResponse101
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'boundary_type', 'end_time', 'filter_expression', 'include_filtered_values', 'max_count', 'selected_fields', 'start_time', 'time_zone']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stream_set_get_recorded_ad_hoc" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `stream_set_get_recorded_ad_hoc`")


        collection_formats = {}

        resource_path = '/streamsets/recorded'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'web_id' in params:
            query_params['webId'] = params['web_id']
            collection_formats['webId'] = 'multi'
        if 'boundary_type' in params:
            query_params['boundaryType'] = params['boundary_type']
        if 'end_time' in params:
            query_params['endTime'] = params['end_time']
        if 'filter_expression' in params:
            query_params['filterExpression'] = params['filter_expression']
        if 'include_filtered_values' in params:
            query_params['includeFilteredValues'] = params['include_filtered_values']
        if 'max_count' in params:
            query_params['maxCount'] = params['max_count']
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']
        if 'start_time' in params:
            query_params['startTime'] = params['start_time']
        if 'time_zone' in params:
            query_params['timeZone'] = params['time_zone']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse101',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def stream_set_get_recorded_at_time(self, web_id, time, **kwargs):
        """
        Returns recorded values of the attributes for an element, event frame, or attribute.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_set_get_recorded_at_time(web_id, time, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of an element, event frame or attribute, which is the base element or parent of all the stream attributes. (required)
        :param str time: The timestamp at which the values are desired. (required)
        :param str category_name: Specify that included attributes must have this category. The default is no category filter.
        :param str name_filter: The name query string used for filtering attributes. The default is no filter.
        :param str retrieval_mode: An optional value that determines the values to return when values don't exist at the exact time specified. The default is 'Auto'.
        :param bool search_full_hierarchy: Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is 'false'.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param bool show_excluded: Specified if the search should include attributes with the Excluded property set. The default is 'false'.
        :param bool show_hidden: Specified if the search should include attributes with the Hidden property set. The default is 'false'.
        :param str template_name: Specify that included attributes must be members of this template. The default is no template filter.
        :param str time_zone: The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
        :return: InlineResponse101
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.stream_set_get_recorded_at_time_with_http_info(web_id, time, **kwargs)
        else:
            (data) = self.stream_set_get_recorded_at_time_with_http_info(web_id, time, **kwargs)
            return data

    def stream_set_get_recorded_at_time_with_http_info(self, web_id, time, **kwargs):
        """
        Returns recorded values of the attributes for an element, event frame, or attribute.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_set_get_recorded_at_time_with_http_info(web_id, time, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of an element, event frame or attribute, which is the base element or parent of all the stream attributes. (required)
        :param str time: The timestamp at which the values are desired. (required)
        :param str category_name: Specify that included attributes must have this category. The default is no category filter.
        :param str name_filter: The name query string used for filtering attributes. The default is no filter.
        :param str retrieval_mode: An optional value that determines the values to return when values don't exist at the exact time specified. The default is 'Auto'.
        :param bool search_full_hierarchy: Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is 'false'.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param bool show_excluded: Specified if the search should include attributes with the Excluded property set. The default is 'false'.
        :param bool show_hidden: Specified if the search should include attributes with the Hidden property set. The default is 'false'.
        :param str template_name: Specify that included attributes must be members of this template. The default is no template filter.
        :param str time_zone: The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
        :return: InlineResponse101
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'time', 'category_name', 'name_filter', 'retrieval_mode', 'search_full_hierarchy', 'selected_fields', 'show_excluded', 'show_hidden', 'template_name', 'time_zone']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stream_set_get_recorded_at_time" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `stream_set_get_recorded_at_time`")
        # verify the required parameter 'time' is set
        if ('time' not in params) or (params['time'] is None):
            raise ValueError("Missing the required parameter `time` when calling `stream_set_get_recorded_at_time`")


        collection_formats = {}

        resource_path = '/streamsets/{webId}/recordedattime'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'time' in params:
            query_params['time'] = params['time']
        if 'category_name' in params:
            query_params['categoryName'] = params['category_name']
        if 'name_filter' in params:
            query_params['nameFilter'] = params['name_filter']
        if 'retrieval_mode' in params:
            query_params['retrievalMode'] = params['retrieval_mode']
        if 'search_full_hierarchy' in params:
            query_params['searchFullHierarchy'] = params['search_full_hierarchy']
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']
        if 'show_excluded' in params:
            query_params['showExcluded'] = params['show_excluded']
        if 'show_hidden' in params:
            query_params['showHidden'] = params['show_hidden']
        if 'template_name' in params:
            query_params['templateName'] = params['template_name']
        if 'time_zone' in params:
            query_params['timeZone'] = params['time_zone']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse101',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def stream_set_get_recorded_at_time_ad_hoc(self, time, web_id, **kwargs):
        """
        Returns recorded values based on the passed time and retrieval mode.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_set_get_recorded_at_time_ad_hoc(time, web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str time: The timestamp at which the values are desired. (required)
        :param list[str] web_id: The ID of a stream.  Multiple streams may be specified with multiple instances of the parameter. (required)
        :param str retrieval_mode: An optional value that determines the values to return when values don't exist at the exact time specified. The default is 'Auto'.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param str time_zone: The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
        :return: InlineResponse1011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.stream_set_get_recorded_at_time_ad_hoc_with_http_info(time, web_id, **kwargs)
        else:
            (data) = self.stream_set_get_recorded_at_time_ad_hoc_with_http_info(time, web_id, **kwargs)
            return data

    def stream_set_get_recorded_at_time_ad_hoc_with_http_info(self, time, web_id, **kwargs):
        """
        Returns recorded values based on the passed time and retrieval mode.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_set_get_recorded_at_time_ad_hoc_with_http_info(time, web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str time: The timestamp at which the values are desired. (required)
        :param list[str] web_id: The ID of a stream.  Multiple streams may be specified with multiple instances of the parameter. (required)
        :param str retrieval_mode: An optional value that determines the values to return when values don't exist at the exact time specified. The default is 'Auto'.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param str time_zone: The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
        :return: InlineResponse1011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['time', 'web_id', 'retrieval_mode', 'selected_fields', 'time_zone']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stream_set_get_recorded_at_time_ad_hoc" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'time' is set
        if ('time' not in params) or (params['time'] is None):
            raise ValueError("Missing the required parameter `time` when calling `stream_set_get_recorded_at_time_ad_hoc`")
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `stream_set_get_recorded_at_time_ad_hoc`")


        collection_formats = {}

        resource_path = '/streamsets/recordedattime'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'time' in params:
            query_params['time'] = params['time']
        if 'web_id' in params:
            query_params['webId'] = params['web_id']
            collection_formats['webId'] = 'multi'
        if 'retrieval_mode' in params:
            query_params['retrievalMode'] = params['retrieval_mode']
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']
        if 'time_zone' in params:
            query_params['timeZone'] = params['time_zone']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse1011',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def stream_set_get_recorded_at_times(self, web_id, time, **kwargs):
        """
        Returns recorded values of attributes for an element, event frame or attribute at the specified times.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_set_get_recorded_at_times(web_id, time, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of an element, event frame or attribute, which is the base element or parent of all the stream attributes. (required)
        :param list[str] time: The timestamp at which to retrieve a recorded value. Multiple timestamps may be specified with multiple instances of the parameter. (required)
        :param str category_name: Specify that included attributes must have this category. The default is no category filter.
        :param str name_filter: The name query string used for filtering attributes. The default is no filter.
        :param str retrieval_mode: An optional value that determines the values to return when values don't exist at the exact time specified. The default is 'Auto'.
        :param bool search_full_hierarchy: Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is 'false'.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param bool show_excluded: Specified if the search should include attributes with the Excluded property set. The default is 'false'.
        :param bool show_hidden: Specified if the search should include attributes with the Hidden property set. The default is 'false'.
        :param str sort_order: The order that the returned collection is sorted. The default is 'Ascending'.
        :param str template_name: Specify that included attributes must be members of this template. The default is no template filter.
        :param str time_zone: The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
        :return: InlineResponse101
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.stream_set_get_recorded_at_times_with_http_info(web_id, time, **kwargs)
        else:
            (data) = self.stream_set_get_recorded_at_times_with_http_info(web_id, time, **kwargs)
            return data

    def stream_set_get_recorded_at_times_with_http_info(self, web_id, time, **kwargs):
        """
        Returns recorded values of attributes for an element, event frame or attribute at the specified times.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_set_get_recorded_at_times_with_http_info(web_id, time, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of an element, event frame or attribute, which is the base element or parent of all the stream attributes. (required)
        :param list[str] time: The timestamp at which to retrieve a recorded value. Multiple timestamps may be specified with multiple instances of the parameter. (required)
        :param str category_name: Specify that included attributes must have this category. The default is no category filter.
        :param str name_filter: The name query string used for filtering attributes. The default is no filter.
        :param str retrieval_mode: An optional value that determines the values to return when values don't exist at the exact time specified. The default is 'Auto'.
        :param bool search_full_hierarchy: Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is 'false'.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param bool show_excluded: Specified if the search should include attributes with the Excluded property set. The default is 'false'.
        :param bool show_hidden: Specified if the search should include attributes with the Hidden property set. The default is 'false'.
        :param str sort_order: The order that the returned collection is sorted. The default is 'Ascending'.
        :param str template_name: Specify that included attributes must be members of this template. The default is no template filter.
        :param str time_zone: The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
        :return: InlineResponse101
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'time', 'category_name', 'name_filter', 'retrieval_mode', 'search_full_hierarchy', 'selected_fields', 'show_excluded', 'show_hidden', 'sort_order', 'template_name', 'time_zone']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stream_set_get_recorded_at_times" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `stream_set_get_recorded_at_times`")
        # verify the required parameter 'time' is set
        if ('time' not in params) or (params['time'] is None):
            raise ValueError("Missing the required parameter `time` when calling `stream_set_get_recorded_at_times`")


        collection_formats = {}

        resource_path = '/streamsets/{webId}/recordedattimes'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'time' in params:
            query_params['time'] = params['time']
            collection_formats['time'] = 'multi'
        if 'category_name' in params:
            query_params['categoryName'] = params['category_name']
        if 'name_filter' in params:
            query_params['nameFilter'] = params['name_filter']
        if 'retrieval_mode' in params:
            query_params['retrievalMode'] = params['retrieval_mode']
        if 'search_full_hierarchy' in params:
            query_params['searchFullHierarchy'] = params['search_full_hierarchy']
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']
        if 'show_excluded' in params:
            query_params['showExcluded'] = params['show_excluded']
        if 'show_hidden' in params:
            query_params['showHidden'] = params['show_hidden']
        if 'sort_order' in params:
            query_params['sortOrder'] = params['sort_order']
        if 'template_name' in params:
            query_params['templateName'] = params['template_name']
        if 'time_zone' in params:
            query_params['timeZone'] = params['time_zone']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse101',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def stream_set_get_recorded_at_times_ad_hoc(self, time, web_id, **kwargs):
        """
        Returns recorded values of the specified streams at the specified times.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_set_get_recorded_at_times_ad_hoc(time, web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] time: The timestamp at which to retrieve a recorded value. Multiple timestamps may be specified with multiple instances of the parameter. (required)
        :param list[str] web_id: The ID of a stream. Multiple streams may be specified with multiple instances of the parameter. (required)
        :param str retrieval_mode: An optional value that determines the values to return when values don't exist at the exact time specified. The default is 'Auto'.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param str sort_order: The order that the returned collection is sorted. The default is 'Ascending'.
        :param str time_zone: The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
        :return: InlineResponse101
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.stream_set_get_recorded_at_times_ad_hoc_with_http_info(time, web_id, **kwargs)
        else:
            (data) = self.stream_set_get_recorded_at_times_ad_hoc_with_http_info(time, web_id, **kwargs)
            return data

    def stream_set_get_recorded_at_times_ad_hoc_with_http_info(self, time, web_id, **kwargs):
        """
        Returns recorded values of the specified streams at the specified times.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_set_get_recorded_at_times_ad_hoc_with_http_info(time, web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] time: The timestamp at which to retrieve a recorded value. Multiple timestamps may be specified with multiple instances of the parameter. (required)
        :param list[str] web_id: The ID of a stream. Multiple streams may be specified with multiple instances of the parameter. (required)
        :param str retrieval_mode: An optional value that determines the values to return when values don't exist at the exact time specified. The default is 'Auto'.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param str sort_order: The order that the returned collection is sorted. The default is 'Ascending'.
        :param str time_zone: The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
        :return: InlineResponse101
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['time', 'web_id', 'retrieval_mode', 'selected_fields', 'sort_order', 'time_zone']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stream_set_get_recorded_at_times_ad_hoc" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'time' is set
        if ('time' not in params) or (params['time'] is None):
            raise ValueError("Missing the required parameter `time` when calling `stream_set_get_recorded_at_times_ad_hoc`")
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `stream_set_get_recorded_at_times_ad_hoc`")


        collection_formats = {}

        resource_path = '/streamsets/recordedattimes'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'time' in params:
            query_params['time'] = params['time']
            collection_formats['time'] = 'multi'
        if 'web_id' in params:
            query_params['webId'] = params['web_id']
            collection_formats['webId'] = 'multi'
        if 'retrieval_mode' in params:
            query_params['retrievalMode'] = params['retrieval_mode']
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']
        if 'sort_order' in params:
            query_params['sortOrder'] = params['sort_order']
        if 'time_zone' in params:
            query_params['timeZone'] = params['time_zone']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse101',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def stream_set_get_summaries(self, web_id, **kwargs):
        """
        Returns summary values of the attributes for an element, event frame or attribute.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_set_get_summaries(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of an element, event frame or attribute, which is the base element or parent of all the stream attributes. (required)
        :param str calculation_basis: Specifies the method of evaluating the data over the time range. The default is 'TimeWeighted'.
        :param str category_name: Specify that included attributes must have this category. The default is no category filter.
        :param str end_time: An optional end time. The default is '*' for element attributes and points. For event frame attributes, the default is the event frame's end time, or '*' if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order.
        :param str filter_expression: A string containing a filter expression. Expression variables are relative to the attribute. Use '.' to reference the containing attribute. The default is no filtering.
        :param str name_filter: The name query string used for filtering attributes. The default is no filter.
        :param str sample_interval: A time span specifies how often the filter expression is evaluated when computing the summary for an interval, if the sampleType is 'Interval'.
        :param str sample_type: A flag which specifies one or more summaries to compute for each interval over the time range. The default is 'ExpressionRecordedValues'.
        :param bool search_full_hierarchy: Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is 'false'.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param bool show_excluded: Specified if the search should include attributes with the Excluded property set. The default is 'false'.
        :param bool show_hidden: Specified if the search should include attributes with the Hidden property set. The default is 'false'.
        :param str start_time: An optional start time. The default is '*-1d' for element attributes and points. For event frame attributes, the default is the event frame's start time, or '*-1d' if that is not set.
        :param str summary_duration: The duration of each summary interval.
        :param list[str] summary_type: Specifies the kinds of summaries to produce over the range. The default is 'Total'. Multiple summary types may be specified by using multiple instances of summaryType.
        :param str template_name: Specify that included attributes must be members of this template. The default is no template filter.
        :param str time_type: Specifies how to calculate the timestamp for each interval. The default is 'Auto'.
        :param str time_zone: The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
        :return: InlineResponse20044
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.stream_set_get_summaries_with_http_info(web_id, **kwargs)
        else:
            (data) = self.stream_set_get_summaries_with_http_info(web_id, **kwargs)
            return data

    def stream_set_get_summaries_with_http_info(self, web_id, **kwargs):
        """
        Returns summary values of the attributes for an element, event frame or attribute.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_set_get_summaries_with_http_info(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of an element, event frame or attribute, which is the base element or parent of all the stream attributes. (required)
        :param str calculation_basis: Specifies the method of evaluating the data over the time range. The default is 'TimeWeighted'.
        :param str category_name: Specify that included attributes must have this category. The default is no category filter.
        :param str end_time: An optional end time. The default is '*' for element attributes and points. For event frame attributes, the default is the event frame's end time, or '*' if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order.
        :param str filter_expression: A string containing a filter expression. Expression variables are relative to the attribute. Use '.' to reference the containing attribute. The default is no filtering.
        :param str name_filter: The name query string used for filtering attributes. The default is no filter.
        :param str sample_interval: A time span specifies how often the filter expression is evaluated when computing the summary for an interval, if the sampleType is 'Interval'.
        :param str sample_type: A flag which specifies one or more summaries to compute for each interval over the time range. The default is 'ExpressionRecordedValues'.
        :param bool search_full_hierarchy: Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is 'false'.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param bool show_excluded: Specified if the search should include attributes with the Excluded property set. The default is 'false'.
        :param bool show_hidden: Specified if the search should include attributes with the Hidden property set. The default is 'false'.
        :param str start_time: An optional start time. The default is '*-1d' for element attributes and points. For event frame attributes, the default is the event frame's start time, or '*-1d' if that is not set.
        :param str summary_duration: The duration of each summary interval.
        :param list[str] summary_type: Specifies the kinds of summaries to produce over the range. The default is 'Total'. Multiple summary types may be specified by using multiple instances of summaryType.
        :param str template_name: Specify that included attributes must be members of this template. The default is no template filter.
        :param str time_type: Specifies how to calculate the timestamp for each interval. The default is 'Auto'.
        :param str time_zone: The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
        :return: InlineResponse20044
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'calculation_basis', 'category_name', 'end_time', 'filter_expression', 'name_filter', 'sample_interval', 'sample_type', 'search_full_hierarchy', 'selected_fields', 'show_excluded', 'show_hidden', 'start_time', 'summary_duration', 'summary_type', 'template_name', 'time_type', 'time_zone']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stream_set_get_summaries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `stream_set_get_summaries`")


        collection_formats = {}

        resource_path = '/streamsets/{webId}/summary'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'calculation_basis' in params:
            query_params['calculationBasis'] = params['calculation_basis']
        if 'category_name' in params:
            query_params['categoryName'] = params['category_name']
        if 'end_time' in params:
            query_params['endTime'] = params['end_time']
        if 'filter_expression' in params:
            query_params['filterExpression'] = params['filter_expression']
        if 'name_filter' in params:
            query_params['nameFilter'] = params['name_filter']
        if 'sample_interval' in params:
            query_params['sampleInterval'] = params['sample_interval']
        if 'sample_type' in params:
            query_params['sampleType'] = params['sample_type']
        if 'search_full_hierarchy' in params:
            query_params['searchFullHierarchy'] = params['search_full_hierarchy']
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']
        if 'show_excluded' in params:
            query_params['showExcluded'] = params['show_excluded']
        if 'show_hidden' in params:
            query_params['showHidden'] = params['show_hidden']
        if 'start_time' in params:
            query_params['startTime'] = params['start_time']
        if 'summary_duration' in params:
            query_params['summaryDuration'] = params['summary_duration']
        if 'summary_type' in params:
            query_params['summaryType'] = params['summary_type']
            collection_formats['summaryType'] = 'multi'
        if 'template_name' in params:
            query_params['templateName'] = params['template_name']
        if 'time_type' in params:
            query_params['timeType'] = params['time_type']
        if 'time_zone' in params:
            query_params['timeZone'] = params['time_zone']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20044',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def stream_set_get_summaries_ad_hoc(self, web_id, **kwargs):
        """
        Returns summary values of the specified streams.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_set_get_summaries_ad_hoc(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] web_id: The ID of a stream.  Multiple streams may be specified with multiple instances of the parameter. (required)
        :param str calculation_basis: Specifies the method of evaluating the data over the time range. The default is 'TimeWeighted'.
        :param str end_time: An optional end time. The default is '*'. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order.
        :param str filter_expression: A string containing a filter expression. Expression variables are relative to the attribute. Use '.' to reference the containing attribute. The default is no filtering.
        :param str sample_interval: A time span specifies how often the filter expression is evaluated when computing the summary for an interval, if the sampleType is 'Interval'.
        :param str sample_type: A flag which specifies one or more summaries to compute for each interval over the time range. The default is 'ExpressionRecordedValues'.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param str start_time: An optional start time. The default is '*-1d'.
        :param str summary_duration: The duration of each summary interval.
        :param list[str] summary_type: Specifies the kinds of summaries to produce over the range. The default is 'Total'. Multiple summary types may be specified by using multiple instances of summaryType.
        :param str time_type: Specifies how to calculate the timestamp for each interval. The default is 'Auto'.
        :param str time_zone: The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
        :return: InlineResponse20044
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.stream_set_get_summaries_ad_hoc_with_http_info(web_id, **kwargs)
        else:
            (data) = self.stream_set_get_summaries_ad_hoc_with_http_info(web_id, **kwargs)
            return data

    def stream_set_get_summaries_ad_hoc_with_http_info(self, web_id, **kwargs):
        """
        Returns summary values of the specified streams.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_set_get_summaries_ad_hoc_with_http_info(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] web_id: The ID of a stream.  Multiple streams may be specified with multiple instances of the parameter. (required)
        :param str calculation_basis: Specifies the method of evaluating the data over the time range. The default is 'TimeWeighted'.
        :param str end_time: An optional end time. The default is '*'. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order.
        :param str filter_expression: A string containing a filter expression. Expression variables are relative to the attribute. Use '.' to reference the containing attribute. The default is no filtering.
        :param str sample_interval: A time span specifies how often the filter expression is evaluated when computing the summary for an interval, if the sampleType is 'Interval'.
        :param str sample_type: A flag which specifies one or more summaries to compute for each interval over the time range. The default is 'ExpressionRecordedValues'.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param str start_time: An optional start time. The default is '*-1d'.
        :param str summary_duration: The duration of each summary interval.
        :param list[str] summary_type: Specifies the kinds of summaries to produce over the range. The default is 'Total'. Multiple summary types may be specified by using multiple instances of summaryType.
        :param str time_type: Specifies how to calculate the timestamp for each interval. The default is 'Auto'.
        :param str time_zone: The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
        :return: InlineResponse20044
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'calculation_basis', 'end_time', 'filter_expression', 'sample_interval', 'sample_type', 'selected_fields', 'start_time', 'summary_duration', 'summary_type', 'time_type', 'time_zone']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stream_set_get_summaries_ad_hoc" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `stream_set_get_summaries_ad_hoc`")


        collection_formats = {}

        resource_path = '/streamsets/summary'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'web_id' in params:
            query_params['webId'] = params['web_id']
            collection_formats['webId'] = 'multi'
        if 'calculation_basis' in params:
            query_params['calculationBasis'] = params['calculation_basis']
        if 'end_time' in params:
            query_params['endTime'] = params['end_time']
        if 'filter_expression' in params:
            query_params['filterExpression'] = params['filter_expression']
        if 'sample_interval' in params:
            query_params['sampleInterval'] = params['sample_interval']
        if 'sample_type' in params:
            query_params['sampleType'] = params['sample_type']
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']
        if 'start_time' in params:
            query_params['startTime'] = params['start_time']
        if 'summary_duration' in params:
            query_params['summaryDuration'] = params['summary_duration']
        if 'summary_type' in params:
            query_params['summaryType'] = params['summary_type']
            collection_formats['summaryType'] = 'multi'
        if 'time_type' in params:
            query_params['timeType'] = params['time_type']
        if 'time_zone' in params:
            query_params['timeZone'] = params['time_zone']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20044',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def stream_set_get_values(self, web_id, **kwargs):
        """
        Returns values of the attributes for an Element, Event Frame or Attribute at the specified time.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_set_get_values(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of an Element, Event Frame or Attribute, which is the base element or parent of all the stream attributes. (required)
        :param str category_name: Specify that included attributes must have this category. The default is no category filter.
        :param str name_filter: The name query string used for filtering attributes. The default is no filter.
        :param bool search_full_hierarchy: Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is 'false'.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param bool show_excluded: Specified if the search should include attributes with the Excluded property set. The default is 'false'.
        :param bool show_hidden: Specified if the search should include attributes with the Hidden property set. The default is 'false'.
        :param str template_name: Specify that included attributes must be members of this template. The default is no template filter.
        :param str time: An AF time string, which is used as the time context to get stream values if it is provided. By default, it is not specified, and the default time context of the AF object will be used.
        :param str time_zone: The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
        :return: InlineResponse1011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.stream_set_get_values_with_http_info(web_id, **kwargs)
        else:
            (data) = self.stream_set_get_values_with_http_info(web_id, **kwargs)
            return data

    def stream_set_get_values_with_http_info(self, web_id, **kwargs):
        """
        Returns values of the attributes for an Element, Event Frame or Attribute at the specified time.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_set_get_values_with_http_info(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of an Element, Event Frame or Attribute, which is the base element or parent of all the stream attributes. (required)
        :param str category_name: Specify that included attributes must have this category. The default is no category filter.
        :param str name_filter: The name query string used for filtering attributes. The default is no filter.
        :param bool search_full_hierarchy: Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is 'false'.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param bool show_excluded: Specified if the search should include attributes with the Excluded property set. The default is 'false'.
        :param bool show_hidden: Specified if the search should include attributes with the Hidden property set. The default is 'false'.
        :param str template_name: Specify that included attributes must be members of this template. The default is no template filter.
        :param str time: An AF time string, which is used as the time context to get stream values if it is provided. By default, it is not specified, and the default time context of the AF object will be used.
        :param str time_zone: The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
        :return: InlineResponse1011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'category_name', 'name_filter', 'search_full_hierarchy', 'selected_fields', 'show_excluded', 'show_hidden', 'template_name', 'time', 'time_zone']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stream_set_get_values" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `stream_set_get_values`")


        collection_formats = {}

        resource_path = '/streamsets/{webId}/value'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'category_name' in params:
            query_params['categoryName'] = params['category_name']
        if 'name_filter' in params:
            query_params['nameFilter'] = params['name_filter']
        if 'search_full_hierarchy' in params:
            query_params['searchFullHierarchy'] = params['search_full_hierarchy']
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']
        if 'show_excluded' in params:
            query_params['showExcluded'] = params['show_excluded']
        if 'show_hidden' in params:
            query_params['showHidden'] = params['show_hidden']
        if 'template_name' in params:
            query_params['templateName'] = params['template_name']
        if 'time' in params:
            query_params['time'] = params['time']
        if 'time_zone' in params:
            query_params['timeZone'] = params['time_zone']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse1011',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def stream_set_get_values_ad_hoc(self, web_id, **kwargs):
        """
        Returns values of the specified streams.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_set_get_values_ad_hoc(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] web_id: The ID of a stream.  Multiple streams may be specified with multiple instances of the parameter. (required)
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param str time: An AF time string, which is used as the time context to get stream values if it is provided. By default, it is not specified, and the default time context of the AF object will be used.
        :param str time_zone: The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
        :return: InlineResponse1011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.stream_set_get_values_ad_hoc_with_http_info(web_id, **kwargs)
        else:
            (data) = self.stream_set_get_values_ad_hoc_with_http_info(web_id, **kwargs)
            return data

    def stream_set_get_values_ad_hoc_with_http_info(self, web_id, **kwargs):
        """
        Returns values of the specified streams.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_set_get_values_ad_hoc_with_http_info(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] web_id: The ID of a stream.  Multiple streams may be specified with multiple instances of the parameter. (required)
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param str time: An AF time string, which is used as the time context to get stream values if it is provided. By default, it is not specified, and the default time context of the AF object will be used.
        :param str time_zone: The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used.
        :return: InlineResponse1011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'selected_fields', 'time', 'time_zone']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stream_set_get_values_ad_hoc" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `stream_set_get_values_ad_hoc`")


        collection_formats = {}

        resource_path = '/streamsets/value'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'web_id' in params:
            query_params['webId'] = params['web_id']
            collection_formats['webId'] = 'multi'
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']
        if 'time' in params:
            query_params['time'] = params['time']
        if 'time_zone' in params:
            query_params['timeZone'] = params['time_zone']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse1011',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def stream_set_update_value(self, web_id, values, **kwargs):
        """
        Updates a single value for the specified streams.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_set_update_value(web_id, values, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the parent element, event frame, or attribute. Attributes specified in the body must be descendants of the specified object. (required)
        :param list[InlineResponse1011Items] values: The values to add or update. (required)
        :param str buffer_option: The desired AFBufferOption. The default is 'BufferIfPossible'.
        :param str update_option: The desired AFUpdateOption. The default is 'Replace'.
        :return: InlineResponse204
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.stream_set_update_value_with_http_info(web_id, values, **kwargs)
        else:
            (data) = self.stream_set_update_value_with_http_info(web_id, values, **kwargs)
            return data

    def stream_set_update_value_with_http_info(self, web_id, values, **kwargs):
        """
        Updates a single value for the specified streams.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_set_update_value_with_http_info(web_id, values, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the parent element, event frame, or attribute. Attributes specified in the body must be descendants of the specified object. (required)
        :param list[InlineResponse1011Items] values: The values to add or update. (required)
        :param str buffer_option: The desired AFBufferOption. The default is 'BufferIfPossible'.
        :param str update_option: The desired AFUpdateOption. The default is 'Replace'.
        :return: InlineResponse204
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'values', 'buffer_option', 'update_option']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stream_set_update_value" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `stream_set_update_value`")
        # verify the required parameter 'values' is set
        if ('values' not in params) or (params['values'] is None):
            raise ValueError("Missing the required parameter `values` when calling `stream_set_update_value`")


        collection_formats = {}

        resource_path = '/streamsets/{webId}/value'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'buffer_option' in params:
            query_params['bufferOption'] = params['buffer_option']
        if 'update_option' in params:
            query_params['updateOption'] = params['update_option']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'values' in params:
            body_params = params['values']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse204',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def stream_set_update_value_ad_hoc(self, values, **kwargs):
        """
        Updates a single value for the specified streams.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_set_update_value_ad_hoc(values, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[InlineResponse101Items] values: The values to add or update. (required)
        :param str buffer_option: The desired AFBufferOption. The default is 'BufferIfPossible'.
        :param str update_option: The desired AFUpdateOption. The default is 'Replace'.
        :return: InlineResponse204
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.stream_set_update_value_ad_hoc_with_http_info(values, **kwargs)
        else:
            (data) = self.stream_set_update_value_ad_hoc_with_http_info(values, **kwargs)
            return data

    def stream_set_update_value_ad_hoc_with_http_info(self, values, **kwargs):
        """
        Updates a single value for the specified streams.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_set_update_value_ad_hoc_with_http_info(values, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[InlineResponse101Items] values: The values to add or update. (required)
        :param str buffer_option: The desired AFBufferOption. The default is 'BufferIfPossible'.
        :param str update_option: The desired AFUpdateOption. The default is 'Replace'.
        :return: InlineResponse204
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['values', 'buffer_option', 'update_option']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stream_set_update_value_ad_hoc" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'values' is set
        if ('values' not in params) or (params['values'] is None):
            raise ValueError("Missing the required parameter `values` when calling `stream_set_update_value_ad_hoc`")


        collection_formats = {}

        resource_path = '/streamsets/value'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'buffer_option' in params:
            query_params['bufferOption'] = params['buffer_option']
        if 'update_option' in params:
            query_params['updateOption'] = params['update_option']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'values' in params:
            body_params = params['values']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse204',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def stream_set_update_values(self, web_id, values, **kwargs):
        """
        Updates multiple values for the specified streams.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_set_update_values(web_id, values, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the parent element, event frame, or attribute. Attributes specified in the body must be descendants of the specified object. (required)
        :param list[InlineResponse101Items] values: The values to add or update. (required)
        :param str buffer_option: The desired AFBufferOption. The default is 'BufferIfPossible'.
        :param str update_option: The desired AFUpdateOption. The default is 'Replace'.
        :return: InlineResponse20043
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.stream_set_update_values_with_http_info(web_id, values, **kwargs)
        else:
            (data) = self.stream_set_update_values_with_http_info(web_id, values, **kwargs)
            return data

    def stream_set_update_values_with_http_info(self, web_id, values, **kwargs):
        """
        Updates multiple values for the specified streams.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_set_update_values_with_http_info(web_id, values, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the parent element, event frame, or attribute. Attributes specified in the body must be descendants of the specified object. (required)
        :param list[InlineResponse101Items] values: The values to add or update. (required)
        :param str buffer_option: The desired AFBufferOption. The default is 'BufferIfPossible'.
        :param str update_option: The desired AFUpdateOption. The default is 'Replace'.
        :return: InlineResponse20043
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'values', 'buffer_option', 'update_option']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stream_set_update_values" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `stream_set_update_values`")
        # verify the required parameter 'values' is set
        if ('values' not in params) or (params['values'] is None):
            raise ValueError("Missing the required parameter `values` when calling `stream_set_update_values`")


        collection_formats = {}

        resource_path = '/streamsets/{webId}/recorded'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'buffer_option' in params:
            query_params['bufferOption'] = params['buffer_option']
        if 'update_option' in params:
            query_params['updateOption'] = params['update_option']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'values' in params:
            body_params = params['values']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20043',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def stream_set_update_values_ad_hoc(self, values, **kwargs):
        """
        Updates multiple values for the specified streams.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_set_update_values_ad_hoc(values, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[InlineResponse101Items] values: The values to add or update. (required)
        :param str buffer_option: The desired AFBufferOption. The default is 'BufferIfPossible'.
        :param str update_option: The desired AFUpdateOption. The default is 'Replace'.
        :return: InlineResponse20043
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.stream_set_update_values_ad_hoc_with_http_info(values, **kwargs)
        else:
            (data) = self.stream_set_update_values_ad_hoc_with_http_info(values, **kwargs)
            return data

    def stream_set_update_values_ad_hoc_with_http_info(self, values, **kwargs):
        """
        Updates multiple values for the specified streams.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_set_update_values_ad_hoc_with_http_info(values, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[InlineResponse101Items] values: The values to add or update. (required)
        :param str buffer_option: The desired AFBufferOption. The default is 'BufferIfPossible'.
        :param str update_option: The desired AFUpdateOption. The default is 'Replace'.
        :return: InlineResponse20043
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['values', 'buffer_option', 'update_option']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stream_set_update_values_ad_hoc" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'values' is set
        if ('values' not in params) or (params['values'] is None):
            raise ValueError("Missing the required parameter `values` when calling `stream_set_update_values_ad_hoc`")


        collection_formats = {}

        resource_path = '/streamsets/recorded'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'buffer_option' in params:
            query_params['bufferOption'] = params['buffer_option']
        if 'update_option' in params:
            query_params['updateOption'] = params['update_option']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'values' in params:
            body_params = params['values']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20043',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
