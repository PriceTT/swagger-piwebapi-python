# coding: utf-8

"""
    PI Web API 2017 Swagger Spec

    Swagger Spec file that describes PI Web API

    OpenAPI spec version: 1.9.0.266
    Contact: techsupport@osisoft.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class AssetServerApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def asset_server_create_asset_database(self, web_id, database, **kwargs):
        """
        Create an asset database.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_server_create_asset_database(web_id, database, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the asset server on which to create the database. (required)
        :param Database1 database: The new database definition. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_server_create_asset_database_with_http_info(web_id, database, **kwargs)
        else:
            (data) = self.asset_server_create_asset_database_with_http_info(web_id, database, **kwargs)
            return data

    def asset_server_create_asset_database_with_http_info(self, web_id, database, **kwargs):
        """
        Create an asset database.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_server_create_asset_database_with_http_info(web_id, database, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the asset server on which to create the database. (required)
        :param Database1 database: The new database definition. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'database']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_server_create_asset_database" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_server_create_asset_database`")
        # verify the required parameter 'database' is set
        if ('database' not in params) or (params['database'] is None):
            raise ValueError("Missing the required parameter `database` when calling `asset_server_create_asset_database`")


        collection_formats = {}

        resource_path = '/assetservers/{webId}/assetdatabases'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'database' in params:
            body_params = params['database']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_server_create_security_entry(self, web_id, security_entry, **kwargs):
        """
        Create a security entry owned by the asset server.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_server_create_security_entry(web_id, security_entry, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the asset server where the security entry will be created. (required)
        :param SecurityEntry8 security_entry: The new security entry definition. The full list of allow and deny rights must be supplied. (required)
        :param bool apply_to_children: If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
        :param str security_item: The security item of the desired security entries to be created. If the parameter is not specified, security entries of the 'Default' security item will be created.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_server_create_security_entry_with_http_info(web_id, security_entry, **kwargs)
        else:
            (data) = self.asset_server_create_security_entry_with_http_info(web_id, security_entry, **kwargs)
            return data

    def asset_server_create_security_entry_with_http_info(self, web_id, security_entry, **kwargs):
        """
        Create a security entry owned by the asset server.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_server_create_security_entry_with_http_info(web_id, security_entry, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the asset server where the security entry will be created. (required)
        :param SecurityEntry8 security_entry: The new security entry definition. The full list of allow and deny rights must be supplied. (required)
        :param bool apply_to_children: If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
        :param str security_item: The security item of the desired security entries to be created. If the parameter is not specified, security entries of the 'Default' security item will be created.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'security_entry', 'apply_to_children', 'security_item']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_server_create_security_entry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_server_create_security_entry`")
        # verify the required parameter 'security_entry' is set
        if ('security_entry' not in params) or (params['security_entry'] is None):
            raise ValueError("Missing the required parameter `security_entry` when calling `asset_server_create_security_entry`")


        collection_formats = {}

        resource_path = '/assetservers/{webId}/securityentries'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'apply_to_children' in params:
            query_params['applyToChildren'] = params['apply_to_children']
        if 'security_item' in params:
            query_params['securityItem'] = params['security_item']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'security_entry' in params:
            body_params = params['security_entry']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_server_create_security_identity(self, web_id, security_identity, **kwargs):
        """
        Create a security identity.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_server_create_security_identity(web_id, security_identity, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the asset server on which to create the security identity. (required)
        :param SecurityIdentity security_identity: The new security identity definition. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_server_create_security_identity_with_http_info(web_id, security_identity, **kwargs)
        else:
            (data) = self.asset_server_create_security_identity_with_http_info(web_id, security_identity, **kwargs)
            return data

    def asset_server_create_security_identity_with_http_info(self, web_id, security_identity, **kwargs):
        """
        Create a security identity.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_server_create_security_identity_with_http_info(web_id, security_identity, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the asset server on which to create the security identity. (required)
        :param SecurityIdentity security_identity: The new security identity definition. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'security_identity']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_server_create_security_identity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_server_create_security_identity`")
        # verify the required parameter 'security_identity' is set
        if ('security_identity' not in params) or (params['security_identity'] is None):
            raise ValueError("Missing the required parameter `security_identity` when calling `asset_server_create_security_identity`")


        collection_formats = {}

        resource_path = '/assetservers/{webId}/securityidentities'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'security_identity' in params:
            body_params = params['security_identity']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_server_create_security_mapping(self, web_id, security_mapping, **kwargs):
        """
        Create a security mapping.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_server_create_security_mapping(web_id, security_mapping, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the asset server on which to create the security mapping. (required)
        :param SecurityMapping security_mapping: The new security mapping definition. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_server_create_security_mapping_with_http_info(web_id, security_mapping, **kwargs)
        else:
            (data) = self.asset_server_create_security_mapping_with_http_info(web_id, security_mapping, **kwargs)
            return data

    def asset_server_create_security_mapping_with_http_info(self, web_id, security_mapping, **kwargs):
        """
        Create a security mapping.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_server_create_security_mapping_with_http_info(web_id, security_mapping, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the asset server on which to create the security mapping. (required)
        :param SecurityMapping security_mapping: The new security mapping definition. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'security_mapping']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_server_create_security_mapping" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_server_create_security_mapping`")
        # verify the required parameter 'security_mapping' is set
        if ('security_mapping' not in params) or (params['security_mapping'] is None):
            raise ValueError("Missing the required parameter `security_mapping` when calling `asset_server_create_security_mapping`")


        collection_formats = {}

        resource_path = '/assetservers/{webId}/securitymappings'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'security_mapping' in params:
            body_params = params['security_mapping']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_server_create_unit_class(self, web_id, unit_class, **kwargs):
        """
        Create a unit class in the specified Asset Server.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_server_create_unit_class(web_id, unit_class, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the server. (required)
        :param UnitClass unit_class: The new unit class definition. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_server_create_unit_class_with_http_info(web_id, unit_class, **kwargs)
        else:
            (data) = self.asset_server_create_unit_class_with_http_info(web_id, unit_class, **kwargs)
            return data

    def asset_server_create_unit_class_with_http_info(self, web_id, unit_class, **kwargs):
        """
        Create a unit class in the specified Asset Server.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_server_create_unit_class_with_http_info(web_id, unit_class, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the server. (required)
        :param UnitClass unit_class: The new unit class definition. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'unit_class']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_server_create_unit_class" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_server_create_unit_class`")
        # verify the required parameter 'unit_class' is set
        if ('unit_class' not in params) or (params['unit_class'] is None):
            raise ValueError("Missing the required parameter `unit_class` when calling `asset_server_create_unit_class`")


        collection_formats = {}

        resource_path = '/assetservers/{webId}/unitclasses'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unit_class' in params:
            body_params = params['unit_class']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_server_delete_security_entry(self, name, web_id, **kwargs):
        """
        Delete a security entry owned by the asset server.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_server_delete_security_entry(name, web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
        :param str web_id: The ID of the asset server where the security entry will be deleted. (required)
        :param bool apply_to_children: If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
        :param str security_item: The security item of the desired security entries to be deleted. If the parameter is not specified, security entries of the 'Default' security item will be deleted.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_server_delete_security_entry_with_http_info(name, web_id, **kwargs)
        else:
            (data) = self.asset_server_delete_security_entry_with_http_info(name, web_id, **kwargs)
            return data

    def asset_server_delete_security_entry_with_http_info(self, name, web_id, **kwargs):
        """
        Delete a security entry owned by the asset server.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_server_delete_security_entry_with_http_info(name, web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
        :param str web_id: The ID of the asset server where the security entry will be deleted. (required)
        :param bool apply_to_children: If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
        :param str security_item: The security item of the desired security entries to be deleted. If the parameter is not specified, security entries of the 'Default' security item will be deleted.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'web_id', 'apply_to_children', 'security_item']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_server_delete_security_entry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `asset_server_delete_security_entry`")
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_server_delete_security_entry`")


        collection_formats = {}

        resource_path = '/assetservers/{webId}/securityentries/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'apply_to_children' in params:
            query_params['applyToChildren'] = params['apply_to_children']
        if 'security_item' in params:
            query_params['securityItem'] = params['security_item']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_server_get(self, web_id, **kwargs):
        """
        Retrieve an Asset Server.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_server_get(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the server. (required)
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse20021Items
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_server_get_with_http_info(web_id, **kwargs)
        else:
            (data) = self.asset_server_get_with_http_info(web_id, **kwargs)
            return data

    def asset_server_get_with_http_info(self, web_id, **kwargs):
        """
        Retrieve an Asset Server.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_server_get_with_http_info(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the server. (required)
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse20021Items
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'selected_fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_server_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_server_get`")


        collection_formats = {}

        resource_path = '/assetservers/{webId}'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20021Items',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_server_get_analysis_rule_plug_ins(self, web_id, **kwargs):
        """
        Retrieve a list of all Analysis Rule Plug-in's.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_server_get_analysis_rule_plug_ins(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the asset server, where the Analysis Rule Plug-in's are installed. (required)
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse20022
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_server_get_analysis_rule_plug_ins_with_http_info(web_id, **kwargs)
        else:
            (data) = self.asset_server_get_analysis_rule_plug_ins_with_http_info(web_id, **kwargs)
            return data

    def asset_server_get_analysis_rule_plug_ins_with_http_info(self, web_id, **kwargs):
        """
        Retrieve a list of all Analysis Rule Plug-in's.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_server_get_analysis_rule_plug_ins_with_http_info(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the asset server, where the Analysis Rule Plug-in's are installed. (required)
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse20022
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'selected_fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_server_get_analysis_rule_plug_ins" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_server_get_analysis_rule_plug_ins`")


        collection_formats = {}

        resource_path = '/assetservers/{webId}/analysisruleplugins'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20022',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_server_get_by_name(self, name, **kwargs):
        """
        Retrieve an Asset Server by name.
        This method returns an asset server based on the name associated with it. Users should primarily search with the WebID when available.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_server_get_by_name(name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The name of the server. (required)
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse20021Items
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_server_get_by_name_with_http_info(name, **kwargs)
        else:
            (data) = self.asset_server_get_by_name_with_http_info(name, **kwargs)
            return data

    def asset_server_get_by_name_with_http_info(self, name, **kwargs):
        """
        Retrieve an Asset Server by name.
        This method returns an asset server based on the name associated with it. Users should primarily search with the WebID when available.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_server_get_by_name_with_http_info(name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The name of the server. (required)
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse20021Items
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'selected_fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_server_get_by_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `asset_server_get_by_name`")


        collection_formats = {}

        resource_path = '/assetservers#name'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'name' in params:
            query_params['name'] = params['name']
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20021Items',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_server_get_by_path(self, path, **kwargs):
        """
        Retrieve an Asset Server by path.
        This method returns an asset server based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_server_get_by_path(path, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str path: The path to the server. (required)
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse20021Items
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_server_get_by_path_with_http_info(path, **kwargs)
        else:
            (data) = self.asset_server_get_by_path_with_http_info(path, **kwargs)
            return data

    def asset_server_get_by_path_with_http_info(self, path, **kwargs):
        """
        Retrieve an Asset Server by path.
        This method returns an asset server based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_server_get_by_path_with_http_info(path, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str path: The path to the server. (required)
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse20021Items
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['path', 'selected_fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_server_get_by_path" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'path' is set
        if ('path' not in params) or (params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `asset_server_get_by_path`")


        collection_formats = {}

        resource_path = '/assetservers#path'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'path' in params:
            query_params['path'] = params['path']
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20021Items',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_server_get_databases(self, web_id, **kwargs):
        """
        Retrieve a list of all Asset Databases on the specified Asset Server.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_server_get_databases(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the server. (required)
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse20023
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_server_get_databases_with_http_info(web_id, **kwargs)
        else:
            (data) = self.asset_server_get_databases_with_http_info(web_id, **kwargs)
            return data

    def asset_server_get_databases_with_http_info(self, web_id, **kwargs):
        """
        Retrieve a list of all Asset Databases on the specified Asset Server.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_server_get_databases_with_http_info(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the server. (required)
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse20023
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'selected_fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_server_get_databases" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_server_get_databases`")


        collection_formats = {}

        resource_path = '/assetservers/{webId}/assetdatabases'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20023',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_server_get_security(self, web_id, security_item, user_identity, **kwargs):
        """
        Get the security information of the specified security item associated with the asset server for a specified user.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_server_get_security(web_id, security_item, user_identity, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the asset server for the security to be checked. (required)
        :param list[str] security_item: The security item of the desired security information to be returned. Multiple security items may be specified with multiple instances of the parameter. If the parameter is not specified, only 'Default' security item of the security information will be returned. (required)
        :param list[str] user_identity: The user identity for the security information to be checked. Multiple security identities may be specified with multiple instances of the parameter. If the parameter is not specified, only the current user's security rights will be returned. (required)
        :param bool force_refresh: Indicates if the security cache should be refreshed before getting security information. The default is 'false'.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_server_get_security_with_http_info(web_id, security_item, user_identity, **kwargs)
        else:
            (data) = self.asset_server_get_security_with_http_info(web_id, security_item, user_identity, **kwargs)
            return data

    def asset_server_get_security_with_http_info(self, web_id, security_item, user_identity, **kwargs):
        """
        Get the security information of the specified security item associated with the asset server for a specified user.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_server_get_security_with_http_info(web_id, security_item, user_identity, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the asset server for the security to be checked. (required)
        :param list[str] security_item: The security item of the desired security information to be returned. Multiple security items may be specified with multiple instances of the parameter. If the parameter is not specified, only 'Default' security item of the security information will be returned. (required)
        :param list[str] user_identity: The user identity for the security information to be checked. Multiple security identities may be specified with multiple instances of the parameter. If the parameter is not specified, only the current user's security rights will be returned. (required)
        :param bool force_refresh: Indicates if the security cache should be refreshed before getting security information. The default is 'false'.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'security_item', 'user_identity', 'force_refresh', 'selected_fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_server_get_security" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_server_get_security`")
        # verify the required parameter 'security_item' is set
        if ('security_item' not in params) or (params['security_item'] is None):
            raise ValueError("Missing the required parameter `security_item` when calling `asset_server_get_security`")
        # verify the required parameter 'user_identity' is set
        if ('user_identity' not in params) or (params['user_identity'] is None):
            raise ValueError("Missing the required parameter `user_identity` when calling `asset_server_get_security`")


        collection_formats = {}

        resource_path = '/assetservers/{webId}/security'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'security_item' in params:
            query_params['securityItem'] = params['security_item']
            collection_formats['securityItem'] = 'multi'
        if 'user_identity' in params:
            query_params['userIdentity'] = params['user_identity']
            collection_formats['userIdentity'] = 'multi'
        if 'force_refresh' in params:
            query_params['forceRefresh'] = params['force_refresh']
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2003',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_server_get_security_entries(self, web_id, **kwargs):
        """
        Retrieve the security entries of the specified security item associated with the asset server based on the specified criteria. By default, all security entries for this asset server are returned.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_server_get_security_entries(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the asset server. (required)
        :param str name_filter: The name query string used for filtering security entries. The default is no filter.
        :param str security_item: The security item of the desired security entries information to be returned. If the parameter is not specified, security entries of the 'Default' security item will be returned.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_server_get_security_entries_with_http_info(web_id, **kwargs)
        else:
            (data) = self.asset_server_get_security_entries_with_http_info(web_id, **kwargs)
            return data

    def asset_server_get_security_entries_with_http_info(self, web_id, **kwargs):
        """
        Retrieve the security entries of the specified security item associated with the asset server based on the specified criteria. By default, all security entries for this asset server are returned.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_server_get_security_entries_with_http_info(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the asset server. (required)
        :param str name_filter: The name query string used for filtering security entries. The default is no filter.
        :param str security_item: The security item of the desired security entries information to be returned. If the parameter is not specified, security entries of the 'Default' security item will be returned.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'name_filter', 'security_item', 'selected_fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_server_get_security_entries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_server_get_security_entries`")


        collection_formats = {}

        resource_path = '/assetservers/{webId}/securityentries'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'name_filter' in params:
            query_params['nameFilter'] = params['name_filter']
        if 'security_item' in params:
            query_params['securityItem'] = params['security_item']
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2004',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_server_get_security_entry_by_name(self, name, web_id, **kwargs):
        """
        Retrieve the security entry of the specified security item associated with the asset server with the specified name.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_server_get_security_entry_by_name(name, web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
        :param str web_id: The ID of the asset server. (required)
        :param str security_item: The security item of the desired security entries information to be returned. If the parameter is not specified, security entries of the 'Default' security item will be returned.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse2004Items
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_server_get_security_entry_by_name_with_http_info(name, web_id, **kwargs)
        else:
            (data) = self.asset_server_get_security_entry_by_name_with_http_info(name, web_id, **kwargs)
            return data

    def asset_server_get_security_entry_by_name_with_http_info(self, name, web_id, **kwargs):
        """
        Retrieve the security entry of the specified security item associated with the asset server with the specified name.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_server_get_security_entry_by_name_with_http_info(name, web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
        :param str web_id: The ID of the asset server. (required)
        :param str security_item: The security item of the desired security entries information to be returned. If the parameter is not specified, security entries of the 'Default' security item will be returned.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse2004Items
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'web_id', 'security_item', 'selected_fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_server_get_security_entry_by_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `asset_server_get_security_entry_by_name`")
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_server_get_security_entry_by_name`")


        collection_formats = {}

        resource_path = '/assetservers/{webId}/securityentries/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'security_item' in params:
            query_params['securityItem'] = params['security_item']
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2004Items',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_server_get_security_identities(self, web_id, **kwargs):
        """
        Retrieve security identities based on the specified criteria. By default, all security identities in the specified Asset Server are returned.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_server_get_security_identities(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the asset server to search. (required)
        :param str field: Specifies which of the object's properties are searched. The default is 'Name'.
        :param int max_count: The maximum number of objects to be returned. The default is 1000.
        :param str query: The query string used for finding objects. The default is no query string.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param str sort_field: The field or property of the object used to sort the returned collection. The default is 'Name'.
        :param str sort_order: The order that the returned collection is sorted. The default is 'Ascending'.
        :return: InlineResponse20024
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_server_get_security_identities_with_http_info(web_id, **kwargs)
        else:
            (data) = self.asset_server_get_security_identities_with_http_info(web_id, **kwargs)
            return data

    def asset_server_get_security_identities_with_http_info(self, web_id, **kwargs):
        """
        Retrieve security identities based on the specified criteria. By default, all security identities in the specified Asset Server are returned.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_server_get_security_identities_with_http_info(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the asset server to search. (required)
        :param str field: Specifies which of the object's properties are searched. The default is 'Name'.
        :param int max_count: The maximum number of objects to be returned. The default is 1000.
        :param str query: The query string used for finding objects. The default is no query string.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param str sort_field: The field or property of the object used to sort the returned collection. The default is 'Name'.
        :param str sort_order: The order that the returned collection is sorted. The default is 'Ascending'.
        :return: InlineResponse20024
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'field', 'max_count', 'query', 'selected_fields', 'sort_field', 'sort_order']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_server_get_security_identities" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_server_get_security_identities`")


        collection_formats = {}

        resource_path = '/assetservers/{webId}/securityidentities'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'field' in params:
            query_params['field'] = params['field']
        if 'max_count' in params:
            query_params['maxCount'] = params['max_count']
        if 'query' in params:
            query_params['query'] = params['query']
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']
        if 'sort_field' in params:
            query_params['sortField'] = params['sort_field']
        if 'sort_order' in params:
            query_params['sortOrder'] = params['sort_order']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20024',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_server_get_security_identities_for_user(self, web_id, user_identity, **kwargs):
        """
        Retrieve security identities for a specific user.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_server_get_security_identities_for_user(web_id, user_identity, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the server. (required)
        :param str user_identity: The user identity to search for. (required)
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse20024
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_server_get_security_identities_for_user_with_http_info(web_id, user_identity, **kwargs)
        else:
            (data) = self.asset_server_get_security_identities_for_user_with_http_info(web_id, user_identity, **kwargs)
            return data

    def asset_server_get_security_identities_for_user_with_http_info(self, web_id, user_identity, **kwargs):
        """
        Retrieve security identities for a specific user.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_server_get_security_identities_for_user_with_http_info(web_id, user_identity, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the server. (required)
        :param str user_identity: The user identity to search for. (required)
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse20024
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'user_identity', 'selected_fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_server_get_security_identities_for_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_server_get_security_identities_for_user`")
        # verify the required parameter 'user_identity' is set
        if ('user_identity' not in params) or (params['user_identity'] is None):
            raise ValueError("Missing the required parameter `user_identity` when calling `asset_server_get_security_identities_for_user`")


        collection_formats = {}

        resource_path = '/assetservers/{webId}/securityidentities#userIdentity'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'user_identity' in params:
            query_params['userIdentity'] = params['user_identity']
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20024',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_server_get_security_mappings(self, web_id, **kwargs):
        """
        Retrieve security mappings based on the specified criteria. By default, all security mappings in the specified Asset Server are returned.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_server_get_security_mappings(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the asset server to search. (required)
        :param str field: Specifies which of the object's properties are searched. The default is 'Name'.
        :param int max_count: The maximum number of objects to be returned. The default is 1000.
        :param str query: The query string used for finding objects. The default is no query string.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param str sort_field: The field or property of the object used to sort the returned collection. The default is 'Name'.
        :param str sort_order: The order that the returned collection is sorted. The default is 'Ascending'.
        :return: InlineResponse20025
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_server_get_security_mappings_with_http_info(web_id, **kwargs)
        else:
            (data) = self.asset_server_get_security_mappings_with_http_info(web_id, **kwargs)
            return data

    def asset_server_get_security_mappings_with_http_info(self, web_id, **kwargs):
        """
        Retrieve security mappings based on the specified criteria. By default, all security mappings in the specified Asset Server are returned.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_server_get_security_mappings_with_http_info(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the asset server to search. (required)
        :param str field: Specifies which of the object's properties are searched. The default is 'Name'.
        :param int max_count: The maximum number of objects to be returned. The default is 1000.
        :param str query: The query string used for finding objects. The default is no query string.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param str sort_field: The field or property of the object used to sort the returned collection. The default is 'Name'.
        :param str sort_order: The order that the returned collection is sorted. The default is 'Ascending'.
        :return: InlineResponse20025
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'field', 'max_count', 'query', 'selected_fields', 'sort_field', 'sort_order']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_server_get_security_mappings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_server_get_security_mappings`")


        collection_formats = {}

        resource_path = '/assetservers/{webId}/securitymappings'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'field' in params:
            query_params['field'] = params['field']
        if 'max_count' in params:
            query_params['maxCount'] = params['max_count']
        if 'query' in params:
            query_params['query'] = params['query']
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']
        if 'sort_field' in params:
            query_params['sortField'] = params['sort_field']
        if 'sort_order' in params:
            query_params['sortOrder'] = params['sort_order']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20025',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_server_get_time_rule_plug_ins(self, web_id, **kwargs):
        """
        Retrieve a list of all Time Rule Plug-in's.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_server_get_time_rule_plug_ins(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the asset server, where the Time Rule Plug-in's are installed. (required)
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse20026
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_server_get_time_rule_plug_ins_with_http_info(web_id, **kwargs)
        else:
            (data) = self.asset_server_get_time_rule_plug_ins_with_http_info(web_id, **kwargs)
            return data

    def asset_server_get_time_rule_plug_ins_with_http_info(self, web_id, **kwargs):
        """
        Retrieve a list of all Time Rule Plug-in's.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_server_get_time_rule_plug_ins_with_http_info(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the asset server, where the Time Rule Plug-in's are installed. (required)
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse20026
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'selected_fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_server_get_time_rule_plug_ins" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_server_get_time_rule_plug_ins`")


        collection_formats = {}

        resource_path = '/assetservers/{webId}/timeruleplugins'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20026',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_server_get_unit_classes(self, web_id, **kwargs):
        """
        Retrieve a list of all unit classes on the specified Asset Server.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_server_get_unit_classes(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the server. (required)
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_server_get_unit_classes_with_http_info(web_id, **kwargs)
        else:
            (data) = self.asset_server_get_unit_classes_with_http_info(web_id, **kwargs)
            return data

    def asset_server_get_unit_classes_with_http_info(self, web_id, **kwargs):
        """
        Retrieve a list of all unit classes on the specified Asset Server.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_server_get_unit_classes_with_http_info(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the server. (required)
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'selected_fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_server_get_unit_classes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_server_get_unit_classes`")


        collection_formats = {}

        resource_path = '/assetservers/{webId}/unitclasses'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20027',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_server_list(self, **kwargs):
        """
        Retrieve a list of all Asset Servers known to this service.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_server_list(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse20021
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_server_list_with_http_info(**kwargs)
        else:
            (data) = self.asset_server_list_with_http_info(**kwargs)
            return data

    def asset_server_list_with_http_info(self, **kwargs):
        """
        Retrieve a list of all Asset Servers known to this service.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_server_list_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse20021
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['selected_fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_server_list" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/assetservers'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20021',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_server_update_security_entry(self, name, web_id, security_entry, **kwargs):
        """
        Update a security entry owned by the asset server.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_server_update_security_entry(name, web_id, security_entry, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The name of the security entry. (required)
        :param str web_id: The ID of the asset server where the security entry will be updated. (required)
        :param SecurityEntry9 security_entry: The new security entry definition. The full list of allow and deny rights must be supplied or they will be removed. (required)
        :param bool apply_to_children: If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
        :param str security_item: The security item of the desired security entries to be updated. If the parameter is not specified, security entries of the 'Default' security item will be updated.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_server_update_security_entry_with_http_info(name, web_id, security_entry, **kwargs)
        else:
            (data) = self.asset_server_update_security_entry_with_http_info(name, web_id, security_entry, **kwargs)
            return data

    def asset_server_update_security_entry_with_http_info(self, name, web_id, security_entry, **kwargs):
        """
        Update a security entry owned by the asset server.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_server_update_security_entry_with_http_info(name, web_id, security_entry, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The name of the security entry. (required)
        :param str web_id: The ID of the asset server where the security entry will be updated. (required)
        :param SecurityEntry9 security_entry: The new security entry definition. The full list of allow and deny rights must be supplied or they will be removed. (required)
        :param bool apply_to_children: If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
        :param str security_item: The security item of the desired security entries to be updated. If the parameter is not specified, security entries of the 'Default' security item will be updated.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'web_id', 'security_entry', 'apply_to_children', 'security_item']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_server_update_security_entry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `asset_server_update_security_entry`")
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_server_update_security_entry`")
        # verify the required parameter 'security_entry' is set
        if ('security_entry' not in params) or (params['security_entry'] is None):
            raise ValueError("Missing the required parameter `security_entry` when calling `asset_server_update_security_entry`")


        collection_formats = {}

        resource_path = '/assetservers/{webId}/securityentries/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'apply_to_children' in params:
            query_params['applyToChildren'] = params['apply_to_children']
        if 'security_item' in params:
            query_params['securityItem'] = params['security_item']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'security_entry' in params:
            body_params = params['security_entry']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
