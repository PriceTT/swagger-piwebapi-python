# coding: utf-8

"""
    PI Web API 2017 Swagger Spec

    Swagger Spec file that describes PI Web API

    OpenAPI spec version: 1.9.0.266
    Contact: techsupport@osisoft.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class AssetDatabaseApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def asset_database_add_referenced_element(self, web_id, referenced_element_web_id, **kwargs):
        """
        Add a reference to an existing element to the specified database.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_add_referenced_element(web_id, referenced_element_web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the database which the referenced element will be added to. (required)
        :param list[str] referenced_element_web_id: The ID of the referenced element. Multiple referenced elements may be specified with multiple instances of the parameter. (required)
        :param str reference_type: The name of the reference type between the parent and the referenced element. This must be a \"strong\" reference type. The default is \"parent-child\".
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_database_add_referenced_element_with_http_info(web_id, referenced_element_web_id, **kwargs)
        else:
            (data) = self.asset_database_add_referenced_element_with_http_info(web_id, referenced_element_web_id, **kwargs)
            return data

    def asset_database_add_referenced_element_with_http_info(self, web_id, referenced_element_web_id, **kwargs):
        """
        Add a reference to an existing element to the specified database.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_add_referenced_element_with_http_info(web_id, referenced_element_web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the database which the referenced element will be added to. (required)
        :param list[str] referenced_element_web_id: The ID of the referenced element. Multiple referenced elements may be specified with multiple instances of the parameter. (required)
        :param str reference_type: The name of the reference type between the parent and the referenced element. This must be a \"strong\" reference type. The default is \"parent-child\".
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'referenced_element_web_id', 'reference_type']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_database_add_referenced_element" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_database_add_referenced_element`")
        # verify the required parameter 'referenced_element_web_id' is set
        if ('referenced_element_web_id' not in params) or (params['referenced_element_web_id'] is None):
            raise ValueError("Missing the required parameter `referenced_element_web_id` when calling `asset_database_add_referenced_element`")


        collection_formats = {}

        resource_path = '/assetdatabases/{webId}/referencedelements'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'referenced_element_web_id' in params:
            query_params['referencedElementWebId'] = params['referenced_element_web_id']
            collection_formats['referencedElementWebId'] = 'multi'
        if 'reference_type' in params:
            query_params['referenceType'] = params['reference_type']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_database_create_analysis_category(self, web_id, analysis_category, **kwargs):
        """
        Create an analysis category at the Asset Database root.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_create_analysis_category(web_id, analysis_category, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the database in which to create the analysis category. (required)
        :param AnalysisCategory analysis_category: The new analysis category definition. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_database_create_analysis_category_with_http_info(web_id, analysis_category, **kwargs)
        else:
            (data) = self.asset_database_create_analysis_category_with_http_info(web_id, analysis_category, **kwargs)
            return data

    def asset_database_create_analysis_category_with_http_info(self, web_id, analysis_category, **kwargs):
        """
        Create an analysis category at the Asset Database root.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_create_analysis_category_with_http_info(web_id, analysis_category, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the database in which to create the analysis category. (required)
        :param AnalysisCategory analysis_category: The new analysis category definition. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'analysis_category']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_database_create_analysis_category" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_database_create_analysis_category`")
        # verify the required parameter 'analysis_category' is set
        if ('analysis_category' not in params) or (params['analysis_category'] is None):
            raise ValueError("Missing the required parameter `analysis_category` when calling `asset_database_create_analysis_category`")


        collection_formats = {}

        resource_path = '/assetdatabases/{webId}/analysiscategories'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'analysis_category' in params:
            body_params = params['analysis_category']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_database_create_analysis_template(self, web_id, template, **kwargs):
        """
        Create an analysis template at the Asset Database root.
        Analyses that are based on an analysis template will inherit characteristics defined in the template.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_create_analysis_template(web_id, template, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the database in which to create the analysis template. (required)
        :param Template1 template: The new analysis template definition. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_database_create_analysis_template_with_http_info(web_id, template, **kwargs)
        else:
            (data) = self.asset_database_create_analysis_template_with_http_info(web_id, template, **kwargs)
            return data

    def asset_database_create_analysis_template_with_http_info(self, web_id, template, **kwargs):
        """
        Create an analysis template at the Asset Database root.
        Analyses that are based on an analysis template will inherit characteristics defined in the template.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_create_analysis_template_with_http_info(web_id, template, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the database in which to create the analysis template. (required)
        :param Template1 template: The new analysis template definition. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'template']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_database_create_analysis_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_database_create_analysis_template`")
        # verify the required parameter 'template' is set
        if ('template' not in params) or (params['template'] is None):
            raise ValueError("Missing the required parameter `template` when calling `asset_database_create_analysis_template`")


        collection_formats = {}

        resource_path = '/assetdatabases/{webId}/analysistemplates'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'template' in params:
            body_params = params['template']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_database_create_attribute_category(self, web_id, attribute_category, **kwargs):
        """
        Create an attribute category at the Asset Database root.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_create_attribute_category(web_id, attribute_category, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the database in which to create the attribute category. (required)
        :param AttributeCategory attribute_category: The new attribute category definition. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_database_create_attribute_category_with_http_info(web_id, attribute_category, **kwargs)
        else:
            (data) = self.asset_database_create_attribute_category_with_http_info(web_id, attribute_category, **kwargs)
            return data

    def asset_database_create_attribute_category_with_http_info(self, web_id, attribute_category, **kwargs):
        """
        Create an attribute category at the Asset Database root.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_create_attribute_category_with_http_info(web_id, attribute_category, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the database in which to create the attribute category. (required)
        :param AttributeCategory attribute_category: The new attribute category definition. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'attribute_category']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_database_create_attribute_category" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_database_create_attribute_category`")
        # verify the required parameter 'attribute_category' is set
        if ('attribute_category' not in params) or (params['attribute_category'] is None):
            raise ValueError("Missing the required parameter `attribute_category` when calling `asset_database_create_attribute_category`")


        collection_formats = {}

        resource_path = '/assetdatabases/{webId}/attributecategories'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'attribute_category' in params:
            body_params = params['attribute_category']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_database_create_element(self, web_id, element, **kwargs):
        """
        Create a child element.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_create_element(web_id, element, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the asset database on which to create the element. (required)
        :param Element element: The new element definition. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_database_create_element_with_http_info(web_id, element, **kwargs)
        else:
            (data) = self.asset_database_create_element_with_http_info(web_id, element, **kwargs)
            return data

    def asset_database_create_element_with_http_info(self, web_id, element, **kwargs):
        """
        Create a child element.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_create_element_with_http_info(web_id, element, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the asset database on which to create the element. (required)
        :param Element element: The new element definition. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'element']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_database_create_element" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_database_create_element`")
        # verify the required parameter 'element' is set
        if ('element' not in params) or (params['element'] is None):
            raise ValueError("Missing the required parameter `element` when calling `asset_database_create_element`")


        collection_formats = {}

        resource_path = '/assetdatabases/{webId}/elements'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'element' in params:
            body_params = params['element']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_database_create_element_category(self, web_id, element_category, **kwargs):
        """
        Create an element category at the Asset Database root.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_create_element_category(web_id, element_category, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the database in which to create the element category. (required)
        :param ElementCategory element_category: The new element category definition. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_database_create_element_category_with_http_info(web_id, element_category, **kwargs)
        else:
            (data) = self.asset_database_create_element_category_with_http_info(web_id, element_category, **kwargs)
            return data

    def asset_database_create_element_category_with_http_info(self, web_id, element_category, **kwargs):
        """
        Create an element category at the Asset Database root.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_create_element_category_with_http_info(web_id, element_category, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the database in which to create the element category. (required)
        :param ElementCategory element_category: The new element category definition. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'element_category']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_database_create_element_category" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_database_create_element_category`")
        # verify the required parameter 'element_category' is set
        if ('element_category' not in params) or (params['element_category'] is None):
            raise ValueError("Missing the required parameter `element_category` when calling `asset_database_create_element_category`")


        collection_formats = {}

        resource_path = '/assetdatabases/{webId}/elementcategories'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'element_category' in params:
            body_params = params['element_category']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_database_create_element_template(self, web_id, template, **kwargs):
        """
        Create a template at the Asset Database root. Specify InstanceType of \"Element\" or \"EventFrame\" to create element or event frame template respectively. Only these two types of templates can be created.
        Elements and event frames that are based on an element template will inherit characteristics defined in the template.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_create_element_template(web_id, template, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the database in which to create the element template. (required)
        :param Template2 template: The new element template definition. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_database_create_element_template_with_http_info(web_id, template, **kwargs)
        else:
            (data) = self.asset_database_create_element_template_with_http_info(web_id, template, **kwargs)
            return data

    def asset_database_create_element_template_with_http_info(self, web_id, template, **kwargs):
        """
        Create a template at the Asset Database root. Specify InstanceType of \"Element\" or \"EventFrame\" to create element or event frame template respectively. Only these two types of templates can be created.
        Elements and event frames that are based on an element template will inherit characteristics defined in the template.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_create_element_template_with_http_info(web_id, template, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the database in which to create the element template. (required)
        :param Template2 template: The new element template definition. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'template']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_database_create_element_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_database_create_element_template`")
        # verify the required parameter 'template' is set
        if ('template' not in params) or (params['template'] is None):
            raise ValueError("Missing the required parameter `template` when calling `asset_database_create_element_template`")


        collection_formats = {}

        resource_path = '/assetdatabases/{webId}/elementtemplates'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'template' in params:
            body_params = params['template']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_database_create_enumeration_set(self, web_id, enumeration_set, **kwargs):
        """
        Create an enumeration set at the Asset Database.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_create_enumeration_set(web_id, enumeration_set, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the database in which to create the enumeration set. (required)
        :param EnumerationSet enumeration_set: The new enumeration set definition. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_database_create_enumeration_set_with_http_info(web_id, enumeration_set, **kwargs)
        else:
            (data) = self.asset_database_create_enumeration_set_with_http_info(web_id, enumeration_set, **kwargs)
            return data

    def asset_database_create_enumeration_set_with_http_info(self, web_id, enumeration_set, **kwargs):
        """
        Create an enumeration set at the Asset Database.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_create_enumeration_set_with_http_info(web_id, enumeration_set, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the database in which to create the enumeration set. (required)
        :param EnumerationSet enumeration_set: The new enumeration set definition. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'enumeration_set']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_database_create_enumeration_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_database_create_enumeration_set`")
        # verify the required parameter 'enumeration_set' is set
        if ('enumeration_set' not in params) or (params['enumeration_set'] is None):
            raise ValueError("Missing the required parameter `enumeration_set` when calling `asset_database_create_enumeration_set`")


        collection_formats = {}

        resource_path = '/assetdatabases/{webId}/enumerationsets'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'enumeration_set' in params:
            body_params = params['enumeration_set']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_database_create_event_frame(self, web_id, event_frame, **kwargs):
        """
        Create an event frame.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_create_event_frame(web_id, event_frame, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the database on which to create the event frame. (required)
        :param EventFrame event_frame: The new event frame definition. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_database_create_event_frame_with_http_info(web_id, event_frame, **kwargs)
        else:
            (data) = self.asset_database_create_event_frame_with_http_info(web_id, event_frame, **kwargs)
            return data

    def asset_database_create_event_frame_with_http_info(self, web_id, event_frame, **kwargs):
        """
        Create an event frame.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_create_event_frame_with_http_info(web_id, event_frame, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the database on which to create the event frame. (required)
        :param EventFrame event_frame: The new event frame definition. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'event_frame']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_database_create_event_frame" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_database_create_event_frame`")
        # verify the required parameter 'event_frame' is set
        if ('event_frame' not in params) or (params['event_frame'] is None):
            raise ValueError("Missing the required parameter `event_frame` when calling `asset_database_create_event_frame`")


        collection_formats = {}

        resource_path = '/assetdatabases/{webId}/eventframes'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'event_frame' in params:
            body_params = params['event_frame']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_database_create_security_entry(self, web_id, security_entry, **kwargs):
        """
        Create a security entry owned by the asset database.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_create_security_entry(web_id, security_entry, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the asset database where the security entry will be created. (required)
        :param SecurityEntry6 security_entry: The new security entry definition. The full list of allow and deny rights must be supplied. (required)
        :param bool apply_to_children: If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
        :param str security_item: The security item of the desired security entries to be created. If the parameter is not specified, security entries of the 'Default' security item will be created.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_database_create_security_entry_with_http_info(web_id, security_entry, **kwargs)
        else:
            (data) = self.asset_database_create_security_entry_with_http_info(web_id, security_entry, **kwargs)
            return data

    def asset_database_create_security_entry_with_http_info(self, web_id, security_entry, **kwargs):
        """
        Create a security entry owned by the asset database.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_create_security_entry_with_http_info(web_id, security_entry, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the asset database where the security entry will be created. (required)
        :param SecurityEntry6 security_entry: The new security entry definition. The full list of allow and deny rights must be supplied. (required)
        :param bool apply_to_children: If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
        :param str security_item: The security item of the desired security entries to be created. If the parameter is not specified, security entries of the 'Default' security item will be created.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'security_entry', 'apply_to_children', 'security_item']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_database_create_security_entry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_database_create_security_entry`")
        # verify the required parameter 'security_entry' is set
        if ('security_entry' not in params) or (params['security_entry'] is None):
            raise ValueError("Missing the required parameter `security_entry` when calling `asset_database_create_security_entry`")


        collection_formats = {}

        resource_path = '/assetdatabases/{webId}/securityentries'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'apply_to_children' in params:
            query_params['applyToChildren'] = params['apply_to_children']
        if 'security_item' in params:
            query_params['securityItem'] = params['security_item']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'security_entry' in params:
            body_params = params['security_entry']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_database_create_table(self, web_id, table, **kwargs):
        """
        Create a table on the Asset Database.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_create_table(web_id, table, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the database in which to create the table. (required)
        :param Table table: The new table definition. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_database_create_table_with_http_info(web_id, table, **kwargs)
        else:
            (data) = self.asset_database_create_table_with_http_info(web_id, table, **kwargs)
            return data

    def asset_database_create_table_with_http_info(self, web_id, table, **kwargs):
        """
        Create a table on the Asset Database.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_create_table_with_http_info(web_id, table, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the database in which to create the table. (required)
        :param Table table: The new table definition. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'table']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_database_create_table" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_database_create_table`")
        # verify the required parameter 'table' is set
        if ('table' not in params) or (params['table'] is None):
            raise ValueError("Missing the required parameter `table` when calling `asset_database_create_table`")


        collection_formats = {}

        resource_path = '/assetdatabases/{webId}/tables'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'table' in params:
            body_params = params['table']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_database_create_table_category(self, web_id, table_category, **kwargs):
        """
        Create a table category on the Asset Database.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_create_table_category(web_id, table_category, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the database in which to create the table category. (required)
        :param TableCategory table_category: The new table category definition. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_database_create_table_category_with_http_info(web_id, table_category, **kwargs)
        else:
            (data) = self.asset_database_create_table_category_with_http_info(web_id, table_category, **kwargs)
            return data

    def asset_database_create_table_category_with_http_info(self, web_id, table_category, **kwargs):
        """
        Create a table category on the Asset Database.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_create_table_category_with_http_info(web_id, table_category, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the database in which to create the table category. (required)
        :param TableCategory table_category: The new table category definition. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'table_category']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_database_create_table_category" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_database_create_table_category`")
        # verify the required parameter 'table_category' is set
        if ('table_category' not in params) or (params['table_category'] is None):
            raise ValueError("Missing the required parameter `table_category` when calling `asset_database_create_table_category`")


        collection_formats = {}

        resource_path = '/assetdatabases/{webId}/tablecategories'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'table_category' in params:
            body_params = params['table_category']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_database_delete(self, web_id, **kwargs):
        """
        Delete an asset database.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_delete(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the database. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_database_delete_with_http_info(web_id, **kwargs)
        else:
            (data) = self.asset_database_delete_with_http_info(web_id, **kwargs)
            return data

    def asset_database_delete_with_http_info(self, web_id, **kwargs):
        """
        Delete an asset database.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_delete_with_http_info(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the database. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_database_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_database_delete`")


        collection_formats = {}

        resource_path = '/assetdatabases/{webId}'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_database_delete_security_entry(self, name, web_id, **kwargs):
        """
        Delete a security entry owned by the asset database.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_delete_security_entry(name, web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
        :param str web_id: The ID of the asset database where the security entry will be deleted. (required)
        :param bool apply_to_children: If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
        :param str security_item: The security item of the desired security entries to be deleted. If the parameter is not specified, security entries of the 'Default' security item will be deleted.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_database_delete_security_entry_with_http_info(name, web_id, **kwargs)
        else:
            (data) = self.asset_database_delete_security_entry_with_http_info(name, web_id, **kwargs)
            return data

    def asset_database_delete_security_entry_with_http_info(self, name, web_id, **kwargs):
        """
        Delete a security entry owned by the asset database.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_delete_security_entry_with_http_info(name, web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
        :param str web_id: The ID of the asset database where the security entry will be deleted. (required)
        :param bool apply_to_children: If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
        :param str security_item: The security item of the desired security entries to be deleted. If the parameter is not specified, security entries of the 'Default' security item will be deleted.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'web_id', 'apply_to_children', 'security_item']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_database_delete_security_entry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `asset_database_delete_security_entry`")
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_database_delete_security_entry`")


        collection_formats = {}

        resource_path = '/assetdatabases/{webId}/securityentries/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'apply_to_children' in params:
            query_params['applyToChildren'] = params['apply_to_children']
        if 'security_item' in params:
            query_params['securityItem'] = params['security_item']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_database_export(self, web_id, **kwargs):
        """
        Export the asset database.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_export(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the database. (required)
        :param str end_time: The latest ending time for AFEventFrame, AFTransfer, and AFCase objects that may be part of the export. The default is '*'.
        :param list[str] export_mode: Indicates the type of export to perform. The default is 'StrongReferences'. Multiple export modes may be specified by using multiple instances of exportMode.
        :param str start_time: The earliest starting time for AFEventFrame, AFTransfer, and AFCase objects that may be part of the export. The default is '*-30d'.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_database_export_with_http_info(web_id, **kwargs)
        else:
            (data) = self.asset_database_export_with_http_info(web_id, **kwargs)
            return data

    def asset_database_export_with_http_info(self, web_id, **kwargs):
        """
        Export the asset database.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_export_with_http_info(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the database. (required)
        :param str end_time: The latest ending time for AFEventFrame, AFTransfer, and AFCase objects that may be part of the export. The default is '*'.
        :param list[str] export_mode: Indicates the type of export to perform. The default is 'StrongReferences'. Multiple export modes may be specified by using multiple instances of exportMode.
        :param str start_time: The earliest starting time for AFEventFrame, AFTransfer, and AFCase objects that may be part of the export. The default is '*-30d'.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'end_time', 'export_mode', 'start_time']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_database_export" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_database_export`")


        collection_formats = {}

        resource_path = '/assetdatabases/{webId}/export'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'end_time' in params:
            query_params['endTime'] = params['end_time']
        if 'export_mode' in params:
            query_params['exportMode'] = params['export_mode']
            collection_formats['exportMode'] = 'multi'
        if 'start_time' in params:
            query_params['startTime'] = params['start_time']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_database_find_analyses(self, web_id, field, **kwargs):
        """
        Retrieve analyses based on the specified conditions.
        Users can search for the analyses based on specific search parameters. If no parameters are specified in the search, the default values for each parameter will be used and will return the analyses that match the default search.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_find_analyses(web_id, field, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the database to search for the analyses. (required)
        :param list[str] field: Specifies which of the object's properties are searched. Multiple search fields may be specified with multiple instances of the parameter. The default is 'Name'. (required)
        :param int max_count: The maximum number of objects to be returned per call (page size). The default is 1000.
        :param str query: The query string used for finding analyses. The default is null.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param str sort_field: The field or property of the object used to sort the returned collection. The default is 'Name'.
        :param str sort_order: The order that the returned collection is sorted. The default is 'Ascending'.
        :param int start_index: The starting index (zero based) of the items to be returned. The default is 0.
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_database_find_analyses_with_http_info(web_id, field, **kwargs)
        else:
            (data) = self.asset_database_find_analyses_with_http_info(web_id, field, **kwargs)
            return data

    def asset_database_find_analyses_with_http_info(self, web_id, field, **kwargs):
        """
        Retrieve analyses based on the specified conditions.
        Users can search for the analyses based on specific search parameters. If no parameters are specified in the search, the default values for each parameter will be used and will return the analyses that match the default search.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_find_analyses_with_http_info(web_id, field, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the database to search for the analyses. (required)
        :param list[str] field: Specifies which of the object's properties are searched. Multiple search fields may be specified with multiple instances of the parameter. The default is 'Name'. (required)
        :param int max_count: The maximum number of objects to be returned per call (page size). The default is 1000.
        :param str query: The query string used for finding analyses. The default is null.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param str sort_field: The field or property of the object used to sort the returned collection. The default is 'Name'.
        :param str sort_order: The order that the returned collection is sorted. The default is 'Ascending'.
        :param int start_index: The starting index (zero based) of the items to be returned. The default is 0.
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'field', 'max_count', 'query', 'selected_fields', 'sort_field', 'sort_order', 'start_index']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_database_find_analyses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_database_find_analyses`")
        # verify the required parameter 'field' is set
        if ('field' not in params) or (params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `asset_database_find_analyses`")


        collection_formats = {}

        resource_path = '/assetdatabases/{webId}/analyses'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'field' in params:
            query_params['field'] = params['field']
            collection_formats['field'] = 'multi'
        if 'max_count' in params:
            query_params['maxCount'] = params['max_count']
        if 'query' in params:
            query_params['query'] = params['query']
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']
        if 'sort_field' in params:
            query_params['sortField'] = params['sort_field']
        if 'sort_order' in params:
            query_params['sortOrder'] = params['sort_order']
        if 'start_index' in params:
            query_params['startIndex'] = params['start_index']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20010',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_database_find_element_attributes(self, web_id, **kwargs):
        """
        Retrieves a list of element attributes matching the specified filters from the specified asset database.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_find_element_attributes(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the asset database to use as the root of the search. (required)
        :param str attribute_category: Specify that returned attributes must have this category. The default is no filter.
        :param str attribute_description_filter: The attribute description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter.
        :param str attribute_name_filter: The attribute name filter string used for finding objects. The default is no filter.
        :param str attribute_type: Specify that returned attributes' value type must be this value type. The default is no filter.
        :param str element_category: Specify that the owner of the returned attributes must have this category. The default is no filter.
        :param str element_description_filter: The element description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter.
        :param str element_name_filter: The element name filter string used for finding objects. The default is no filter.
        :param str element_template: Specify that the owner of the returned attributes must have this template or a template derived from this template. The default is no filter.
        :param str element_type: Specify that the element of the returned attributes must have this AFElementType. The default is no filter.
        :param int max_count: The maximum number of objects to be returned (the page size). The default is 1000.
        :param bool search_full_hierarchy: Specifies if the search should include objects nested further than immediate children of the given resource. The default is 'false'.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param str sort_field: The field or property of the object used to sort the returned collection. The default is 'Name'.
        :param str sort_order: The order that the returned collection is sorted. The default is 'Ascending'.
        :param int start_index: The starting index (zero based) of the items to be returned. The default is 0.
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_database_find_element_attributes_with_http_info(web_id, **kwargs)
        else:
            (data) = self.asset_database_find_element_attributes_with_http_info(web_id, **kwargs)
            return data

    def asset_database_find_element_attributes_with_http_info(self, web_id, **kwargs):
        """
        Retrieves a list of element attributes matching the specified filters from the specified asset database.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_find_element_attributes_with_http_info(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the asset database to use as the root of the search. (required)
        :param str attribute_category: Specify that returned attributes must have this category. The default is no filter.
        :param str attribute_description_filter: The attribute description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter.
        :param str attribute_name_filter: The attribute name filter string used for finding objects. The default is no filter.
        :param str attribute_type: Specify that returned attributes' value type must be this value type. The default is no filter.
        :param str element_category: Specify that the owner of the returned attributes must have this category. The default is no filter.
        :param str element_description_filter: The element description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter.
        :param str element_name_filter: The element name filter string used for finding objects. The default is no filter.
        :param str element_template: Specify that the owner of the returned attributes must have this template or a template derived from this template. The default is no filter.
        :param str element_type: Specify that the element of the returned attributes must have this AFElementType. The default is no filter.
        :param int max_count: The maximum number of objects to be returned (the page size). The default is 1000.
        :param bool search_full_hierarchy: Specifies if the search should include objects nested further than immediate children of the given resource. The default is 'false'.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param str sort_field: The field or property of the object used to sort the returned collection. The default is 'Name'.
        :param str sort_order: The order that the returned collection is sorted. The default is 'Ascending'.
        :param int start_index: The starting index (zero based) of the items to be returned. The default is 0.
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'attribute_category', 'attribute_description_filter', 'attribute_name_filter', 'attribute_type', 'element_category', 'element_description_filter', 'element_name_filter', 'element_template', 'element_type', 'max_count', 'search_full_hierarchy', 'selected_fields', 'sort_field', 'sort_order', 'start_index']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_database_find_element_attributes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_database_find_element_attributes`")


        collection_formats = {}

        resource_path = '/assetdatabases/{webId}/elementattributes'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'attribute_category' in params:
            query_params['attributeCategory'] = params['attribute_category']
        if 'attribute_description_filter' in params:
            query_params['attributeDescriptionFilter'] = params['attribute_description_filter']
        if 'attribute_name_filter' in params:
            query_params['attributeNameFilter'] = params['attribute_name_filter']
        if 'attribute_type' in params:
            query_params['attributeType'] = params['attribute_type']
        if 'element_category' in params:
            query_params['elementCategory'] = params['element_category']
        if 'element_description_filter' in params:
            query_params['elementDescriptionFilter'] = params['element_description_filter']
        if 'element_name_filter' in params:
            query_params['elementNameFilter'] = params['element_name_filter']
        if 'element_template' in params:
            query_params['elementTemplate'] = params['element_template']
        if 'element_type' in params:
            query_params['elementType'] = params['element_type']
        if 'max_count' in params:
            query_params['maxCount'] = params['max_count']
        if 'search_full_hierarchy' in params:
            query_params['searchFullHierarchy'] = params['search_full_hierarchy']
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']
        if 'sort_field' in params:
            query_params['sortField'] = params['sort_field']
        if 'sort_order' in params:
            query_params['sortOrder'] = params['sort_order']
        if 'start_index' in params:
            query_params['startIndex'] = params['start_index']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20013',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_database_find_event_frame_attributes(self, web_id, **kwargs):
        """
        Retrieves a list of event frame attributes matching the specified filters from the specified asset database.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_find_event_frame_attributes(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the asset database to use as the root of the search. (required)
        :param str attribute_category: Specify that returned attributes must have this category. The default is no filter.
        :param str attribute_description_filter: The attribute description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter.
        :param str attribute_name_filter: The attribute name filter string used for finding objects. The default is no filter.
        :param str attribute_type: Specify that returned attributes' value type must be this value type. The default is no filter.
        :param str end_time: A string representing the latest ending time for the event frames to be matched. The endTime must be greater than or equal to the startTime. The default is '*'.
        :param str event_frame_category: Specify that the owner of the returned attributes must have this category. The default is no filter.
        :param str event_frame_description_filter: The event frame description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter.
        :param str event_frame_name_filter: The event frame name filter string used for finding objects. The default is no filter.
        :param str event_frame_template: Specify that the owner of the returned attributes must have this template or a template derived from this template. The default is no filter.
        :param int max_count: The maximum number of objects to be returned (the page size). The default is 1000.
        :param str referenced_element_name_filter: The name query string which must match the name of a referenced element. The default is no filter.
        :param bool search_full_hierarchy: Specifies if the search should include objects nested further than immediate children of the given resource. The default is 'false'.
        :param str search_mode: Determines how the startTime and endTime parameters are treated when searching for event frames.     The default is 'Overlapped'.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param str sort_field: The field or property of the object used to sort the returned collection. The default is 'Name'.
        :param str sort_order: The order that the returned collection is sorted. The default is 'Ascending'.
        :param int start_index: The starting index (zero based) of the items to be returned. The default is 0.
        :param str start_time: A string representing the earliest starting time for the event frames to be matched. startTime must be less than or equal to the endTime. The default is '*-8h'.
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_database_find_event_frame_attributes_with_http_info(web_id, **kwargs)
        else:
            (data) = self.asset_database_find_event_frame_attributes_with_http_info(web_id, **kwargs)
            return data

    def asset_database_find_event_frame_attributes_with_http_info(self, web_id, **kwargs):
        """
        Retrieves a list of event frame attributes matching the specified filters from the specified asset database.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_find_event_frame_attributes_with_http_info(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the asset database to use as the root of the search. (required)
        :param str attribute_category: Specify that returned attributes must have this category. The default is no filter.
        :param str attribute_description_filter: The attribute description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter.
        :param str attribute_name_filter: The attribute name filter string used for finding objects. The default is no filter.
        :param str attribute_type: Specify that returned attributes' value type must be this value type. The default is no filter.
        :param str end_time: A string representing the latest ending time for the event frames to be matched. The endTime must be greater than or equal to the startTime. The default is '*'.
        :param str event_frame_category: Specify that the owner of the returned attributes must have this category. The default is no filter.
        :param str event_frame_description_filter: The event frame description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter.
        :param str event_frame_name_filter: The event frame name filter string used for finding objects. The default is no filter.
        :param str event_frame_template: Specify that the owner of the returned attributes must have this template or a template derived from this template. The default is no filter.
        :param int max_count: The maximum number of objects to be returned (the page size). The default is 1000.
        :param str referenced_element_name_filter: The name query string which must match the name of a referenced element. The default is no filter.
        :param bool search_full_hierarchy: Specifies if the search should include objects nested further than immediate children of the given resource. The default is 'false'.
        :param str search_mode: Determines how the startTime and endTime parameters are treated when searching for event frames.     The default is 'Overlapped'.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param str sort_field: The field or property of the object used to sort the returned collection. The default is 'Name'.
        :param str sort_order: The order that the returned collection is sorted. The default is 'Ascending'.
        :param int start_index: The starting index (zero based) of the items to be returned. The default is 0.
        :param str start_time: A string representing the earliest starting time for the event frames to be matched. startTime must be less than or equal to the endTime. The default is '*-8h'.
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'attribute_category', 'attribute_description_filter', 'attribute_name_filter', 'attribute_type', 'end_time', 'event_frame_category', 'event_frame_description_filter', 'event_frame_name_filter', 'event_frame_template', 'max_count', 'referenced_element_name_filter', 'search_full_hierarchy', 'search_mode', 'selected_fields', 'sort_field', 'sort_order', 'start_index', 'start_time']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_database_find_event_frame_attributes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_database_find_event_frame_attributes`")


        collection_formats = {}

        resource_path = '/assetdatabases/{webId}/eventframeattributes'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'attribute_category' in params:
            query_params['attributeCategory'] = params['attribute_category']
        if 'attribute_description_filter' in params:
            query_params['attributeDescriptionFilter'] = params['attribute_description_filter']
        if 'attribute_name_filter' in params:
            query_params['attributeNameFilter'] = params['attribute_name_filter']
        if 'attribute_type' in params:
            query_params['attributeType'] = params['attribute_type']
        if 'end_time' in params:
            query_params['endTime'] = params['end_time']
        if 'event_frame_category' in params:
            query_params['eventFrameCategory'] = params['event_frame_category']
        if 'event_frame_description_filter' in params:
            query_params['eventFrameDescriptionFilter'] = params['event_frame_description_filter']
        if 'event_frame_name_filter' in params:
            query_params['eventFrameNameFilter'] = params['event_frame_name_filter']
        if 'event_frame_template' in params:
            query_params['eventFrameTemplate'] = params['event_frame_template']
        if 'max_count' in params:
            query_params['maxCount'] = params['max_count']
        if 'referenced_element_name_filter' in params:
            query_params['referencedElementNameFilter'] = params['referenced_element_name_filter']
        if 'search_full_hierarchy' in params:
            query_params['searchFullHierarchy'] = params['search_full_hierarchy']
        if 'search_mode' in params:
            query_params['searchMode'] = params['search_mode']
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']
        if 'sort_field' in params:
            query_params['sortField'] = params['sort_field']
        if 'sort_order' in params:
            query_params['sortOrder'] = params['sort_order']
        if 'start_index' in params:
            query_params['startIndex'] = params['start_index']
        if 'start_time' in params:
            query_params['startTime'] = params['start_time']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20013',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_database_get(self, web_id, **kwargs):
        """
        Retrieve an Asset Database.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_get(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the database. (required)
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_database_get_with_http_info(web_id, **kwargs)
        else:
            (data) = self.asset_database_get_with_http_info(web_id, **kwargs)
            return data

    def asset_database_get_with_http_info(self, web_id, **kwargs):
        """
        Retrieve an Asset Database.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_get_with_http_info(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the database. (required)
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'selected_fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_database_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_database_get`")


        collection_formats = {}

        resource_path = '/assetdatabases/{webId}'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2009',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_database_get_analysis_categories(self, web_id, **kwargs):
        """
        Retrieve analysis categories for a given Asset Database.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_get_analysis_categories(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the database. (required)
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_database_get_analysis_categories_with_http_info(web_id, **kwargs)
        else:
            (data) = self.asset_database_get_analysis_categories_with_http_info(web_id, **kwargs)
            return data

    def asset_database_get_analysis_categories_with_http_info(self, web_id, **kwargs):
        """
        Retrieve analysis categories for a given Asset Database.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_get_analysis_categories_with_http_info(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the database. (required)
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'selected_fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_database_get_analysis_categories" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_database_get_analysis_categories`")


        collection_formats = {}

        resource_path = '/assetdatabases/{webId}/analysiscategories'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2002',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_database_get_analysis_templates(self, web_id, field, **kwargs):
        """
        Retrieve analysis templates based on the specified criteria. By default, all analysis templates in the specified Asset Database are returned.
        Users can search for the analysis templates based on specific search parameters. If no parameters are specified in the search, the default values for each parameter will be used and will return the templates that match the default search.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_get_analysis_templates(web_id, field, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the database to search. (required)
        :param list[str] field: Specifies which of the object's properties are searched. Multiple search fields may be specified with multiple instances of the parameter. The default is 'Name'. (required)
        :param int max_count: The maximum number of objects to be returned per call (page size). The default is 1000.
        :param str query: The query string used for finding objects. The default is no query string.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param str sort_field: The field or property of the object used to sort the returned collection. The default is 'Name'.
        :param str sort_order: The order that the returned collection is sorted. The default is 'Ascending'.
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_database_get_analysis_templates_with_http_info(web_id, field, **kwargs)
        else:
            (data) = self.asset_database_get_analysis_templates_with_http_info(web_id, field, **kwargs)
            return data

    def asset_database_get_analysis_templates_with_http_info(self, web_id, field, **kwargs):
        """
        Retrieve analysis templates based on the specified criteria. By default, all analysis templates in the specified Asset Database are returned.
        Users can search for the analysis templates based on specific search parameters. If no parameters are specified in the search, the default values for each parameter will be used and will return the templates that match the default search.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_get_analysis_templates_with_http_info(web_id, field, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the database to search. (required)
        :param list[str] field: Specifies which of the object's properties are searched. Multiple search fields may be specified with multiple instances of the parameter. The default is 'Name'. (required)
        :param int max_count: The maximum number of objects to be returned per call (page size). The default is 1000.
        :param str query: The query string used for finding objects. The default is no query string.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param str sort_field: The field or property of the object used to sort the returned collection. The default is 'Name'.
        :param str sort_order: The order that the returned collection is sorted. The default is 'Ascending'.
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'field', 'max_count', 'query', 'selected_fields', 'sort_field', 'sort_order']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_database_get_analysis_templates" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_database_get_analysis_templates`")
        # verify the required parameter 'field' is set
        if ('field' not in params) or (params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `asset_database_get_analysis_templates`")


        collection_formats = {}

        resource_path = '/assetdatabases/{webId}/analysistemplates'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'field' in params:
            query_params['field'] = params['field']
            collection_formats['field'] = 'multi'
        if 'max_count' in params:
            query_params['maxCount'] = params['max_count']
        if 'query' in params:
            query_params['query'] = params['query']
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']
        if 'sort_field' in params:
            query_params['sortField'] = params['sort_field']
        if 'sort_order' in params:
            query_params['sortOrder'] = params['sort_order']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20011',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_database_get_attribute_categories(self, web_id, **kwargs):
        """
        Retrieve attribute categories for a given Asset Database.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_get_attribute_categories(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the database. (required)
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_database_get_attribute_categories_with_http_info(web_id, **kwargs)
        else:
            (data) = self.asset_database_get_attribute_categories_with_http_info(web_id, **kwargs)
            return data

    def asset_database_get_attribute_categories_with_http_info(self, web_id, **kwargs):
        """
        Retrieve attribute categories for a given Asset Database.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_get_attribute_categories_with_http_info(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the database. (required)
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'selected_fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_database_get_attribute_categories" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_database_get_attribute_categories`")


        collection_formats = {}

        resource_path = '/assetdatabases/{webId}/attributecategories'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20012',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_database_get_by_path(self, path, **kwargs):
        """
        Retrieve an Asset Database by path.
        This method returns an asset database based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_get_by_path(path, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str path: The path to the database. (required)
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_database_get_by_path_with_http_info(path, **kwargs)
        else:
            (data) = self.asset_database_get_by_path_with_http_info(path, **kwargs)
            return data

    def asset_database_get_by_path_with_http_info(self, path, **kwargs):
        """
        Retrieve an Asset Database by path.
        This method returns an asset database based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_get_by_path_with_http_info(path, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str path: The path to the database. (required)
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['path', 'selected_fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_database_get_by_path" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'path' is set
        if ('path' not in params) or (params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `asset_database_get_by_path`")


        collection_formats = {}

        resource_path = '/assetdatabases'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'path' in params:
            query_params['path'] = params['path']
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2009',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_database_get_element_categories(self, web_id, **kwargs):
        """
        Retrieve element categories for a given Asset Database.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_get_element_categories(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the database. (required)
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_database_get_element_categories_with_http_info(web_id, **kwargs)
        else:
            (data) = self.asset_database_get_element_categories_with_http_info(web_id, **kwargs)
            return data

    def asset_database_get_element_categories_with_http_info(self, web_id, **kwargs):
        """
        Retrieve element categories for a given Asset Database.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_get_element_categories_with_http_info(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the database. (required)
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'selected_fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_database_get_element_categories" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_database_get_element_categories`")


        collection_formats = {}

        resource_path = '/assetdatabases/{webId}/elementcategories'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20014',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_database_get_element_templates(self, web_id, field, **kwargs):
        """
        Retrieve element templates based on the specified criteria. Only templates of instance type \"Element\" and \"EventFrame\" are returned. By default, all element and event frame templates in the specified Asset Database are returned.
        Users can search for the element and event frame template based on specific search parameters. If no parameters are specified in the search, the default values for each parameter will be used and will return the templates that match the default search.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_get_element_templates(web_id, field, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the database to search. (required)
        :param list[str] field: Specifies which of the object's properties are searched. Multiple search fields may be specified with multiple instances of the parameter. The default is 'Name'. (required)
        :param int max_count: The maximum number of objects to be returned per call (page size). The default is 1000.
        :param str query: The query string used for finding objects. The default is no query string.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param str sort_field: The field or property of the object used to sort the returned collection. The default is 'Name'.
        :param str sort_order: The order that the returned collection is sorted. The default is 'Ascending'.
        :return: InlineResponse20016
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_database_get_element_templates_with_http_info(web_id, field, **kwargs)
        else:
            (data) = self.asset_database_get_element_templates_with_http_info(web_id, field, **kwargs)
            return data

    def asset_database_get_element_templates_with_http_info(self, web_id, field, **kwargs):
        """
        Retrieve element templates based on the specified criteria. Only templates of instance type \"Element\" and \"EventFrame\" are returned. By default, all element and event frame templates in the specified Asset Database are returned.
        Users can search for the element and event frame template based on specific search parameters. If no parameters are specified in the search, the default values for each parameter will be used and will return the templates that match the default search.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_get_element_templates_with_http_info(web_id, field, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the database to search. (required)
        :param list[str] field: Specifies which of the object's properties are searched. Multiple search fields may be specified with multiple instances of the parameter. The default is 'Name'. (required)
        :param int max_count: The maximum number of objects to be returned per call (page size). The default is 1000.
        :param str query: The query string used for finding objects. The default is no query string.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param str sort_field: The field or property of the object used to sort the returned collection. The default is 'Name'.
        :param str sort_order: The order that the returned collection is sorted. The default is 'Ascending'.
        :return: InlineResponse20016
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'field', 'max_count', 'query', 'selected_fields', 'sort_field', 'sort_order']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_database_get_element_templates" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_database_get_element_templates`")
        # verify the required parameter 'field' is set
        if ('field' not in params) or (params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `asset_database_get_element_templates`")


        collection_formats = {}

        resource_path = '/assetdatabases/{webId}/elementtemplates'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'field' in params:
            query_params['field'] = params['field']
            collection_formats['field'] = 'multi'
        if 'max_count' in params:
            query_params['maxCount'] = params['max_count']
        if 'query' in params:
            query_params['query'] = params['query']
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']
        if 'sort_field' in params:
            query_params['sortField'] = params['sort_field']
        if 'sort_order' in params:
            query_params['sortOrder'] = params['sort_order']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20016',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_database_get_elements(self, web_id, **kwargs):
        """
        Retrieve elements based on the specified conditions. By default, this method selects immediate children of the specified asset database.
        Users can search for the elements based on specific search parameters. If no parameters are specified in the search, the default values for each parameter will be used and will return the elements that match the default search.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_get_elements(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the database to use as the root of the search. (required)
        :param str category_name: Specify that returned elements must have this category. The default is no category filter.
        :param str description_filter: Specify that returned elements must have this description. The default is no description filter.
        :param str element_type: Specify that returned elements must have this type. The default type is 'Any'.
        :param int max_count: The maximum number of objects to be returned per call (page size). The default is 1000.
        :param str name_filter: The name query string used for finding objects. The default is no filter.
        :param bool search_full_hierarchy: Specifies if the search should include objects nested further than the immediate children of the searchRoot. The default is 'false'.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param str sort_field: The field or property of the object used to sort the returned collection. The default is 'Name'.
        :param str sort_order: The order that the returned collection is sorted. The default is 'Ascending'.
        :param int start_index: The starting index (zero based) of the items to be returned. The default is 0.
        :param str template_name: Specify that returned elements must have this template or a template derived from this template. The default is no template filter.
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_database_get_elements_with_http_info(web_id, **kwargs)
        else:
            (data) = self.asset_database_get_elements_with_http_info(web_id, **kwargs)
            return data

    def asset_database_get_elements_with_http_info(self, web_id, **kwargs):
        """
        Retrieve elements based on the specified conditions. By default, this method selects immediate children of the specified asset database.
        Users can search for the elements based on specific search parameters. If no parameters are specified in the search, the default values for each parameter will be used and will return the elements that match the default search.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_get_elements_with_http_info(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the database to use as the root of the search. (required)
        :param str category_name: Specify that returned elements must have this category. The default is no category filter.
        :param str description_filter: Specify that returned elements must have this description. The default is no description filter.
        :param str element_type: Specify that returned elements must have this type. The default type is 'Any'.
        :param int max_count: The maximum number of objects to be returned per call (page size). The default is 1000.
        :param str name_filter: The name query string used for finding objects. The default is no filter.
        :param bool search_full_hierarchy: Specifies if the search should include objects nested further than the immediate children of the searchRoot. The default is 'false'.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param str sort_field: The field or property of the object used to sort the returned collection. The default is 'Name'.
        :param str sort_order: The order that the returned collection is sorted. The default is 'Ascending'.
        :param int start_index: The starting index (zero based) of the items to be returned. The default is 0.
        :param str template_name: Specify that returned elements must have this template or a template derived from this template. The default is no template filter.
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'category_name', 'description_filter', 'element_type', 'max_count', 'name_filter', 'search_full_hierarchy', 'selected_fields', 'sort_field', 'sort_order', 'start_index', 'template_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_database_get_elements" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_database_get_elements`")


        collection_formats = {}

        resource_path = '/assetdatabases/{webId}/elements'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'category_name' in params:
            query_params['categoryName'] = params['category_name']
        if 'description_filter' in params:
            query_params['descriptionFilter'] = params['description_filter']
        if 'element_type' in params:
            query_params['elementType'] = params['element_type']
        if 'max_count' in params:
            query_params['maxCount'] = params['max_count']
        if 'name_filter' in params:
            query_params['nameFilter'] = params['name_filter']
        if 'search_full_hierarchy' in params:
            query_params['searchFullHierarchy'] = params['search_full_hierarchy']
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']
        if 'sort_field' in params:
            query_params['sortField'] = params['sort_field']
        if 'sort_order' in params:
            query_params['sortOrder'] = params['sort_order']
        if 'start_index' in params:
            query_params['startIndex'] = params['start_index']
        if 'template_name' in params:
            query_params['templateName'] = params['template_name']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20015',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_database_get_enumeration_sets(self, web_id, **kwargs):
        """
        Retrieve enumeration sets for given asset database.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_get_enumeration_sets(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the database. (required)
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_database_get_enumeration_sets_with_http_info(web_id, **kwargs)
        else:
            (data) = self.asset_database_get_enumeration_sets_with_http_info(web_id, **kwargs)
            return data

    def asset_database_get_enumeration_sets_with_http_info(self, web_id, **kwargs):
        """
        Retrieve enumeration sets for given asset database.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_get_enumeration_sets_with_http_info(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the database. (required)
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'selected_fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_database_get_enumeration_sets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_database_get_enumeration_sets`")


        collection_formats = {}

        resource_path = '/assetdatabases/{webId}/enumerationsets'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20017',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_database_get_event_frames(self, web_id, **kwargs):
        """
        Retrieve event frames based on the specified conditions. By default, returns all children of the specified root resource with a start time in the past 8 hours.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_get_event_frames(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the asset database to use as the root of the search. (required)
        :param bool can_be_acknowledged: Specify the returned event frames' canBeAcknowledged property. The default is no canBeAcknowledged filter.
        :param str category_name: Specify that returned event frames must have this category. The default is no category filter.
        :param str end_time: The ending time for the search. The endTime must be greater than or equal to the startTime. The searchMode parameter will control whether the comparison will be performed against the event frame's startTime or endTime. The default is '*' if searchMode is not one of the 'Backward*' or 'Forward*' values.
        :param bool is_acknowledged: Specify the returned event frames' isAcknowledged property. The default no isAcknowledged filter.
        :param int max_count: The maximum number of objects to be returned per call (page size). The default is 1000.
        :param str name_filter: The name query string used for finding event frames. The default is no filter.
        :param str referenced_element_name_filter: The name query string which must match the name of a referenced element. The default is no filter.
        :param str referenced_element_template_name: Specify that returned event frames must have an element in the event frame's referenced elements collection that derives from the template. Specify this parameter by name.
        :param bool search_full_hierarchy: Specifies whether the search should include objects nested further than the immediate children of the search root. The default is 'false'.
        :param str search_mode: Determines how the startTime and endTime parameters are treated when searching for event frame objects to be included in the returned collection. If this parameter is one of the 'Backward*' or 'Forward*' values, none of endTime, sortField, or sortOrder may be specified. The default is 'Overlapped'.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param list[str] severity: Specify that returned event frames must have this severity. Multiple severity values may be specified with multiple instances of the parameter. The default is no severity filter.
        :param str sort_field: The field or property of the object used to sort the returned collection. The default is 'Name' if searchMode is not one of the 'Backward*' or 'Forward*' values.
        :param str sort_order: The order that the returned collection is sorted. The default is 'Ascending' if searchMode is not one of the 'Backward*' or 'Forward*' values.
        :param int start_index: The starting index (zero based) of the items to be returned. The default is 0.
        :param str start_time: The starting time for the search. startTime must be less than or equal to the endTime. The searchMode parameter will control whether the comparison will be performed against the event frame's startTime or endTime. The default is '*-8h'.
        :param str template_name: Specify that returned event frames must have this template or a template derived from this template. The default is no template filter. Specify this parameter by name.
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_database_get_event_frames_with_http_info(web_id, **kwargs)
        else:
            (data) = self.asset_database_get_event_frames_with_http_info(web_id, **kwargs)
            return data

    def asset_database_get_event_frames_with_http_info(self, web_id, **kwargs):
        """
        Retrieve event frames based on the specified conditions. By default, returns all children of the specified root resource with a start time in the past 8 hours.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_get_event_frames_with_http_info(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the asset database to use as the root of the search. (required)
        :param bool can_be_acknowledged: Specify the returned event frames' canBeAcknowledged property. The default is no canBeAcknowledged filter.
        :param str category_name: Specify that returned event frames must have this category. The default is no category filter.
        :param str end_time: The ending time for the search. The endTime must be greater than or equal to the startTime. The searchMode parameter will control whether the comparison will be performed against the event frame's startTime or endTime. The default is '*' if searchMode is not one of the 'Backward*' or 'Forward*' values.
        :param bool is_acknowledged: Specify the returned event frames' isAcknowledged property. The default no isAcknowledged filter.
        :param int max_count: The maximum number of objects to be returned per call (page size). The default is 1000.
        :param str name_filter: The name query string used for finding event frames. The default is no filter.
        :param str referenced_element_name_filter: The name query string which must match the name of a referenced element. The default is no filter.
        :param str referenced_element_template_name: Specify that returned event frames must have an element in the event frame's referenced elements collection that derives from the template. Specify this parameter by name.
        :param bool search_full_hierarchy: Specifies whether the search should include objects nested further than the immediate children of the search root. The default is 'false'.
        :param str search_mode: Determines how the startTime and endTime parameters are treated when searching for event frame objects to be included in the returned collection. If this parameter is one of the 'Backward*' or 'Forward*' values, none of endTime, sortField, or sortOrder may be specified. The default is 'Overlapped'.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param list[str] severity: Specify that returned event frames must have this severity. Multiple severity values may be specified with multiple instances of the parameter. The default is no severity filter.
        :param str sort_field: The field or property of the object used to sort the returned collection. The default is 'Name' if searchMode is not one of the 'Backward*' or 'Forward*' values.
        :param str sort_order: The order that the returned collection is sorted. The default is 'Ascending' if searchMode is not one of the 'Backward*' or 'Forward*' values.
        :param int start_index: The starting index (zero based) of the items to be returned. The default is 0.
        :param str start_time: The starting time for the search. startTime must be less than or equal to the endTime. The searchMode parameter will control whether the comparison will be performed against the event frame's startTime or endTime. The default is '*-8h'.
        :param str template_name: Specify that returned event frames must have this template or a template derived from this template. The default is no template filter. Specify this parameter by name.
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'can_be_acknowledged', 'category_name', 'end_time', 'is_acknowledged', 'max_count', 'name_filter', 'referenced_element_name_filter', 'referenced_element_template_name', 'search_full_hierarchy', 'search_mode', 'selected_fields', 'severity', 'sort_field', 'sort_order', 'start_index', 'start_time', 'template_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_database_get_event_frames" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_database_get_event_frames`")


        collection_formats = {}

        resource_path = '/assetdatabases/{webId}/eventframes'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'can_be_acknowledged' in params:
            query_params['canBeAcknowledged'] = params['can_be_acknowledged']
        if 'category_name' in params:
            query_params['categoryName'] = params['category_name']
        if 'end_time' in params:
            query_params['endTime'] = params['end_time']
        if 'is_acknowledged' in params:
            query_params['isAcknowledged'] = params['is_acknowledged']
        if 'max_count' in params:
            query_params['maxCount'] = params['max_count']
        if 'name_filter' in params:
            query_params['nameFilter'] = params['name_filter']
        if 'referenced_element_name_filter' in params:
            query_params['referencedElementNameFilter'] = params['referenced_element_name_filter']
        if 'referenced_element_template_name' in params:
            query_params['referencedElementTemplateName'] = params['referenced_element_template_name']
        if 'search_full_hierarchy' in params:
            query_params['searchFullHierarchy'] = params['search_full_hierarchy']
        if 'search_mode' in params:
            query_params['searchMode'] = params['search_mode']
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']
        if 'severity' in params:
            query_params['severity'] = params['severity']
            collection_formats['severity'] = 'multi'
        if 'sort_field' in params:
            query_params['sortField'] = params['sort_field']
        if 'sort_order' in params:
            query_params['sortOrder'] = params['sort_order']
        if 'start_index' in params:
            query_params['startIndex'] = params['start_index']
        if 'start_time' in params:
            query_params['startTime'] = params['start_time']
        if 'template_name' in params:
            query_params['templateName'] = params['template_name']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20018',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_database_get_referenced_elements(self, web_id, **kwargs):
        """
        Retrieve referenced elements based on the specified conditions. By default, this method selects all referenced elements at the root level of the asset database.
        Users can search for the referenced elements based on specific search parameters. If no parameters are specified in the search, the default values for each parameter will be used and will return the elements that match the default search.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_get_referenced_elements(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the resource to use as the root of the search. (required)
        :param str category_name: Specify that returned elements must have this category. The default is no category filter.
        :param str description_filter: Specify that returned elements must have this description. The default is no description filter.
        :param str element_type: Specify that returned elements must have this type. The default type is 'Any'.
        :param int max_count: The maximum number of objects to be returned per call (page size). The default is 1000.
        :param str name_filter: The name query string used for finding objects. The default is no filter.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param str sort_field: The field or property of the object used to sort the returned collection. The default is 'Name'.
        :param str sort_order: The order that the returned collection is sorted. The default is 'Ascending'.
        :param int start_index: The starting index (zero based) of the items to be returned. The default is 0.
        :param str template_name: Specify that returned elements must have this template or a template derived from this template. The default is no template filter.
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_database_get_referenced_elements_with_http_info(web_id, **kwargs)
        else:
            (data) = self.asset_database_get_referenced_elements_with_http_info(web_id, **kwargs)
            return data

    def asset_database_get_referenced_elements_with_http_info(self, web_id, **kwargs):
        """
        Retrieve referenced elements based on the specified conditions. By default, this method selects all referenced elements at the root level of the asset database.
        Users can search for the referenced elements based on specific search parameters. If no parameters are specified in the search, the default values for each parameter will be used and will return the elements that match the default search.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_get_referenced_elements_with_http_info(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the resource to use as the root of the search. (required)
        :param str category_name: Specify that returned elements must have this category. The default is no category filter.
        :param str description_filter: Specify that returned elements must have this description. The default is no description filter.
        :param str element_type: Specify that returned elements must have this type. The default type is 'Any'.
        :param int max_count: The maximum number of objects to be returned per call (page size). The default is 1000.
        :param str name_filter: The name query string used for finding objects. The default is no filter.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :param str sort_field: The field or property of the object used to sort the returned collection. The default is 'Name'.
        :param str sort_order: The order that the returned collection is sorted. The default is 'Ascending'.
        :param int start_index: The starting index (zero based) of the items to be returned. The default is 0.
        :param str template_name: Specify that returned elements must have this template or a template derived from this template. The default is no template filter.
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'category_name', 'description_filter', 'element_type', 'max_count', 'name_filter', 'selected_fields', 'sort_field', 'sort_order', 'start_index', 'template_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_database_get_referenced_elements" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_database_get_referenced_elements`")


        collection_formats = {}

        resource_path = '/assetdatabases/{webId}/referencedelements'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'category_name' in params:
            query_params['categoryName'] = params['category_name']
        if 'description_filter' in params:
            query_params['descriptionFilter'] = params['description_filter']
        if 'element_type' in params:
            query_params['elementType'] = params['element_type']
        if 'max_count' in params:
            query_params['maxCount'] = params['max_count']
        if 'name_filter' in params:
            query_params['nameFilter'] = params['name_filter']
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']
        if 'sort_field' in params:
            query_params['sortField'] = params['sort_field']
        if 'sort_order' in params:
            query_params['sortOrder'] = params['sort_order']
        if 'start_index' in params:
            query_params['startIndex'] = params['start_index']
        if 'template_name' in params:
            query_params['templateName'] = params['template_name']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20015',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_database_get_security(self, web_id, security_item, user_identity, **kwargs):
        """
        Get the security information of the specified security item associated with the asset database for a specified user.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_get_security(web_id, security_item, user_identity, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the asset database for the security to be checked. (required)
        :param list[str] security_item: The security item of the desired security information to be returned. Multiple security items may be specified with multiple instances of the parameter. If the parameter is not specified, only 'Default' security item of the security information will be returned. (required)
        :param list[str] user_identity: The user identity for the security information to be checked. Multiple security identities may be specified with multiple instances of the parameter. If the parameter is not specified, only the current user's security rights will be returned. (required)
        :param bool force_refresh: Indicates if the security cache should be refreshed before getting security information. The default is 'false'.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_database_get_security_with_http_info(web_id, security_item, user_identity, **kwargs)
        else:
            (data) = self.asset_database_get_security_with_http_info(web_id, security_item, user_identity, **kwargs)
            return data

    def asset_database_get_security_with_http_info(self, web_id, security_item, user_identity, **kwargs):
        """
        Get the security information of the specified security item associated with the asset database for a specified user.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_get_security_with_http_info(web_id, security_item, user_identity, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the asset database for the security to be checked. (required)
        :param list[str] security_item: The security item of the desired security information to be returned. Multiple security items may be specified with multiple instances of the parameter. If the parameter is not specified, only 'Default' security item of the security information will be returned. (required)
        :param list[str] user_identity: The user identity for the security information to be checked. Multiple security identities may be specified with multiple instances of the parameter. If the parameter is not specified, only the current user's security rights will be returned. (required)
        :param bool force_refresh: Indicates if the security cache should be refreshed before getting security information. The default is 'false'.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'security_item', 'user_identity', 'force_refresh', 'selected_fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_database_get_security" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_database_get_security`")
        # verify the required parameter 'security_item' is set
        if ('security_item' not in params) or (params['security_item'] is None):
            raise ValueError("Missing the required parameter `security_item` when calling `asset_database_get_security`")
        # verify the required parameter 'user_identity' is set
        if ('user_identity' not in params) or (params['user_identity'] is None):
            raise ValueError("Missing the required parameter `user_identity` when calling `asset_database_get_security`")


        collection_formats = {}

        resource_path = '/assetdatabases/{webId}/security'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'security_item' in params:
            query_params['securityItem'] = params['security_item']
            collection_formats['securityItem'] = 'multi'
        if 'user_identity' in params:
            query_params['userIdentity'] = params['user_identity']
            collection_formats['userIdentity'] = 'multi'
        if 'force_refresh' in params:
            query_params['forceRefresh'] = params['force_refresh']
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2003',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_database_get_security_entries(self, web_id, **kwargs):
        """
        Retrieve the security entries of the specified security item associated with the asset database based on the specified criteria. By default, all security entries for this asset database are returned.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_get_security_entries(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the asset database. (required)
        :param str name_filter: The name query string used for filtering security entries. The default is no filter.
        :param str security_item: The security item of the desired security entries information to be returned. If the parameter is not specified, security entries of the 'Default' security item will be returned.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_database_get_security_entries_with_http_info(web_id, **kwargs)
        else:
            (data) = self.asset_database_get_security_entries_with_http_info(web_id, **kwargs)
            return data

    def asset_database_get_security_entries_with_http_info(self, web_id, **kwargs):
        """
        Retrieve the security entries of the specified security item associated with the asset database based on the specified criteria. By default, all security entries for this asset database are returned.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_get_security_entries_with_http_info(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the asset database. (required)
        :param str name_filter: The name query string used for filtering security entries. The default is no filter.
        :param str security_item: The security item of the desired security entries information to be returned. If the parameter is not specified, security entries of the 'Default' security item will be returned.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'name_filter', 'security_item', 'selected_fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_database_get_security_entries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_database_get_security_entries`")


        collection_formats = {}

        resource_path = '/assetdatabases/{webId}/securityentries'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'name_filter' in params:
            query_params['nameFilter'] = params['name_filter']
        if 'security_item' in params:
            query_params['securityItem'] = params['security_item']
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2004',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_database_get_security_entry_by_name(self, name, web_id, **kwargs):
        """
        Retrieve the security entry of the specified security item associated with the asset database with the specified name.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_get_security_entry_by_name(name, web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
        :param str web_id: The ID of the asset database. (required)
        :param str security_item: The security item of the desired security entries information to be returned. If the parameter is not specified, security entries of the 'Default' security item will be returned.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse2004Items
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_database_get_security_entry_by_name_with_http_info(name, web_id, **kwargs)
        else:
            (data) = self.asset_database_get_security_entry_by_name_with_http_info(name, web_id, **kwargs)
            return data

    def asset_database_get_security_entry_by_name_with_http_info(self, name, web_id, **kwargs):
        """
        Retrieve the security entry of the specified security item associated with the asset database with the specified name.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_get_security_entry_by_name_with_http_info(name, web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
        :param str web_id: The ID of the asset database. (required)
        :param str security_item: The security item of the desired security entries information to be returned. If the parameter is not specified, security entries of the 'Default' security item will be returned.
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse2004Items
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'web_id', 'security_item', 'selected_fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_database_get_security_entry_by_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `asset_database_get_security_entry_by_name`")
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_database_get_security_entry_by_name`")


        collection_formats = {}

        resource_path = '/assetdatabases/{webId}/securityentries/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'security_item' in params:
            query_params['securityItem'] = params['security_item']
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2004Items',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_database_get_table_categories(self, web_id, **kwargs):
        """
        Retrieve table categories for a given Asset Database.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_get_table_categories(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the database. (required)
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse20019
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_database_get_table_categories_with_http_info(web_id, **kwargs)
        else:
            (data) = self.asset_database_get_table_categories_with_http_info(web_id, **kwargs)
            return data

    def asset_database_get_table_categories_with_http_info(self, web_id, **kwargs):
        """
        Retrieve table categories for a given Asset Database.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_get_table_categories_with_http_info(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the database. (required)
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse20019
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'selected_fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_database_get_table_categories" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_database_get_table_categories`")


        collection_formats = {}

        resource_path = '/assetdatabases/{webId}/tablecategories'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20019',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_database_get_tables(self, web_id, **kwargs):
        """
        Retrieve tables for given Asset Database.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_get_tables(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the database. (required)
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse20020
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_database_get_tables_with_http_info(web_id, **kwargs)
        else:
            (data) = self.asset_database_get_tables_with_http_info(web_id, **kwargs)
            return data

    def asset_database_get_tables_with_http_info(self, web_id, **kwargs):
        """
        Retrieve tables for given Asset Database.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_get_tables_with_http_info(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the database. (required)
        :param str selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :return: InlineResponse20020
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'selected_fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_database_get_tables" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_database_get_tables`")


        collection_formats = {}

        resource_path = '/assetdatabases/{webId}/tables'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'selected_fields' in params:
            query_params['selectedFields'] = params['selected_fields']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20020',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_database_import(self, web_id, **kwargs):
        """
        Import an asset database.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_import(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the asset database. (required)
        :param list[str] import_mode: Indicates the type of import to perform. The default is 'AllowCreate | AllowUpdate | AutoCheckIn'. Multiple import modes may be specified by using multiple instances of importMode.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_database_import_with_http_info(web_id, **kwargs)
        else:
            (data) = self.asset_database_import_with_http_info(web_id, **kwargs)
            return data

    def asset_database_import_with_http_info(self, web_id, **kwargs):
        """
        Import an asset database.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_import_with_http_info(web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the asset database. (required)
        :param list[str] import_mode: Indicates the type of import to perform. The default is 'AllowCreate | AllowUpdate | AutoCheckIn'. Multiple import modes may be specified by using multiple instances of importMode.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'import_mode']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_database_import" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_database_import`")


        collection_formats = {}

        resource_path = '/assetdatabases/{webId}/import'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'import_mode' in params:
            query_params['importMode'] = params['import_mode']
            collection_formats['importMode'] = 'multi'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_database_remove_referenced_element(self, web_id, referenced_element_web_id, **kwargs):
        """
        Remove a reference to an existing element from the specified database.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_remove_referenced_element(web_id, referenced_element_web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the database which the referenced element will be removed from. (required)
        :param list[str] referenced_element_web_id: The ID of the referenced element. Multiple referenced elements may be specified with multiple instances of the parameter. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_database_remove_referenced_element_with_http_info(web_id, referenced_element_web_id, **kwargs)
        else:
            (data) = self.asset_database_remove_referenced_element_with_http_info(web_id, referenced_element_web_id, **kwargs)
            return data

    def asset_database_remove_referenced_element_with_http_info(self, web_id, referenced_element_web_id, **kwargs):
        """
        Remove a reference to an existing element from the specified database.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_remove_referenced_element_with_http_info(web_id, referenced_element_web_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the database which the referenced element will be removed from. (required)
        :param list[str] referenced_element_web_id: The ID of the referenced element. Multiple referenced elements may be specified with multiple instances of the parameter. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'referenced_element_web_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_database_remove_referenced_element" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_database_remove_referenced_element`")
        # verify the required parameter 'referenced_element_web_id' is set
        if ('referenced_element_web_id' not in params) or (params['referenced_element_web_id'] is None):
            raise ValueError("Missing the required parameter `referenced_element_web_id` when calling `asset_database_remove_referenced_element`")


        collection_formats = {}

        resource_path = '/assetdatabases/{webId}/referencedelements'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'referenced_element_web_id' in params:
            query_params['referencedElementWebId'] = params['referenced_element_web_id']
            collection_formats['referencedElementWebId'] = 'multi'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_database_update(self, web_id, database, **kwargs):
        """
        Update an asset database by replacing items in its definition.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_update(web_id, database, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the database. (required)
        :param Database database: A partial database containing the desired changes. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_database_update_with_http_info(web_id, database, **kwargs)
        else:
            (data) = self.asset_database_update_with_http_info(web_id, database, **kwargs)
            return data

    def asset_database_update_with_http_info(self, web_id, database, **kwargs):
        """
        Update an asset database by replacing items in its definition.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_update_with_http_info(web_id, database, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str web_id: The ID of the database. (required)
        :param Database database: A partial database containing the desired changes. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_id', 'database']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_database_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_database_update`")
        # verify the required parameter 'database' is set
        if ('database' not in params) or (params['database'] is None):
            raise ValueError("Missing the required parameter `database` when calling `asset_database_update`")


        collection_formats = {}

        resource_path = '/assetdatabases/{webId}'.replace('{format}', 'json')
        path_params = {}
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'database' in params:
            body_params = params['database']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PATCH',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def asset_database_update_security_entry(self, name, web_id, security_entry, **kwargs):
        """
        Update a security entry owned by the asset database.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_update_security_entry(name, web_id, security_entry, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The name of the security entry. (required)
        :param str web_id: The ID of the asset database where the security entry will be updated. (required)
        :param SecurityEntry7 security_entry: The new security entry definition. The full list of allow and deny rights must be supplied or they will be removed. (required)
        :param bool apply_to_children: If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
        :param str security_item: The security item of the desired security entries to be updated. If the parameter is not specified, security entries of the 'Default' security item will be updated.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.asset_database_update_security_entry_with_http_info(name, web_id, security_entry, **kwargs)
        else:
            (data) = self.asset_database_update_security_entry_with_http_info(name, web_id, security_entry, **kwargs)
            return data

    def asset_database_update_security_entry_with_http_info(self, name, web_id, security_entry, **kwargs):
        """
        Update a security entry owned by the asset database.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.asset_database_update_security_entry_with_http_info(name, web_id, security_entry, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The name of the security entry. (required)
        :param str web_id: The ID of the asset database where the security entry will be updated. (required)
        :param SecurityEntry7 security_entry: The new security entry definition. The full list of allow and deny rights must be supplied or they will be removed. (required)
        :param bool apply_to_children: If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
        :param str security_item: The security item of the desired security entries to be updated. If the parameter is not specified, security entries of the 'Default' security item will be updated.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'web_id', 'security_entry', 'apply_to_children', 'security_item']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_database_update_security_entry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `asset_database_update_security_entry`")
        # verify the required parameter 'web_id' is set
        if ('web_id' not in params) or (params['web_id'] is None):
            raise ValueError("Missing the required parameter `web_id` when calling `asset_database_update_security_entry`")
        # verify the required parameter 'security_entry' is set
        if ('security_entry' not in params) or (params['security_entry'] is None):
            raise ValueError("Missing the required parameter `security_entry` when calling `asset_database_update_security_entry`")


        collection_formats = {}

        resource_path = '/assetdatabases/{webId}/securityentries/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'web_id' in params:
            path_params['webId'] = params['web_id']

        query_params = {}
        if 'apply_to_children' in params:
            query_params['applyToChildren'] = params['apply_to_children']
        if 'security_item' in params:
            query_params['securityItem'] = params['security_item']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'security_entry' in params:
            body_params = params['security_entry']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'text/html', 'application/x-ms-application'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
