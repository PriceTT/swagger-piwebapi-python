# coding: utf-8

"""
    PI Web API 2017 Swagger Spec

    Swagger Spec file that describes PI Web API

    OpenAPI spec version: 1.9.0.266
    Contact: techsupport@osisoft.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InlineResponse20049(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, full_version=None, major_minor_revision=None, build=None):
        """
        InlineResponse20049 - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'full_version': 'str',
            'major_minor_revision': 'str',
            'build': 'str'
        }

        self.attribute_map = {
            'full_version': 'FullVersion',
            'major_minor_revision': 'MajorMinorRevision',
            'build': 'Build'
        }

        self._full_version = full_version
        self._major_minor_revision = major_minor_revision
        self._build = build

    @property
    def full_version(self):
        """
        Gets the full_version of this InlineResponse20049.

        :return: The full_version of this InlineResponse20049.
        :rtype: str
        """
        return self._full_version

    @full_version.setter
    def full_version(self, full_version):
        """
        Sets the full_version of this InlineResponse20049.

        :param full_version: The full_version of this InlineResponse20049.
        :type: str
        """

        self._full_version = full_version

    @property
    def major_minor_revision(self):
        """
        Gets the major_minor_revision of this InlineResponse20049.

        :return: The major_minor_revision of this InlineResponse20049.
        :rtype: str
        """
        return self._major_minor_revision

    @major_minor_revision.setter
    def major_minor_revision(self, major_minor_revision):
        """
        Sets the major_minor_revision of this InlineResponse20049.

        :param major_minor_revision: The major_minor_revision of this InlineResponse20049.
        :type: str
        """

        self._major_minor_revision = major_minor_revision

    @property
    def build(self):
        """
        Gets the build of this InlineResponse20049.

        :return: The build of this InlineResponse20049.
        :rtype: str
        """
        return self._build

    @build.setter
    def build(self, build):
        """
        Sets the build of this InlineResponse20049.

        :param build: The build of this InlineResponse20049.
        :type: str
        """

        self._build = build

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse20049):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
