# coding: utf-8

"""
    PI Web API 2017 Swagger Spec

    Swagger Spec file that describes PI Web API

    OpenAPI spec version: 1.9.0.266
    Contact: techsupport@osisoft.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InlineResponse20047(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, up_time_in_minutes=None, state=None, cache_instances=None):
        """
        InlineResponse20047 - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'up_time_in_minutes': 'float',
            'state': 'str',
            'cache_instances': 'int'
        }

        self.attribute_map = {
            'up_time_in_minutes': 'UpTimeInMinutes',
            'state': 'State',
            'cache_instances': 'CacheInstances'
        }

        self._up_time_in_minutes = up_time_in_minutes
        self._state = state
        self._cache_instances = cache_instances

    @property
    def up_time_in_minutes(self):
        """
        Gets the up_time_in_minutes of this InlineResponse20047.

        :return: The up_time_in_minutes of this InlineResponse20047.
        :rtype: float
        """
        return self._up_time_in_minutes

    @up_time_in_minutes.setter
    def up_time_in_minutes(self, up_time_in_minutes):
        """
        Sets the up_time_in_minutes of this InlineResponse20047.

        :param up_time_in_minutes: The up_time_in_minutes of this InlineResponse20047.
        :type: float
        """

        self._up_time_in_minutes = up_time_in_minutes

    @property
    def state(self):
        """
        Gets the state of this InlineResponse20047.

        :return: The state of this InlineResponse20047.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this InlineResponse20047.

        :param state: The state of this InlineResponse20047.
        :type: str
        """

        self._state = state

    @property
    def cache_instances(self):
        """
        Gets the cache_instances of this InlineResponse20047.

        :return: The cache_instances of this InlineResponse20047.
        :rtype: int
        """
        return self._cache_instances

    @cache_instances.setter
    def cache_instances(self, cache_instances):
        """
        Sets the cache_instances of this InlineResponse20047.

        :param cache_instances: The cache_instances of this InlineResponse20047.
        :type: int
        """

        self._cache_instances = cache_instances

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse20047):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
