# coding: utf-8

"""
    PI Web API 2017 Swagger Spec

    Swagger Spec file that describes PI Web API

    OpenAPI spec version: 1.9.0.266
    Contact: techsupport@osisoft.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InlineResponse2009Links(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, _self=None, elements=None, element_templates=None, event_frames=None, asset_server=None, element_categories=None, attribute_categories=None, table_categories=None, analysis_categories=None, analysis_templates=None, enumeration_sets=None, tables=None, security=None, security_entries=None):
        """
        InlineResponse2009Links - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            '_self': 'str',
            'elements': 'str',
            'element_templates': 'str',
            'event_frames': 'str',
            'asset_server': 'str',
            'element_categories': 'str',
            'attribute_categories': 'str',
            'table_categories': 'str',
            'analysis_categories': 'str',
            'analysis_templates': 'str',
            'enumeration_sets': 'str',
            'tables': 'str',
            'security': 'str',
            'security_entries': 'str'
        }

        self.attribute_map = {
            '_self': 'Self',
            'elements': 'Elements',
            'element_templates': 'ElementTemplates',
            'event_frames': 'EventFrames',
            'asset_server': 'AssetServer',
            'element_categories': 'ElementCategories',
            'attribute_categories': 'AttributeCategories',
            'table_categories': 'TableCategories',
            'analysis_categories': 'AnalysisCategories',
            'analysis_templates': 'AnalysisTemplates',
            'enumeration_sets': 'EnumerationSets',
            'tables': 'Tables',
            'security': 'Security',
            'security_entries': 'SecurityEntries'
        }

        self.__self = _self
        self._elements = elements
        self._element_templates = element_templates
        self._event_frames = event_frames
        self._asset_server = asset_server
        self._element_categories = element_categories
        self._attribute_categories = attribute_categories
        self._table_categories = table_categories
        self._analysis_categories = analysis_categories
        self._analysis_templates = analysis_templates
        self._enumeration_sets = enumeration_sets
        self._tables = tables
        self._security = security
        self._security_entries = security_entries

    @property
    def _self(self):
        """
        Gets the _self of this InlineResponse2009Links.

        :return: The _self of this InlineResponse2009Links.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """
        Sets the _self of this InlineResponse2009Links.

        :param _self: The _self of this InlineResponse2009Links.
        :type: str
        """

        self.__self = _self

    @property
    def elements(self):
        """
        Gets the elements of this InlineResponse2009Links.

        :return: The elements of this InlineResponse2009Links.
        :rtype: str
        """
        return self._elements

    @elements.setter
    def elements(self, elements):
        """
        Sets the elements of this InlineResponse2009Links.

        :param elements: The elements of this InlineResponse2009Links.
        :type: str
        """

        self._elements = elements

    @property
    def element_templates(self):
        """
        Gets the element_templates of this InlineResponse2009Links.

        :return: The element_templates of this InlineResponse2009Links.
        :rtype: str
        """
        return self._element_templates

    @element_templates.setter
    def element_templates(self, element_templates):
        """
        Sets the element_templates of this InlineResponse2009Links.

        :param element_templates: The element_templates of this InlineResponse2009Links.
        :type: str
        """

        self._element_templates = element_templates

    @property
    def event_frames(self):
        """
        Gets the event_frames of this InlineResponse2009Links.

        :return: The event_frames of this InlineResponse2009Links.
        :rtype: str
        """
        return self._event_frames

    @event_frames.setter
    def event_frames(self, event_frames):
        """
        Sets the event_frames of this InlineResponse2009Links.

        :param event_frames: The event_frames of this InlineResponse2009Links.
        :type: str
        """

        self._event_frames = event_frames

    @property
    def asset_server(self):
        """
        Gets the asset_server of this InlineResponse2009Links.

        :return: The asset_server of this InlineResponse2009Links.
        :rtype: str
        """
        return self._asset_server

    @asset_server.setter
    def asset_server(self, asset_server):
        """
        Sets the asset_server of this InlineResponse2009Links.

        :param asset_server: The asset_server of this InlineResponse2009Links.
        :type: str
        """

        self._asset_server = asset_server

    @property
    def element_categories(self):
        """
        Gets the element_categories of this InlineResponse2009Links.

        :return: The element_categories of this InlineResponse2009Links.
        :rtype: str
        """
        return self._element_categories

    @element_categories.setter
    def element_categories(self, element_categories):
        """
        Sets the element_categories of this InlineResponse2009Links.

        :param element_categories: The element_categories of this InlineResponse2009Links.
        :type: str
        """

        self._element_categories = element_categories

    @property
    def attribute_categories(self):
        """
        Gets the attribute_categories of this InlineResponse2009Links.

        :return: The attribute_categories of this InlineResponse2009Links.
        :rtype: str
        """
        return self._attribute_categories

    @attribute_categories.setter
    def attribute_categories(self, attribute_categories):
        """
        Sets the attribute_categories of this InlineResponse2009Links.

        :param attribute_categories: The attribute_categories of this InlineResponse2009Links.
        :type: str
        """

        self._attribute_categories = attribute_categories

    @property
    def table_categories(self):
        """
        Gets the table_categories of this InlineResponse2009Links.

        :return: The table_categories of this InlineResponse2009Links.
        :rtype: str
        """
        return self._table_categories

    @table_categories.setter
    def table_categories(self, table_categories):
        """
        Sets the table_categories of this InlineResponse2009Links.

        :param table_categories: The table_categories of this InlineResponse2009Links.
        :type: str
        """

        self._table_categories = table_categories

    @property
    def analysis_categories(self):
        """
        Gets the analysis_categories of this InlineResponse2009Links.

        :return: The analysis_categories of this InlineResponse2009Links.
        :rtype: str
        """
        return self._analysis_categories

    @analysis_categories.setter
    def analysis_categories(self, analysis_categories):
        """
        Sets the analysis_categories of this InlineResponse2009Links.

        :param analysis_categories: The analysis_categories of this InlineResponse2009Links.
        :type: str
        """

        self._analysis_categories = analysis_categories

    @property
    def analysis_templates(self):
        """
        Gets the analysis_templates of this InlineResponse2009Links.

        :return: The analysis_templates of this InlineResponse2009Links.
        :rtype: str
        """
        return self._analysis_templates

    @analysis_templates.setter
    def analysis_templates(self, analysis_templates):
        """
        Sets the analysis_templates of this InlineResponse2009Links.

        :param analysis_templates: The analysis_templates of this InlineResponse2009Links.
        :type: str
        """

        self._analysis_templates = analysis_templates

    @property
    def enumeration_sets(self):
        """
        Gets the enumeration_sets of this InlineResponse2009Links.

        :return: The enumeration_sets of this InlineResponse2009Links.
        :rtype: str
        """
        return self._enumeration_sets

    @enumeration_sets.setter
    def enumeration_sets(self, enumeration_sets):
        """
        Sets the enumeration_sets of this InlineResponse2009Links.

        :param enumeration_sets: The enumeration_sets of this InlineResponse2009Links.
        :type: str
        """

        self._enumeration_sets = enumeration_sets

    @property
    def tables(self):
        """
        Gets the tables of this InlineResponse2009Links.

        :return: The tables of this InlineResponse2009Links.
        :rtype: str
        """
        return self._tables

    @tables.setter
    def tables(self, tables):
        """
        Sets the tables of this InlineResponse2009Links.

        :param tables: The tables of this InlineResponse2009Links.
        :type: str
        """

        self._tables = tables

    @property
    def security(self):
        """
        Gets the security of this InlineResponse2009Links.

        :return: The security of this InlineResponse2009Links.
        :rtype: str
        """
        return self._security

    @security.setter
    def security(self, security):
        """
        Sets the security of this InlineResponse2009Links.

        :param security: The security of this InlineResponse2009Links.
        :type: str
        """

        self._security = security

    @property
    def security_entries(self):
        """
        Gets the security_entries of this InlineResponse2009Links.

        :return: The security_entries of this InlineResponse2009Links.
        :rtype: str
        """
        return self._security_entries

    @security_entries.setter
    def security_entries(self, security_entries):
        """
        Sets the security_entries of this InlineResponse2009Links.

        :param security_entries: The security_entries of this InlineResponse2009Links.
        :type: str
        """

        self._security_entries = security_entries

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse2009Links):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
