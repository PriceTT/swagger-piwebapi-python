# coding: utf-8

"""
    PI Web API 2017 Swagger Spec

    Swagger Spec file that describes PI Web API

    OpenAPI spec version: 1.9.0.266
    Contact: techsupport@osisoft.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Request(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, method=None, resource=None, request_template=None, parameters=None, headers=None, content=None, parent_ids=None):
        """
        Request - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'method': 'str',
            'resource': 'str',
            'request_template': 'RequestRequestTemplate',
            'parameters': 'list[str]',
            'headers': 'dict(str, str)',
            'content': 'str',
            'parent_ids': 'list[str]'
        }

        self.attribute_map = {
            'method': 'Method',
            'resource': 'Resource',
            'request_template': 'RequestTemplate',
            'parameters': 'Parameters',
            'headers': 'Headers',
            'content': 'Content',
            'parent_ids': 'ParentIds'
        }

        self._method = method
        self._resource = resource
        self._request_template = request_template
        self._parameters = parameters
        self._headers = headers
        self._content = content
        self._parent_ids = parent_ids

    @property
    def method(self):
        """
        Gets the method of this Request.

        :return: The method of this Request.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """
        Sets the method of this Request.

        :param method: The method of this Request.
        :type: str
        """

        self._method = method

    @property
    def resource(self):
        """
        Gets the resource of this Request.

        :return: The resource of this Request.
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """
        Sets the resource of this Request.

        :param resource: The resource of this Request.
        :type: str
        """

        self._resource = resource

    @property
    def request_template(self):
        """
        Gets the request_template of this Request.

        :return: The request_template of this Request.
        :rtype: RequestRequestTemplate
        """
        return self._request_template

    @request_template.setter
    def request_template(self, request_template):
        """
        Sets the request_template of this Request.

        :param request_template: The request_template of this Request.
        :type: RequestRequestTemplate
        """

        self._request_template = request_template

    @property
    def parameters(self):
        """
        Gets the parameters of this Request.

        :return: The parameters of this Request.
        :rtype: list[str]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """
        Sets the parameters of this Request.

        :param parameters: The parameters of this Request.
        :type: list[str]
        """

        self._parameters = parameters

    @property
    def headers(self):
        """
        Gets the headers of this Request.

        :return: The headers of this Request.
        :rtype: dict(str, str)
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """
        Sets the headers of this Request.

        :param headers: The headers of this Request.
        :type: dict(str, str)
        """

        self._headers = headers

    @property
    def content(self):
        """
        Gets the content of this Request.

        :return: The content of this Request.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """
        Sets the content of this Request.

        :param content: The content of this Request.
        :type: str
        """

        self._content = content

    @property
    def parent_ids(self):
        """
        Gets the parent_ids of this Request.

        :return: The parent_ids of this Request.
        :rtype: list[str]
        """
        return self._parent_ids

    @parent_ids.setter
    def parent_ids(self, parent_ids):
        """
        Sets the parent_ids of this Request.

        :param parent_ids: The parent_ids of this Request.
        :type: list[str]
        """

        self._parent_ids = parent_ids

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Request):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
