# coding: utf-8

"""
    PI Web API 2017 Swagger Spec

    Swagger Spec file that describes PI Web API

    OpenAPI spec version: 1.9.0.266
    Contact: techsupport@osisoft.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SecurityRights(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, owner_web_id=None, security_item=None, user_identity=None, links=None):
        """
        SecurityRights - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'owner_web_id': 'str',
            'security_item': 'str',
            'user_identity': 'str',
            'links': 'InlineResponse2003Links'
        }

        self.attribute_map = {
            'owner_web_id': 'OwnerWebId',
            'security_item': 'SecurityItem',
            'user_identity': 'UserIdentity',
            'links': 'Links'
        }

        self._owner_web_id = owner_web_id
        self._security_item = security_item
        self._user_identity = user_identity
        self._links = links

    @property
    def owner_web_id(self):
        """
        Gets the owner_web_id of this SecurityRights.

        :return: The owner_web_id of this SecurityRights.
        :rtype: str
        """
        return self._owner_web_id

    @owner_web_id.setter
    def owner_web_id(self, owner_web_id):
        """
        Sets the owner_web_id of this SecurityRights.

        :param owner_web_id: The owner_web_id of this SecurityRights.
        :type: str
        """

        self._owner_web_id = owner_web_id

    @property
    def security_item(self):
        """
        Gets the security_item of this SecurityRights.

        :return: The security_item of this SecurityRights.
        :rtype: str
        """
        return self._security_item

    @security_item.setter
    def security_item(self, security_item):
        """
        Sets the security_item of this SecurityRights.

        :param security_item: The security_item of this SecurityRights.
        :type: str
        """

        self._security_item = security_item

    @property
    def user_identity(self):
        """
        Gets the user_identity of this SecurityRights.

        :return: The user_identity of this SecurityRights.
        :rtype: str
        """
        return self._user_identity

    @user_identity.setter
    def user_identity(self, user_identity):
        """
        Sets the user_identity of this SecurityRights.

        :param user_identity: The user_identity of this SecurityRights.
        :type: str
        """

        self._user_identity = user_identity

    @property
    def links(self):
        """
        Gets the links of this SecurityRights.

        :return: The links of this SecurityRights.
        :rtype: InlineResponse2003Links
        """
        return self._links

    @links.setter
    def links(self, links):
        """
        Sets the links of this SecurityRights.

        :param links: The links of this SecurityRights.
        :type: InlineResponse2003Links
        """

        self._links = links

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SecurityRights):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
