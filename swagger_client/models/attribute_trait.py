# coding: utf-8

"""
    PI Web API 2017 Swagger Spec

    Swagger Spec file that describes PI Web API

    OpenAPI spec version: 1.9.0.266
    Contact: techsupport@osisoft.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AttributeTrait(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, abbreviation=None, allow_child_attributes=None, allow_duplicates=None, is_allowed_on_root_attribute=None, is_type_inherited=None, is_uom_inherited=None, require_numeric=None, require_string=None, links=None):
        """
        AttributeTrait - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'abbreviation': 'str',
            'allow_child_attributes': 'bool',
            'allow_duplicates': 'bool',
            'is_allowed_on_root_attribute': 'bool',
            'is_type_inherited': 'bool',
            'is_uom_inherited': 'bool',
            'require_numeric': 'bool',
            'require_string': 'bool',
            'links': 'InlineResponse20032Links'
        }

        self.attribute_map = {
            'name': 'Name',
            'abbreviation': 'Abbreviation',
            'allow_child_attributes': 'AllowChildAttributes',
            'allow_duplicates': 'AllowDuplicates',
            'is_allowed_on_root_attribute': 'IsAllowedOnRootAttribute',
            'is_type_inherited': 'IsTypeInherited',
            'is_uom_inherited': 'IsUOMInherited',
            'require_numeric': 'RequireNumeric',
            'require_string': 'RequireString',
            'links': 'Links'
        }

        self._name = name
        self._abbreviation = abbreviation
        self._allow_child_attributes = allow_child_attributes
        self._allow_duplicates = allow_duplicates
        self._is_allowed_on_root_attribute = is_allowed_on_root_attribute
        self._is_type_inherited = is_type_inherited
        self._is_uom_inherited = is_uom_inherited
        self._require_numeric = require_numeric
        self._require_string = require_string
        self._links = links

    @property
    def name(self):
        """
        Gets the name of this AttributeTrait.

        :return: The name of this AttributeTrait.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this AttributeTrait.

        :param name: The name of this AttributeTrait.
        :type: str
        """

        self._name = name

    @property
    def abbreviation(self):
        """
        Gets the abbreviation of this AttributeTrait.

        :return: The abbreviation of this AttributeTrait.
        :rtype: str
        """
        return self._abbreviation

    @abbreviation.setter
    def abbreviation(self, abbreviation):
        """
        Sets the abbreviation of this AttributeTrait.

        :param abbreviation: The abbreviation of this AttributeTrait.
        :type: str
        """

        self._abbreviation = abbreviation

    @property
    def allow_child_attributes(self):
        """
        Gets the allow_child_attributes of this AttributeTrait.

        :return: The allow_child_attributes of this AttributeTrait.
        :rtype: bool
        """
        return self._allow_child_attributes

    @allow_child_attributes.setter
    def allow_child_attributes(self, allow_child_attributes):
        """
        Sets the allow_child_attributes of this AttributeTrait.

        :param allow_child_attributes: The allow_child_attributes of this AttributeTrait.
        :type: bool
        """

        self._allow_child_attributes = allow_child_attributes

    @property
    def allow_duplicates(self):
        """
        Gets the allow_duplicates of this AttributeTrait.

        :return: The allow_duplicates of this AttributeTrait.
        :rtype: bool
        """
        return self._allow_duplicates

    @allow_duplicates.setter
    def allow_duplicates(self, allow_duplicates):
        """
        Sets the allow_duplicates of this AttributeTrait.

        :param allow_duplicates: The allow_duplicates of this AttributeTrait.
        :type: bool
        """

        self._allow_duplicates = allow_duplicates

    @property
    def is_allowed_on_root_attribute(self):
        """
        Gets the is_allowed_on_root_attribute of this AttributeTrait.

        :return: The is_allowed_on_root_attribute of this AttributeTrait.
        :rtype: bool
        """
        return self._is_allowed_on_root_attribute

    @is_allowed_on_root_attribute.setter
    def is_allowed_on_root_attribute(self, is_allowed_on_root_attribute):
        """
        Sets the is_allowed_on_root_attribute of this AttributeTrait.

        :param is_allowed_on_root_attribute: The is_allowed_on_root_attribute of this AttributeTrait.
        :type: bool
        """

        self._is_allowed_on_root_attribute = is_allowed_on_root_attribute

    @property
    def is_type_inherited(self):
        """
        Gets the is_type_inherited of this AttributeTrait.

        :return: The is_type_inherited of this AttributeTrait.
        :rtype: bool
        """
        return self._is_type_inherited

    @is_type_inherited.setter
    def is_type_inherited(self, is_type_inherited):
        """
        Sets the is_type_inherited of this AttributeTrait.

        :param is_type_inherited: The is_type_inherited of this AttributeTrait.
        :type: bool
        """

        self._is_type_inherited = is_type_inherited

    @property
    def is_uom_inherited(self):
        """
        Gets the is_uom_inherited of this AttributeTrait.

        :return: The is_uom_inherited of this AttributeTrait.
        :rtype: bool
        """
        return self._is_uom_inherited

    @is_uom_inherited.setter
    def is_uom_inherited(self, is_uom_inherited):
        """
        Sets the is_uom_inherited of this AttributeTrait.

        :param is_uom_inherited: The is_uom_inherited of this AttributeTrait.
        :type: bool
        """

        self._is_uom_inherited = is_uom_inherited

    @property
    def require_numeric(self):
        """
        Gets the require_numeric of this AttributeTrait.

        :return: The require_numeric of this AttributeTrait.
        :rtype: bool
        """
        return self._require_numeric

    @require_numeric.setter
    def require_numeric(self, require_numeric):
        """
        Sets the require_numeric of this AttributeTrait.

        :param require_numeric: The require_numeric of this AttributeTrait.
        :type: bool
        """

        self._require_numeric = require_numeric

    @property
    def require_string(self):
        """
        Gets the require_string of this AttributeTrait.

        :return: The require_string of this AttributeTrait.
        :rtype: bool
        """
        return self._require_string

    @require_string.setter
    def require_string(self, require_string):
        """
        Sets the require_string of this AttributeTrait.

        :param require_string: The require_string of this AttributeTrait.
        :type: bool
        """

        self._require_string = require_string

    @property
    def links(self):
        """
        Gets the links of this AttributeTrait.

        :return: The links of this AttributeTrait.
        :rtype: InlineResponse20032Links
        """
        return self._links

    @links.setter
    def links(self, links):
        """
        Sets the links of this AttributeTrait.

        :param links: The links of this AttributeTrait.
        :type: InlineResponse20032Links
        """

        self._links = links

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AttributeTrait):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
