# coding: utf-8

"""
    PI Web API 2017 Swagger Spec

    Swagger Spec file that describes PI Web API

    OpenAPI spec version: 1.9.0.266
    Contact: techsupport@osisoft.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Value(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, timestamp=None, units_abbreviation=None, good=None, questionable=None, substituted=None, value=None, exception=None):
        """
        Value - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'timestamp': 'datetime',
            'units_abbreviation': 'str',
            'good': 'bool',
            'questionable': 'bool',
            'substituted': 'bool',
            'value': 'object',
            'exception': 'InlineResponse400'
        }

        self.attribute_map = {
            'timestamp': 'Timestamp',
            'units_abbreviation': 'UnitsAbbreviation',
            'good': 'Good',
            'questionable': 'Questionable',
            'substituted': 'Substituted',
            'value': 'Value',
            'exception': 'Exception'
        }

        self._timestamp = timestamp
        self._units_abbreviation = units_abbreviation
        self._good = good
        self._questionable = questionable
        self._substituted = substituted
        self._value = value
        self._exception = exception

    @property
    def timestamp(self):
        """
        Gets the timestamp of this Value.

        :return: The timestamp of this Value.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this Value.

        :param timestamp: The timestamp of this Value.
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def units_abbreviation(self):
        """
        Gets the units_abbreviation of this Value.

        :return: The units_abbreviation of this Value.
        :rtype: str
        """
        return self._units_abbreviation

    @units_abbreviation.setter
    def units_abbreviation(self, units_abbreviation):
        """
        Sets the units_abbreviation of this Value.

        :param units_abbreviation: The units_abbreviation of this Value.
        :type: str
        """

        self._units_abbreviation = units_abbreviation

    @property
    def good(self):
        """
        Gets the good of this Value.

        :return: The good of this Value.
        :rtype: bool
        """
        return self._good

    @good.setter
    def good(self, good):
        """
        Sets the good of this Value.

        :param good: The good of this Value.
        :type: bool
        """

        self._good = good

    @property
    def questionable(self):
        """
        Gets the questionable of this Value.

        :return: The questionable of this Value.
        :rtype: bool
        """
        return self._questionable

    @questionable.setter
    def questionable(self, questionable):
        """
        Sets the questionable of this Value.

        :param questionable: The questionable of this Value.
        :type: bool
        """

        self._questionable = questionable

    @property
    def substituted(self):
        """
        Gets the substituted of this Value.

        :return: The substituted of this Value.
        :rtype: bool
        """
        return self._substituted

    @substituted.setter
    def substituted(self, substituted):
        """
        Sets the substituted of this Value.

        :param substituted: The substituted of this Value.
        :type: bool
        """

        self._substituted = substituted

    @property
    def value(self):
        """
        Gets the value of this Value.

        :return: The value of this Value.
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value):
        """
        Sets the value of this Value.

        :param value: The value of this Value.
        :type: object
        """

        self._value = value

    @property
    def exception(self):
        """
        Gets the exception of this Value.

        :return: The exception of this Value.
        :rtype: InlineResponse400
        """
        return self._exception

    @exception.setter
    def exception(self, exception):
        """
        Sets the exception of this Value.

        :param exception: The exception of this Value.
        :type: InlineResponse400
        """

        self._exception = exception

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Value):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
