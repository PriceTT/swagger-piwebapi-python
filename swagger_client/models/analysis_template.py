# coding: utf-8

"""
    PI Web API 2017 Swagger Spec

    Swagger Spec file that describes PI Web API

    OpenAPI spec version: 1.9.0.266
    Contact: techsupport@osisoft.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AnalysisTemplate(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, web_id=None, id=None, name=None, description=None, path=None, analysis_rule_plug_in_name=None, category_names=None, create_enabled=None, group_id=None, has_notification_template=None, has_target=None, output_time=None, target_name=None, time_rule_plug_in_name=None, links=None):
        """
        AnalysisTemplate - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'web_id': 'str',
            'id': 'str',
            'name': 'str',
            'description': 'str',
            'path': 'str',
            'analysis_rule_plug_in_name': 'str',
            'category_names': 'list[str]',
            'create_enabled': 'bool',
            'group_id': 'int',
            'has_notification_template': 'bool',
            'has_target': 'bool',
            'output_time': 'str',
            'target_name': 'str',
            'time_rule_plug_in_name': 'str',
            'links': 'InlineResponse2008Links'
        }

        self.attribute_map = {
            'web_id': 'WebId',
            'id': 'Id',
            'name': 'Name',
            'description': 'Description',
            'path': 'Path',
            'analysis_rule_plug_in_name': 'AnalysisRulePlugInName',
            'category_names': 'CategoryNames',
            'create_enabled': 'CreateEnabled',
            'group_id': 'GroupId',
            'has_notification_template': 'HasNotificationTemplate',
            'has_target': 'HasTarget',
            'output_time': 'OutputTime',
            'target_name': 'TargetName',
            'time_rule_plug_in_name': 'TimeRulePlugInName',
            'links': 'Links'
        }

        self._web_id = web_id
        self._id = id
        self._name = name
        self._description = description
        self._path = path
        self._analysis_rule_plug_in_name = analysis_rule_plug_in_name
        self._category_names = category_names
        self._create_enabled = create_enabled
        self._group_id = group_id
        self._has_notification_template = has_notification_template
        self._has_target = has_target
        self._output_time = output_time
        self._target_name = target_name
        self._time_rule_plug_in_name = time_rule_plug_in_name
        self._links = links

    @property
    def web_id(self):
        """
        Gets the web_id of this AnalysisTemplate.

        :return: The web_id of this AnalysisTemplate.
        :rtype: str
        """
        return self._web_id

    @web_id.setter
    def web_id(self, web_id):
        """
        Sets the web_id of this AnalysisTemplate.

        :param web_id: The web_id of this AnalysisTemplate.
        :type: str
        """

        self._web_id = web_id

    @property
    def id(self):
        """
        Gets the id of this AnalysisTemplate.

        :return: The id of this AnalysisTemplate.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this AnalysisTemplate.

        :param id: The id of this AnalysisTemplate.
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this AnalysisTemplate.

        :return: The name of this AnalysisTemplate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this AnalysisTemplate.

        :param name: The name of this AnalysisTemplate.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this AnalysisTemplate.

        :return: The description of this AnalysisTemplate.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this AnalysisTemplate.

        :param description: The description of this AnalysisTemplate.
        :type: str
        """

        self._description = description

    @property
    def path(self):
        """
        Gets the path of this AnalysisTemplate.

        :return: The path of this AnalysisTemplate.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """
        Sets the path of this AnalysisTemplate.

        :param path: The path of this AnalysisTemplate.
        :type: str
        """

        self._path = path

    @property
    def analysis_rule_plug_in_name(self):
        """
        Gets the analysis_rule_plug_in_name of this AnalysisTemplate.

        :return: The analysis_rule_plug_in_name of this AnalysisTemplate.
        :rtype: str
        """
        return self._analysis_rule_plug_in_name

    @analysis_rule_plug_in_name.setter
    def analysis_rule_plug_in_name(self, analysis_rule_plug_in_name):
        """
        Sets the analysis_rule_plug_in_name of this AnalysisTemplate.

        :param analysis_rule_plug_in_name: The analysis_rule_plug_in_name of this AnalysisTemplate.
        :type: str
        """

        self._analysis_rule_plug_in_name = analysis_rule_plug_in_name

    @property
    def category_names(self):
        """
        Gets the category_names of this AnalysisTemplate.

        :return: The category_names of this AnalysisTemplate.
        :rtype: list[str]
        """
        return self._category_names

    @category_names.setter
    def category_names(self, category_names):
        """
        Sets the category_names of this AnalysisTemplate.

        :param category_names: The category_names of this AnalysisTemplate.
        :type: list[str]
        """

        self._category_names = category_names

    @property
    def create_enabled(self):
        """
        Gets the create_enabled of this AnalysisTemplate.

        :return: The create_enabled of this AnalysisTemplate.
        :rtype: bool
        """
        return self._create_enabled

    @create_enabled.setter
    def create_enabled(self, create_enabled):
        """
        Sets the create_enabled of this AnalysisTemplate.

        :param create_enabled: The create_enabled of this AnalysisTemplate.
        :type: bool
        """

        self._create_enabled = create_enabled

    @property
    def group_id(self):
        """
        Gets the group_id of this AnalysisTemplate.

        :return: The group_id of this AnalysisTemplate.
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """
        Sets the group_id of this AnalysisTemplate.

        :param group_id: The group_id of this AnalysisTemplate.
        :type: int
        """

        self._group_id = group_id

    @property
    def has_notification_template(self):
        """
        Gets the has_notification_template of this AnalysisTemplate.

        :return: The has_notification_template of this AnalysisTemplate.
        :rtype: bool
        """
        return self._has_notification_template

    @has_notification_template.setter
    def has_notification_template(self, has_notification_template):
        """
        Sets the has_notification_template of this AnalysisTemplate.

        :param has_notification_template: The has_notification_template of this AnalysisTemplate.
        :type: bool
        """

        self._has_notification_template = has_notification_template

    @property
    def has_target(self):
        """
        Gets the has_target of this AnalysisTemplate.

        :return: The has_target of this AnalysisTemplate.
        :rtype: bool
        """
        return self._has_target

    @has_target.setter
    def has_target(self, has_target):
        """
        Sets the has_target of this AnalysisTemplate.

        :param has_target: The has_target of this AnalysisTemplate.
        :type: bool
        """

        self._has_target = has_target

    @property
    def output_time(self):
        """
        Gets the output_time of this AnalysisTemplate.

        :return: The output_time of this AnalysisTemplate.
        :rtype: str
        """
        return self._output_time

    @output_time.setter
    def output_time(self, output_time):
        """
        Sets the output_time of this AnalysisTemplate.

        :param output_time: The output_time of this AnalysisTemplate.
        :type: str
        """

        self._output_time = output_time

    @property
    def target_name(self):
        """
        Gets the target_name of this AnalysisTemplate.

        :return: The target_name of this AnalysisTemplate.
        :rtype: str
        """
        return self._target_name

    @target_name.setter
    def target_name(self, target_name):
        """
        Sets the target_name of this AnalysisTemplate.

        :param target_name: The target_name of this AnalysisTemplate.
        :type: str
        """

        self._target_name = target_name

    @property
    def time_rule_plug_in_name(self):
        """
        Gets the time_rule_plug_in_name of this AnalysisTemplate.

        :return: The time_rule_plug_in_name of this AnalysisTemplate.
        :rtype: str
        """
        return self._time_rule_plug_in_name

    @time_rule_plug_in_name.setter
    def time_rule_plug_in_name(self, time_rule_plug_in_name):
        """
        Sets the time_rule_plug_in_name of this AnalysisTemplate.

        :param time_rule_plug_in_name: The time_rule_plug_in_name of this AnalysisTemplate.
        :type: str
        """

        self._time_rule_plug_in_name = time_rule_plug_in_name

    @property
    def links(self):
        """
        Gets the links of this AnalysisTemplate.

        :return: The links of this AnalysisTemplate.
        :rtype: InlineResponse2008Links
        """
        return self._links

    @links.setter
    def links(self, links):
        """
        Sets the links of this AnalysisTemplate.

        :param links: The links of this AnalysisTemplate.
        :type: InlineResponse2008Links
        """

        self._links = links

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AnalysisTemplate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
